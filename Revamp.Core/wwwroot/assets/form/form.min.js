var AutoSaveCounter;
var last_save;
var loading;

$("#designer-wrapper .form-element").click(function (b) {
    b.preventDefault();
    if ($(this).hasClass("tooltips"))
        var a = $(this).attr("class").replace(" form-element button1 tooltips", "");
    else
        var a = $(this).attr("class").replace(" form-element button1", "");

    var boolDontCreateWidget = $('#designer-wrapper .tab-content div.active .gridster ul').find('li').length > 0;
    var ResizeWidgetSelector = '#designer-wrapper .tab-content div.active li.selected';
    var ResizeWidgetSelector2nd = '#designer-wrapper #main-column div.active li.selected';

    //START 
    if (!boolDontCreateWidget) {
        var count = 0;

        count = WidgetId();
        var grid = $("#designer-wrapper #main-column div.active").attr("id").slice("6");
        ResizeWidgetSelector = '#designer-wrapper #main-column div.active li.selected';
        ResizeWidgetSelector2nd = gridster[grid].add_widget('<li class="widget' + count + ' selected"></li>', 5, 2);
    }

    main.addElement(main.lookUp(a), '', 0);

    if ($('#designer-wrapper #main-column div.active li.selected .current .RichCkeditor').length > 0) {
        CKEDITOR.replace($('#designer-wrapper #main-column div.active li.selected .current .RichCkeditor').attr("id"), {
            customConfig: '/assets/global/plugins/ckeditor/RichTextConfig.js',
            maxLength: 10
        });
        ResizeWidget(ResizeWidgetSelector, 9);
        forms.designer.fn.svgResize();
    }

    ResizeWidget(ResizeWidgetSelector2nd);
    forms.designer.fn.svgResize();
    ObjectSettingsClick();

    //END
});

$("#designer-wrapper .nav a.stage_settings").live("click", function () {
    $(this).parent(".nav-tabs li").find("a:first").trigger("click");

    if ($(".app-toolbar").hasClass("toggle-off")) {
        $(".object-toggler .fa-bars").trigger("click");
    }
    if ($("#stage-settings .fa-angle-left").length > 0) {
        $("#stage-settings.toolbar-section-toggle").click();
    }
});

$(".stage-settings-section").on("click", function () {
    forms.designer.fn.stageSettingsClick();
});

$("#designer-wrapper #stageAddAllobj").click(function () {
    if ($("#designer-wrapper #stageAddAllobj").prop('checked')) {
        $("#designer-wrapper #dynamicform .tab-pane.active .gridster-ul .gs-w").each(function (index, element) {
            $(element).find(".row").each(function (rowindex, rowelement) {
                var objectRoles = [];
                var approles = [];
                if (($(rowelement).data("roles")) != undefined) {
                    objectRoles = $(rowelement).data("roles").toString().split(",");
                }

                if ($("#main-column .nav-tabs li.active").data("roles") != null) {
                    approles = $("#main-column .nav-tabs li.active").data("roles").toString().split(",");
                }
                for (var j = 0; j < objectRoles.length; j++) {
                    if (approles.indexOf(objectRoles[j]) < 0) {
                        approles[approles.length] = objectRoles[j];
                    }
                }
                $(rowelement).data("roles", approles);
            });
        });
    }

});
$("#stageReplaceAllobj").click(function () {
    if ($("#stageReplaceAllobj").prop('checked') == true) {
        $("#dynamicform .tab-pane.active .gridster-ul .gs-w").each(function (index, element) {
            $(element).find(".row").data("roles", $("#main-column .nav-tabs li.active").data("roles"));
        });
    }
});

$("#stageAddAllsec").click(function () {
    if ($("#stageAddAllsec").prop('checked')) {
        $("#dynamicform .tab-pane.active .gridster-ul .gs-w").each(function (rowindex, rowelement) {
            var objectRoles = [];
            var approles = [];
            if (($(rowelement).data("roles")) != undefined) {
                objectRoles = $(rowelement).data("roles").toString().split(",");
            }
            if ($("#stage-options-role").val() != null) {
                approles = $("#stage-options-role").val().toString().split(",");
            }
            for (var j = 0; j < objectRoles.length; j++) {
                if (approles.indexOf(objectRoles[j]) < 0) {
                    approles[approles.length] = objectRoles[j];
                }
            }
            $(rowelement).data("roles", approles);
        });
    }

});
$("#stageReplaceAllsec").click(function () {
    if ($("#stageReplaceAllsec").prop('checked') == true) {
        $("#dynamicform .tab-pane.active .gridster-ul .gs-w").data("roles", $("#stage-options-role").val());

    }
});

$('#stage-options-name').live("keyup", function () {

    var stageName = $("#stage-options-name").val();
    var option = ($("#main-column li.active").index() - 1);
    $("#main-column li.active a:first").text(stageName);

    //Check for duplicate stage name
    forms.designer.fn.duplicateStageName("#stage-options-name");

    //Updates Stage Relationship items to have the matching stage name
    $("#children-items option:eq(" + option + ")").val(stageName).text(stageName);
    $("#parent-items option:eq(" + option + ")").val(stageName).text(stageName);
    $("#stage-options-relationship-parents, #stage-options-relationship-children").multiSelect('refresh');
});

$(".section-hide-all-borders").on("click", function (b) {
    $(".tab-content .active .gridster-ul li").css("border-top", "0px");
    $(".tab-content .active .gridster-ul li").css("border-left", "0px");
    $(".tab-content .active .gridster-ul li").css("border-right", "0px");
    $(".tab-content .active .gridster-ul li").css("border-bottom", "0px");
    $(".tab-content .active .gridster-ul li").data("section-top-border", "0px");
    $(".tab-content .active .gridster-ul li").data("section-bottom-border", "0px");
    $(".tab-content .active .gridster-ul li").data("section-left-border", "0px");
    $(".tab-content .active .gridster-ul li").data("section-right-border", "0px");
    $("#main-column .nav-tabs .active").data("hide-borders", "true");

});

$(".section-show-all-borders").on("click", function (b) {
    $(".tab-content .active .gridster-ul li").css("border-top", "1px solid #000000");
    $(".tab-content .active .gridster-ul li").css("border-left", "1px solid #000000");
    $(".tab-content .active .gridster-ul li").css("border-right", "1px solid #000000");
    $(".tab-content .active .gridster-ul li").css("border-bottom", "1px solid #000000");
    $(".tab-content .active .gridster-ul li").data("section-top-border", "1px solid #000000");
    $(".tab-content .active .gridster-ul li").data("section-bottom-border", "1px solid #000000");
    $(".tab-content .active .gridster-ul li").data("section-left-border", "1px solid #000000");
    $(".tab-content .active .gridster-ul li").data("section-right-border", "1px solid #000000");
    $("#main-column .nav-tabs .active").data("hide-borders", "false");
});

function ResizeWidget(w, heightIncrement, widthIncrement) {
    var totalHeight = 0, totalWidth = 0;
    var currentHeight = parseInt($(w).attr('data-sizey'));
    var currentWidth = parseInt($(w).attr('data-sizex'));
    var activePage = $('#main-column div.active');
    var grid = activePage.attr("id").slice("6");

    heightIncrement = heightIncrement || 1;
    widthIncrement = widthIncrement || 0;

    $(w).find('div.row').each(function (index, element) {
        totalHeight = totalHeight + $(element).outerHeight(true);

        //if ($(element).find("label, span").last().outerWidth(true) > totalWidth)
        //    totalWidth = $(element).find("label, span").last().outerWidth(true);
    });

    totalHeight = Math.ceil(totalHeight / 40) + heightIncrement;
    totalWidth = Math.ceil(currentWidth + widthIncrement);

    //Adjust height
    if (currentHeight <= totalHeight) {
        gridster[grid].resize_widget($(w), $(w).attr('data-sizex'), totalHeight, false);
    }

    //Adjust width
    if (currentWidth <= totalWidth && activePage.find('li.selected .current .addImage').length > 0) {
        gridster[grid].resize_widget($(w), totalWidth, $(w).attr('data-sizey'), false);
    }

    if (totalHeight > 13 || $('.selected').height() > 500) {
        activePage.animate({ scrollTop: activePage.height() }, 'fast');
    }
}

function WidgetId() { //Gets the highest id value for the current stages' sections

    var max = 0;

    $("div.active li[class^='widget']").each(function () {

        var val = $(this).attr("class").split(' ')[0].match(/\d+/);

        if (parseInt(val) > parseInt(max)) {
            max = val;
        }
    });

    return parseInt(max) + 1;
}


function NameToProper(a) {
    return a.toLowerCase().replace(/^\s\s*/, "").replace(/\s\s*$dy/, "").replace(/ /g, "_").replace(/-/g, "_")
}

//function updateImageSettings() {
//    //Set default image and classes
//    $("#objects-settings-panel .fileinput-new.thumbnail img").attr("src", "/images/no_image.gif");
//    $("#objects-settings-panel .add-image-fileinput .btn-file").parent("div").find("a.btn.default").attr("class", "btn default fileinput-exists");
//    $("#objects-settings-panel .add-image-fileinput .btn-file span:nth-child(1)").attr("class", "fileinput-new");
//    $("#objects-settings-panel .add-image-fileinput .btn-file span:nth-child(2)").attr("class", "fileinput-exists");

//    //Correct errors with configuring new images
//    if ($("#objects-settings-panel .fileinput-exists.thumbnail").css("display") == 'none' && $("#objects-settings-panel .add-image-fileinput .btn-file span:nth-child(1)").css("display") == 'none') {
//        $("#objects-settings-panel .add-image-fileinput .btn-file").parent("div").find(".fileinput-exists").hide();
//        $("#objects-settings-panel .add-image-fileinput .btn-file .fileinput-new").show();
//    }

//    //Correct errors with configuring existing images
//    if ($("#objects-settings-panel .fileinput-exists.thumbnail").css("display") != 'none' && $("#objects-settings-panel .add-image-fileinput .btn-file span:nth-child(2)").css("display") == 'none') {
//        $("#objects-settings-panel .add-image-fileinput .btn-file .fileinput-new").hide();
//        $("#objects-settings-panel .add-image-fileinput .btn-file").parent("div").find(".fileinput-exists").show();
//    }
//}

//$('input:file').live('change', function () {
//    updateImageSettings();
    //updateImage($(this));
//});


//function updateImage(input) {
//    console.log('update image');
//    var fileContainer = input.closest('div[data-provides="fileinput"]')
//    if (forms.designer.fn.validateUploadSize(fileContainer)) {
//        console.log('valid update');

//        //get image data
//        if (input.files && input.files[0]) {
//            var imagedat, imagewidth, imageheight;
//            var FileID;
//            if (window.File && window.FileReader && window.FileList && window.Blob) {
//                var reader = new FileReader();
//                reader.onload = function (e) {
//                    var image = new Image();
//                    image.src = e.target.result;
//                    image.onload = function () {

//                        imagedat = e.target.result;
//                        imagewidth = image.width;
//                        imageheight = image.height;
//                        $('div.current img:first').attr('src', imagedat);
//                        $('#form-options-img-width').val(imagewidth);
//                        $('#form-options-img-height').val(imageheight);

//                        //Resize image if larger than min form width (945px)
//                        if (imagewidth <= 945) {
//                            $('div.current img:first').attr('width', imagewidth);
//                        }
//                        else {
//                            $('div.current img:first').attr('width', 945);
//                        }

//                        $('div.current img:first').attr('height', imageheight);

//                        //Resize Section to fit image
//                        resizeSectionToImage(imagewidth, imageheight);

//                        var name = $(input).val().split("\\")
//                        //Save image in db
//                        //FileID = $.ajax({
//                        //    type: "POST",
//                        //    url: "/forms/designerjson/saveImage",
//                        //    // The key needs to match your method's input parameter (case-sensitive).
//                        //    data: { filename: name[name.length - 1], filedata: imagedat },
//                        //    dataType: "string",
//                        //    async: false,
//                        //    success: function (data) { },
//                        //    failure: function (errMsg) {
//                        //        alert(errMsg);
//                        //    }
//                        //}).responseText;
//                        //$('div.current img:first').attr('data-imageid', FileID);
//                        //$('#image-options').append("<img data-imageid='" + FileID + "' src='/forms/designer/StageImage/" + FileID + "' width='" + 130 + "' height='" + 130 + "' id='img" + parseInt($('#image-options img').length) + 1 + "'>");
//                        $('div.current img:first').attr("data-imgName", name[name.length - 1]);
//                    };
//                }
//                reader.readAsDataURL(input.files[0]);
//            }
//            else {
//                var a = input.value
//                //get selected image bytes
//                var response = $.ajax({
//                    type: "POST",
//                    url: "/forms/designerjson/getImageFromPath",
//                    // The key needs to match your method's input parameter (case-sensitive).
//                    data: { localPath: a },
//                    dataType: "string",
//                    async: false,
//                    success: function (data) {
//                    },
//                    failure: function (errMsg) {
//                        alert(errMsg);
//                    }
//                }).responseText;
//                var splitVars = response.split('$$$$');
//                imagedat = "data:image/png;base64," + splitVars[0];

//                imagewidth = splitVars[2];
//                imageheight = splitVars[1];
//                $('div.current img:first').attr('src', imagedat);
//                $('#form-options-img-width').val(imagewidth);
//                $('#form-options-img-height').val(imageheight);
//                $('div.current img:first').attr('width', imagewidth);
//                $('div.current img:first').attr('height', imageheight);

//                //Save image in db
//                //FileID = $.ajax({
//                //    type: "POST",
//                //    url: "/forms/designerjson/saveImage",
//                //    // The key needs to match your method's input parameter (case-sensitive).
//                //    data: { filename: $(input).val(), filedata: imagedat },
//                //    dataType: "string",
//                //    async: false,
//                //    success: function (data) { },
//                //    failure: function (errMsg) {
//                //        alert(errMsg);
//                //    }
//                //}).responseText;
//                //$('div.current img:first').attr('data-imageid', FileID);
//                //$('#image-options').append("<img data-imageid='" + FileID + "' src='/forms/designer/StageImage/" + FileID + "' width='" + 130 + "' height='" + 130 + "' id='img" + parseInt($('#image-options img').length) + 1 + "'>");
//                $('div.current img:first').attr("data-imgName", $(input).val());
//            }

//            $('div.current img:first').attr('data-source', "Server");
//        }
//        else {
//            $('#form-options-img-width').val('');
//            $('#form-options-img-height').val('');
//            $('div.current img:first').attr('src', "/Images/no_image67x50.gif");
//        }
//    }
//    else {
//        console.log('Error Update');
//    }
//}

function resizeSectionToImage(imageWidth, imageHeight){

    //Resize Section to fit image
    var addHeight = Math.ceil(imageHeight / 40);
    var addWidth = Math.ceil(imageWidth / 40);

    var selectedSection = $('#main-column div.active li.selected');

    if (addHeight > selectedSection.attr('data-sizey')) {
        addHeight = (addHeight - selectedSection.attr('data-sizey')) / 4;
    }
    if (addWidth > selectedSection.attr('data-sizex')) {
        addWidth = addWidth - selectedSection.attr('data-sizex');
    }

    ResizeWidget('#main-column div.active li.selected', addHeight, addWidth);
    forms.designer.fn.svgResize();
}

function NumricOnly(obj) {
    var c = main.cache;

    $(obj).val($(obj).val().replace(/[^0-9]/g, ""));
}
$("#img-reset").live("click", function () {

    $("#objects-settings-panel .add-image-fileinput .btn-file").parent("div").find("a.btn.default").attr("class", "btn default fileinput-exists");
    $("#objects-settings-panel .add-image-fileinput .btn-file span:nth-child(1)").attr("class", "fileinput-new");
    $("#objects-settings-panel .add-image-fileinput .btn-file span:nth-child(2)").attr("class", "fileinput-exists");

    $("#objects-settings-panel a.btn.fileinput-exists").trigger("click");

    var image = new Image();
    image.src = $(".add-image-fileinput .fileinput-preview img:first").attr("src");
    image.onload = function () {
        $('div.current img:first').attr('width', image.width);
        $('div.current img:first').attr('height', image.height);
        $('#form-options-img-height').val(image.height);
        $('#form-options-img-width').val(image.width);
    }
});

$("#lock-ratio").live("click", function () {
    $(this).attr("id", "unlock-ratio");

    $(this).children("i").attr("class", "fa fa-unlock");
});
$("#unlock-ratio").live("click", function () {
    $(this).attr("id", "lock-ratio");
    $(this).children("i").attr("class", "fa fa-lock");
});
$('#form-options-img-width').live("keyup", function () {
    NumricOnly(this);
    if ($('#form-options-img-width').val() != '' && parseInt($('#form-options-img-width').val()) > 0
        && parseInt($('#form-options-img-width').val()) <= 945) {

        if ($('#lock-ratio').length == 1) {
            //lock image ratio
            var image = new Image();

            if ($(".add-image-fileinput .fileinput-preview img:first").length >= 1)
                image.src = $(".add-image-fileinput .fileinput-preview img:first").attr("src");
            else
                image.src = $(".thumbnail img:first").attr("src");
                image.onload = function () {
                    var originalHeight = image.height;
                    var originalWidth = image.width;
                    var targetWidth = $('#form-options-img-width').val();
                    var targetHeight = parseInt(parseInt(originalHeight) * (parseFloat(targetWidth) / parseFloat(originalWidth)));
                    targetHeight = targetHeight > 550 ? 550 : targetHeight;
                    $('#form-options-img-height').val(targetHeight);
                    $('div.current img:first').attr('width', targetWidth);
                    $('div.current img:first').attr('height', targetHeight);

                    resizeSectionToImage(targetWidth, targetHeight);
                }
        }
        else {
            $('div.current img:first').attr('width', $('#form-options-img-width').val());
            $('div.current img:first').attr('height', $('#form-options-img-height').val());
        }
    }
    else {
        if (parseInt($('#form-options-img-width').val()) > 945) {
            $('#form-options-img-width').val($('div.current img:first').attr('width'));
            $('#form-options-img-height').val($('div.current img:first').attr('height'));
        }
    }
});
$('#form-options-height').live("keyup", function () {
    NumricOnly(this);
    if ($('#form-options-height').val() != '' && parseInt($('#form-options-height').val()) > 0) {
        var a = $(this).val();
        var d = main.cache;
        var f = d.find("span");
        var e = f.metadata({
            type: "attr",
            name: "data"
        });
        e.validate.fieldheight = a;
        f.attr("data", $.toJSON(e));
        d.find("textarea").attr("Rows", a).attr("Style", "height:auto !important");

    }
})
$('#form-options-img-height').live("keyup", function () {
    NumricOnly(this);
    if ($('#form-options-img-height').val() != '' && parseInt($('#form-options-img-height').val()) > 0
        && parseInt($('#form-options-img-height').val()) <= 550) {
        if ($('#lock-ratio').length == 1) {
            //lock image ratio
            var image = new Image();
            if ($(".add-image-fileinput .fileinput-preview img:first").length >= 1)
                image.src = $(".add-image-fileinput .fileinput-preview img:first").attr("src");
            else
                image.src = $(".thumbnail img:first").attr("src");
                image.onload = function () {
                    var originalHeight = image.height;
                    var originalWidth = image.width;
                    var targetHeight = $('#form-options-img-height').val();
                    var targetWidth = parseInt(parseInt(originalWidth) * (parseFloat(targetHeight) / parseFloat(originalHeight)));
                    targetWidth = targetWidth > 950 ? 950 : targetWidth;
                    $('#form-options-img-width').val(targetWidth);
                    $('div.current img:first').attr('height', targetHeight);
                    $('div.current img:first').attr('width', targetWidth);

                    resizeSectionToImage(targetWidth, targetHeight);
                }
        }
        else {
            $('div.current img:first').attr('width', $('#form-options-img-width').val());
            $('div.current img:first').attr('height', $('#form-options-img-height').val());
        }
    }
    else {
        if (parseInt($('#form-options-img-height').val()) > 550) {
            $('#form-options-img-width').val($('div.current img:first').attr('width'));
            $('#form-options-img-height').val($('div.current img:first').attr('height'));
        }
    }
});

$("#form-options-name").live("keyup", function () {
    var a = main.cache;
    var b = NameToProper($(this).val());
    a.find("input").attr("id", b).attr("name", b);
    a.find("input,select,textarea,div,h1").attr("id", b).attr("name", b);
    a.find("input:checkbox").attr("id", "").attr("name", b + "[]");
    a.children("label.field").attr("for", b)
});

$("#form-options-gridsize").live("change", function () {
    //alert($("#form-options-gridsize :selected").val());
    $(".grid-container").css("width", $("#form-options-gridsize :selected").val() + "px");
    $(".gridster ul").css("width", $("#form-options-gridsize :selected").val() + "px");

});

$("#form-options-field-size").live("change", function () {
    var a = $(this).val();
    if ($("div.current").find("input").length > 0)
        $("div.current").find("input").attr("class", a);
    if ($("div.current").find("textarea").length > 0)
        $("div.current").find("textarea").attr("class", a);

    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });

    e.validate.fieldsize = a;
    f.attr("data", $.toJSON(e));
});

$("#form-options-taborder").live("keyup", function (a) {
    $(this).val($(this).val().replace(/[^0-9]/g, ""))
    if (isNaN($(this).val())) {
        //$(this).val($(this).val().replace(/[^0-9]/g, ""))
    }
    else {
        var d = main.cache;
        var a = d.find("span");
        var v = $(this).val();
        var e = a.metadata({
            type: "attr",
            name: "data"
        });
        e.validate.tabindex = v;
        a.attr("data", $.toJSON(e));
        //d.children("span:first").find("input:first").attr("tabindex", v);
    }
});
$(document).on('change','#form-options-checkbox', function () {
    var controlContainer = main.cache.children('span');
    var containerData = controlContainer.metadata({
        type: "attr",
        name: "data"
    });

    if ($(this).prop("checked")) {
        containerData.validate.required = 'true';
        containerData.validate.messages.required = "This field is required";
        controlContainer.prev('label:first').addClass('required');

        $("#form-options-check").find("#validateDiv").show();
        $("#form-options-check").find("#form-options-message").show();
    } else {
        containerData.validate.required = 'false';
        controlContainer.prev('label:first').removeClass('required');

        $("#form-options-message").fadeOut(200, function () {
            $("#form-options-check").find("#validateDiv").hide();
        });
    }

    controlContainer.attr("data", $.toJSON(containerData));
});

$("#field-font-size").live("change", function () {
    var a = $(this).val();
    var b = parseInt(a) + 2;
    $("div.current").find("label").css({ "font-size": a + 'px', "line-height": b.toString() + 'px' });
    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });

    e.validate.fontsize = a;
    f.attr("data", $.toJSON(e));

});

//$("#form-options-button-type").live("change", function () {
//    var a = $(this).val();
//    var d = main.cache;
//    var f = d.find("span");
//    var e = f.metadata({
//        type: "attr",
//        name: "data"
//    });

//    //Update the label text only if the user hasn't edited the field
//    /* if ($('#form-options-id').val() == $('#form-options-label').val()) {
//         $(".form-options-label").val($(this).find(":selected").text());
//         $(".form-options-label").trigger("keyup");
//     }*/
//    $(".form-options-label").val($(this).find(":selected").text());
//    $(".form-options-label").trigger("keyup");

//    e.validate.button_type = a;

//    switch (a) {
//        case "gotostage":
//            $("#form-options-button-stage, #form-options-button-submit, #form-options-button-send").parent("div").css("display", "block");
//            e.validate.button_submit = $("#form-options-button-submit").val();
//            e.validate.button_send = $("#form-options-button-send").val();

//            $("#form-options-button-stage")[0].selectedIndex = 0;
//            //$("#form-options-button-stage").prop('selected', true);
//            //$("#form-options-button-stage option[value='0']").prop('selected', true);
//            //$("#form-options-button-stage").val($("#form-options-button-stage option:first").val());
//            break;
//        case "saveandcontinue":
//            $("#form-options-button-stage, #form-options-button-submit, #form-options-button-send").parent("div").css("display", "none");
//            $("<input id=\"form-options-button-submit\" name=\"form-options-button-submit\" value=\"true\" type=\"hidden\"> <input id=\"form-options-button-stage\" name=\"form-options-button-stage\" type=\"hidden\" value=\"0\">").insertBefore($('#' + this.id));
//            e.validate.button_submit = "true"
//            e.validate.button_stage = "0";
//            break;
//        default:
//            e.validate.button_stage = null;
//            $("#form-options-button-stage, #form-options-button-submit, #form-options-button-send").parent("div").css("display", "none");
//    }
//    f.attr("data", $.toJSON(e));
//});

$("#form-options-button-stage").live("change", function () {
    var a = $(this).val();
    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });

    e.validate.button_stage = $("#form-options-button-stage").val();

    f.attr("data", $.toJSON(e));
});

$("#form-options-button-submit").live("change", function () {
    var a = $(this).val();
    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });



    e.validate.button_submit = $("#form-options-button-submit").val();

    f.attr("data", $.toJSON(e));

});

$(document).on("change", "#form-options-button-send", function () {
    var a = $(this).val();
    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });
    e.validate.button_send = $("#form-options-button-send").val();
    f.attr("data", $.toJSON(e));
});

$("#form-options-num-objects").live("change", function () {
    var a = $(this).val();
    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });

    e.validate.num_objects = $("#form-options-num-objects").val();

    f.attr("data", $.toJSON(e));
});

$("#form-options-link-type").live("change", function () {
    var a = $(this).val();
    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });

    e.validate.link_type = a;
    if (a == "gotostage") {
        $("#form-options-link-stage").parent("div").css("display", "block");
        $("#form-options-link-url").parent("div").css("display", "none");
        e.validate.link_url = "";
        e.validate.link_stage = $("#form-options-link-stage").val();
    } else if (a == "url") {
        $("#form-options-link-url").parent("div").css("display", "block");
        $("#form-options-link-stage").parent("div").css("display", "none");
        e.validate.link_stage = "";

        if ($("#form-options-link-url").val().toLowerCase().indexOf("http://") >= 0 || $("#form-options-link-url").val().toLowerCase().indexOf("https://") >= 0) {
            e.validate.link_url = $("#form-options-link-url").val();
        }
        else {
            e.validate.link_url = "http://" + $("#form-options-link-url").val();
        }
    }
    else {
        $("#form-options-link-url").parent("div").css("display", "none");
    }
    f.attr("data", $.toJSON(e));

});
$('#form-options-link-stage').live("change", function () {
    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });
    e.validate.link_stage = $(this).val();
    f.attr("data", $.toJSON(e));
});
$('#form-options-link-target').live("change", function () {
    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });
    e.validate.link_target = $(this).val();
    f.attr("data", $.toJSON(e));
});
$('#form-options-link-url').live("change", function () {
    var d = main.cache;
    var f = d.find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });

    if ($(this).val().toLowerCase().indexOf('http://') >= 0 || $(this).val().toLowerCase().indexOf('https://') >= 0) {
        e.validate.link_url = $(this).val();
    }
    else {
        e.validate.link_url = 'http://' + $(this).val();
    }

    f.attr("data", $.toJSON(e));
});

$("#form-options-message").live("keyup", function () {
    var d = $(this).val();
    var b = main.cache;
    var a = b.find("input,select,textarea");
    if (a.attr("type") == "checkbox" || a.attr("type") == "radio") {
        a = a.parent().parent()
    } else {
        a = a.parent()
    }
    var c = a.metadata({
        type: "attr",
        name: "data"
    });
    if (c.validate !== undefined) {
        c.validate.messages.required = d
    }
    a.attr("data", $.toJSON(c))
});

$("#form-options-conditional-checkbox").live("change", function () {
    var b = $(".row.current");
    var a, c;

    if ($(this).prop("checked")) {
        a = b.find("span:first");
        c = a.metadata({
            type: "attr",
            name: "data"
        });
        c.validate.condition = true;
        c.validate.conditions = 1;
        a.attr("data", $.toJSON(c));
        $("#field_rule_field_0").change();
        PopulateFormFieldNames();

        $(".form-options-conditions").fadeIn(200);
        $(".form-options-conditions").show();
        $("#field_action_type").change();
        $("#field_logic_type").change();

    } else {
        a = b.find("span");
        c = a.metadata({
            type: "attr",
            name: "data"
        });
        c.validate.condition = false;
        c.validate.conditions = 0;
        delete c.validate.condition;
        a.attr("data", $.toJSON(c));
        $(".form-options-conditions").fadeIn(200);
        $(".form-options-conditions").hide();
    }
});

function PopulateFormFieldNames() {

    $(".field_rule_field option").remove();
    $("div.active .gridster-ul div.row").each(function (i, e) {

        if ($(this).find(":text").length > 0 && $("#form-options-id").val() != $(this).find(":text").attr("id")) {
            $(".field_rule_field").append('<option value="' + $(this).find(":text").attr("id") + '">' + $(this).find(":text").attr("id") + '</option>');
            return true;
        }
        if ($(this).find(":radio").length > 0) {
            $(".field_rule_field").append('<option value="' + $(this).find(":radio").attr("name") + '">' + $(this).find(":radio").attr("name") + '</option>');
            return true;
        }
        if ($(this).find("select").length > 0) {
            $(".field_rule_field").append('<option value="' + $(this).find("select").attr("name") + '">' + $(this).find("select").attr("name") + '</option>');
            return true;
        }
        if ($(this).find(":checkbox").length > 0) {
            var name = $(this).find(":checkbox:first").parents("span").attr("id");

            $(".field_rule_field").append('<option value="' + name + '">' + name + '</option>');
            return true;
        }
    });

    var b = main.cache;
    var a = b.find("span:first");

    if (a.data("action") != undefined) {
        $("#field_action_type").val(a.data("action").toLowerCase());
    }

    if (a.data("logic") != undefined) {
        $("#field_logic_type").val(a.data("logic").toLowerCase());
    }

    $("div.condition").each(function (i, e) {

        var fieldName = "field-" + i;
        if (a.data(fieldName) != undefined) {
            $('#field_rule_field_' + i).val(a.data(fieldName).field);
            $('#field_rule_field_' + i).change();

            if (a.data(fieldName).operator != undefined && isNaN(a.data(fieldName).operator)) {
                $('#field_rule_operator_' + i).val(a.data(fieldName).operator);
            }

            $('#field_rule_operator_' + i).change();

            var isInput = $("div.row").find("input[name=" + a.data(fieldName).field + "]").attr("type");
            if (isInput == "text") {
                $('input#field_rule_option_' + i).val(a.data(fieldName).option);
            }
            else {
                $('select#field_rule_option_' + i).val(a.data(fieldName).option);
            }

        }
    });
}

function GetRuleValues(index, value) {
    var isInput = $("div.row").find("input[name=" + value + "]").attr("type");

    if (isInput == "text") {
        $("select#field_rule_option_" + index).hide();
        $("input#field_rule_option_" + index).show('');
    } else {
        $("input#field_rule_option_" + index).hide();
        $("select#field_rule_option_" + index).show();
        var isSelect = $("div.row").find('select[name="' + value + '"]').is("select");
        var isCheckbox = $("div.row").find('input:checkbox[name*="' + value + '"]').attr("type");
        var isRadio = $("div.row").find('input:radio[name="' + value + '"]').attr("type");

        if (isSelect) {
            $("select#field_rule_option_" + index + " option").remove();
            $("select#field_rule_option_" + index).append($("div.row").find("select[name=" + value + "]").html());
        }
        if (isCheckbox == "checkbox") {
            $("select#field_rule_option_" + index + " option").remove();
            $("div.row").find('input:checkbox[name*="' + value + '"]').each(function (i, element) {

                $("select#field_rule_option_" + index).append('<option value="' + $(element).attr("value") + '">' + $(element).attr("value") + '</option>');
            });
        }
        if (isRadio == "radio") {
            $("select#field_rule_option_" + index + " option").remove();
            $("div.row").find("input:radio[name=" + value + "]").each(function (i, element) {

                $("select#field_rule_option_" + index).append('<option value="' + $(element).attr("value") + '">' + $(element).attr("value") + '</option>');
            });
        }
    }
    SetRuleProperty(index, "field", value);
}

function SetRuleProperty(index, name, value) {
    var d = main.cache;
    var a = d.find("span");
    var e = 'field-' + index;
    //alert(value)
    if ($(a).data(e) == null) {
        $(a).data(e, { id: 'field_rule_' + name + '_' + index, operator: 1, option: 1, field: 1 });
    }

    // var f = $(a).data(e);

    switch (name) {
        case "field":
            $(a).data(e).field = value;
            break;
        case "operator":
            $(a).data(e).operator = value;
            break;
        case "option":
            $(a).data(e).option = value;
            break;
    }
}

$("#field_action_type").live("change", function (e) {
    var d = main.cache;
    var a = d.find("span");


    a.data("action", $("#field_action_type :selected").text());
});

$("#field_logic_type").live("change", function (e) {
    var d = main.cache;
    var a = d.find("span");

    a.data("logic", $("#field_logic_type :selected").text());
});

$(".condition a").live("click", function (e) {

    var d = main.cache;
    var a = d.find("span");
    var f = a.metadata({
        type: "attr",
        name: "data"
    });
    $(this).attr("class").indexOf(' plus')
    if ($(this).attr("class").indexOf(' plus') > -1) {
        var c = $("div.condition").length;
        f.validate.conditions = c + 1;
        a.attr("data", $.toJSON(f));
        var d = '<div class="condition"><select id="field_rule_field_' + c + '" style="width:100px;" class="field_rule_field" onload="jQuery(this).trigger(\'change\');" onchange="GetRuleValues(' + c + ',jQuery(this).val());">' + $("#field_rule_field").html() + '</select> ';
        d += '<select id="field_rule_operator_' + c + '"  style="width:110px;" onchange="SetRuleProperty(' + c + ',\'operator\',jQuery(this).val());"><option value="is" selected="selected">is</option><option value="isnot">is not</option><option value="&gt;">greater than</option><option value="&lt;">less than</option><option value="contains">contains</option><option value="starts_with">starts with</option><option value="ends_with">ends with</option></select> ';
        d += '<select style="width:120px;" id="field_rule_option_' + c + '" display="none" onchange="SetRuleProperty(' + c + ',\'option\',jQuery(this).val());"></select><input id="field_rule_option_' + c + '" class="field_rule_value" value="1" placeholder="Enter a value" style="display:none;height:25px;width:105px;" onkeyup="SetRuleProperty(' + c + ',\'option\',jQuery(this).val());"/>';
        d += '<a class="btn mini plus" id="plus_' + c + '" href=# style="vertical-align:top;"><i class="icon-plus" style="font-size:18px"></i></a> <a class="btn mini minus" id="minus_' + c + '" href=# style="vertical-align:top;"><i class="icon-close" style="font-size:18px"></i></a></div>'
        $(".form-options-conditions").append(d);
        PopulateFormFieldNames();
        $('#field_rule_field_' + c).change();
        //$('#field_rule_operator_' + c).val("");
    }

    if ($(this).attr("class").indexOf(' minus') > -1) {
        //remove all data 
        for (var p = 0; p < f.validate.conditions; p++) {
            var e = 'field' + p;
            (a).removeData(e);
        }
        var c = $("div.condition").length;
        f.validate.conditions = c - 1;
        a.attr("data", $.toJSON(f));
        $(this).closest(".condition").remove();
        var d = main.cache;
        var a = d.find("span");
        var a_index = $(this).attr("id").split("_");
        //var e = 'field' + a_index[1];
        //(a).removeData(e);

        //rename fields & add all data
        $("div.condition").each(function (index, element) {
            $(element).find("*[id*='field_rule_field_']").attr("id", "field_rule_field_" + index)
            $(element).find("*[id*='field_rule_field_']").attr("onchange", "GetRuleValues(" + index + ", jQuery(this).val())");
            $("#field_rule_field_" + index).change();

            $(element).find("*[id*='field_rule_operator_']").attr("id", "field_rule_operator_" + index)
            $(element).find("*[id*='field_rule_operator_']").attr("onchange", "SetRuleProperty(" + index + ",'operator',jQuery(this).val())");
            $("#field_rule_operator_" + index).change();

            $(element).find("select[id*='field_rule_option_']").attr("id", "field_rule_option_" + index)
            $(element).find("select[id*='field_rule_option_']").attr("onchange", "SetRuleProperty(" + index + ",'option',jQuery(this).val());");

            $(element).find("input[id*='field_rule_option_']").attr("id", "field_rule_option_" + index)
            $(element).find("input[id*='field_rule_option_']").attr("onkeyup", "SetRuleProperty(" + index + ",'option',jQuery(this).val())");
            $("input#field_rule_option_" + index).keyup();
        });
    }


});

$(document).on("click","#form-options-showlabel", function () {
    var controlContainer = main.cache.children('span');
    var containerData = controlContainer.metadata({
        type: "attr",
        name: "data"
    });

    if ($(this).prop("checked")) {
        main.cache.find("label:first").hide();
        containerData.validate.show_label = 'false';
        controlContainer.attr("data", $.toJSON(containerData));
    } else {
        main.cache.find("label:first").show();
        containerData.validate.show_label = 'true';
        controlContainer.attr("data", $.toJSON(containerData));
    }
});

$("#form-options-pattern-checkbox").live("change", function () {
    var b = main.cache;
    var a, c;
    if ($(this).prop("checked")) {
        a = b.find("span");
        c = a.metadata({
            type: "attr",
            name: "data"
        });
        c.validate.pattern = c.validate.pattern ? c.validate.pattern : "[A-Z]";
        c.validate.messages.pattern = c.validate.messages.pattern ? c.validate.messages.pattern : "Invalid format.";
        a.attr("data", $.toJSON(c));
        $(this).parent().find(".form-options-pattern-more-options").fadeIn(200);
        $(this).parent().next(".form-options-range").fadeOut(200)
    } else {
        a = b.find("span");
        c = a.metadata({
            type: "attr",
            name: "data"
        });
        delete c.validate.pattern;
        delete c.validate.messages.pattern;
        a.attr("data", $.toJSON(c));
        $(this).parent().find(".form-options-pattern-more-options").fadeOut(200);
        $(this).parent().next(".form-options-range").fadeIn(200)
    }
});

$("#form-options-pattern-message").live("keyup", function () {
    var d = $(this).val();
    var b = main.cache;
    var a = b.find("input,select,textarea").parent();
    var c = a.metadata({
        type: "attr",
        name: "data"
    });
    if (c.validate !== undefined) {
        c.validate.messages.pattern = d
    }
    a.attr("data", $.toJSON(c))
});
$("#form-options-pattern-pattern").live("keyup", function () {
    var b = $(this).val();
    var c = main.cache;
    var a = c.find("input,select,textarea").parent();
    var d = a.metadata({
        type: "attr",
        name: "data"
    });
    if (d.validate !== undefined) {
        d.validate.pattern = b
    }
    a.attr("data", $.toJSON(d))
});

function preventSpecialKeys(event, value) {
    // Backspace, tab, enter, end, home, left, right
    // We don't support the del key in Opera because del == . == 46.
    var controlKeys = [8, 9, 13, 35, 36, 37, 39];

    // IE doesn't support indexOf
    var isControlKey = controlKeys.join(",").match(new RegExp(event.which));
    // Some browsers just don't raise events for control keys. Easy.
    // e.g. Safari backspace.
    if (!event.which || // Control keys in most browsers. e.g. Firefox tab is 0
        (event.which != 188 && event.which != 172 && event.which != 220 && event.which != 17) || // Do not allow ,|ctrl keys
        isControlKey) { // Opera assigns values for control keys.
        return;
    }
    else {
        event.preventDefault();
    }
}

$(".form-options-more").live("keydown change input", function (event) {
    stripSpecChars(this, /[\|\,]/gi);
    preventSpecialKeys(event, $(this).val());
});


$(".form-options-more").live("keyup", function () {
    //Hide values section
    //$("#form-options-values-check").attr("checked", false);
    //$("#form-options-values-check").trigger("change");
    stripSpecChars(this, /[\|\,]/gi);

    main.reloadElementOptions();
    $('div.current[data-error]').css('border', '3px dotted #9A9DA1 !important');
    $("div.current").removeAttr('data-error');

    if ($.trim($(this).val()) != "") {
        if (duplicateOptionName(this) != "allow") {
            $("#option-taken").remove();
            $(this).nextAll().slice(2, 3).after("<span id='option-taken' style='color:#ff0000'> Duplicate names are not allowed.</span>");

            $("div.current").attr('data-error', 'empty');
            $('div.current[data-error]').css('border', '3px dotted #FF0000');
        }
    }
    else {
        $("#option-taken").remove();
        $(this).nextAll().slice(2, 3).after("<span id='option-taken' style='color:#ff0000'> Please enter an option name.</span>");

        /* Display Error Message in Stage Header */
        clearErrorMsgs();
        $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="duplicate-option" role="alert" style="">' +
            '<span class="message"><strong>Error!</strong> Please enter an option name. Checkbox and Radio Button option names cannot be empty.</span></div>');
        setTimeout('$("#duplicate-option").remove()', 8000);

        $("div.current").attr('data-error', 'empty');
        $('div.current[data-error]').css('border', '3px dotted #FF0000');
    }
});

$(".condition input").live("keyup", function () {
    main.reloadElementOptions();
    $('div.current[data-error]').css('border', '3px dotted #9A9DA1 !important');
    $("div.current").removeAttr('data-error');
    //console.log($(this).attr('id'));

    if ($.trim($(this).val()) == "" && $(this).is(":visible")) {
        $(".emptyerror").remove();
        $("<span class='error emptyerror' style='white-space: nowrap;'><br/>Please enter a value for this condition.<br /></span>").insertAfter($(this));
        //$(this).nextAll().slice(2, 3).after("<span id='condition-taken' style='color:#ff0000'> Required Field.</span>");

        /* Display Error Message in Page Header */
        clearErrorMsgs();
        $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="duplicate-option" role="alert" style="">' +
            '<span class="message"><strong>Error!</strong> Please enter a value for the condition.</span></div>');
        setTimeout('$("#duplicate-option").remove()', 8000);

        $("div.current").attr('data-error', 'empty');
        $('div.current[data-error]').css('border', '3px dotted #FF0000');
    }
    else {
        clearErrorMsgs();
        $(".emptyerror").remove();
    }
});

function updateMinMax(g, f, c) {
    var d = main.cache;
    var a = d.find("span");
    var e = a.metadata({
        type: "attr",
        name: "data"
    });
    var b = a.find("input");
    e.validate.format = f;
    if (f == "characters" && c == "min") {
        g.length <= 0 ? delete e.validate.min : e.validate.min = g;

    } else {
        if (f == "characters" && c == "max") {
            g.length <= 0 ? delete e.validate.max : e.validate.max = g;

        } else {
            if (f == "words" && c == "min") {
                g.length <= 0 ? delete e.validate.min : e.validate.min = g;

            } else {
                if (f == "words" && c == "max") {
                    g.length <= 0 ? delete e.validate.max : e.validate.max = g;

                } else {
                    if (f == undefined && c == "min" && b != undefined && b.attr("type") == "checkbox") {
                        g.length <= 0 ? delete e.validate.min : e.validate.min = g;
                        e.validate.messages.min = ("Please select at least {num} options").replace(/{num}/, g)
                    } else {
                        if (f == undefined && c == "max" && b != undefined && b.attr("type") == "checkbox") {
                            g.length <= 0 ? delete e.validate.max : e.validate.max = g;
                            e.validate.messages.max = ("Please select a maximum of {num} options").replace(/{num}/, g)
                        }
                    }
                }
            }
        }
    }
    a.attr("data", $.toJSON(e))
}
function adjustContainerHeight() {
    var b = $("#dynamicform").height() + 75;
    var a = $("#left-column").height() + parseInt($("#left-column").css("top").replace("px", "")) - 50;
    // $("#left-column .tabbable ").css("margin-top", parseInt($("#main-column").height() - 300));
    if (b > a) {
        $("#main-column").css("height", (b) + "px")
    } else {
        $("#main-column").css("height", (a) + "px")
    }
}
$("#form-options-range-min").live("keyup", function () {
    $("#invalid-min-max").remove();
    $("#error-min-max").remove();
    removeNotifyError();

    NumricOnly(this);

    var c = main.cache;
    var b = $(this).val();
    var a = c.find("span");
    var d = a.metadata({
        type: "attr",
        name: "data"
    });

    //var rangeFormat = $("#form-options-range-format").val();
    //var rangeMax = $("#form-options-range-max").val();
    //updateMinMax($(this).val(), rangeFormat, "min");
    //if (validate_min_max($(this).val(), rangeMax) != "allow") {
    if (validate_min_max(b, $("#form-options-range-max").val()) != "allow") {
        $("#invalid-min-max").remove();
        $(this).after("<span id='invalid-min-max' style='color:#ff0000'> Invalid value.</span>");
    }
    else {
        if (b.length <= 0) {
            delete d.validate.minlength
        } else {
            d.validate.minlength = b
        }
        a.attr("data", $.toJSON(d));
    }
});

$("#form-options-range-max").live("keyup", function () {
    $("#invalid-min-max").remove();
    $("#error-min-max").remove();
    removeNotifyError();

    NumricOnly(this);

    var c = main.cache;
    var b = $(this).val();
    var a = c.find("span");
    var d = a.metadata({
        type: "attr",
        name: "data"
    });
    

    //var b = $("#form-options-range-format").val();
    //updateMinMax(a, b, "max");
    if (validate_min_max($("#form-options-range-min").val(), b) != "allow") {
        $("#invalid-min-max").remove();
        $(this).after("<span id='invalid-min-max' style='color:#ff0000'> Invalid value.</span>");
        //setTimeout('$("#option-taken").remove()', 4000);
    }
    else {
        if (b.length <= 0) {
            delete d.validate.maxlength
        } else {
            d.validate.maxlength = b
        }
        a.attr("data", $.toJSON(d));
    }
});
$("#form-options-range-minnum").live("keyup", function () {
    $("#invalid-min-max").remove();
    $("#error-min-max").remove();
    removeNotifyError();

    var c = main.cache;
    $(this).val($(this).val().replace(/[^0-9]/g, ""));

    var b = $(this).val();
    var a = c.find("span");
    var d = a.metadata({
        type: "attr",
        name: "data"
    });
    if (b.length <= 0) {
        delete d.validate.min
    } else {
        d.validate.min = b
    }
    a.attr("data", $.toJSON(d));

    if (validate_min_max($(this).val(), $("#form-options-range-maxnum").val()) != "allow") {
        $("#invalid-min-max-num").remove();
        $(this).after("<span id='invalid-min-max-num' style='color:#ff0000'> Invalid value.</span>");
    }
});
$("#form-options-range-maxnum").live("keyup", function () {
    $("#invalid-min-max-num").remove();
    $("#error-min-max").remove();
    removeNotifyError();

    var c = main.cache;
    $(this).val($(this).val().replace(/[^0-9]/g, ""));

    var b = $(this).val();
    var a = c.find("span");
    var d = a.metadata({
        type: "attr",
        name: "data"
    });
    if (b.length <= 0) {
        delete d.validate.max
    } else {
        d.validate.max = b
    }
    a.attr("data", $.toJSON(d));

    if (validate_min_max($("#form-options-range-minnum").val(), $(this).val()) != "allow") {
        $("#invalid-min-max-num").remove();
        $(this).after("<span id='invalid-min-max-num' style='color:#ff0000'> Invalid value.</span>");
    }
});
$("#form-options-range-format").live("change", function () {
    var c = $(this).val();
    var b = $("#form-options-range-min").val();
    var a = $("#form-options-range-max").val();
    if (b.length > 0) {
        updateMinMax(b, c, "min")
    }
    if (a.length > 0) {
        updateMinMax(a, c, "max")
    }
});
$("#form-options-filetypes").live("keyup", function () {
    var b = main.cache;
    var d = $(this).val();
    var a = b.find("span");
    var c = a.metadata({
        type: "attr",
        name: "data"
    });
    if (d.length <= 0) {
        delete c.validate.accept
    } else {
        c.validate.accept = d
    }
    c.validate.messages.accept = "Please only upload image filetypes.";
    c.validate.messages.accept += d.split("|") + ".";
    a.attr("data", $.toJSON(c))
});
$("#form-options-filesize").live("keyup", function () {
    var b = main.cache;
    var d = $(this).val();
    var a = b.find("span");
    var c = a.metadata({
        type: "attr",
        name: "data"
    });
    if (d.length <= 0) {
        c.validate.filesize = Math.round(1024 * 1024)
    } else {
        c.validate.filesize = Math.round(d * 1024 * 1024)
    }
    c.validate.messages.filesize = "Filesize should not exceed ";
    c.validate.messages.filesize += d + " MB.";
    a.attr("data", $.toJSON(c))
});

$("#dialog-box").on("click", "div.row", function (a) {
    return false
});
$("#main-column").on("click", "a.delete-element", function (a) {
    a.preventDefault();
    a.stopImmediatePropagation();
    $("#back-to-objects a").trigger("click");
    $(this).parent().remove();
    $(".order_" + $(this).parent().find("textarea,input,select").attr("name")).remove();

    ResizeWidget("#main-column div.active li.selected");
    return false
});
//function loadImageFromLibrary(imagesrc) {
//    if (forms.designer.fn.validateUploadSize($('.add-image-fileinput .fileinput'))) {
//        var image = new Image();
//        image.src = imagesrc.attr("src");

//        image.onload = function () {

//            $('#form-options-img-width').val(image.width);
//            $('#form-options-img-height').val(image.height);
//            $(".form-options-image").attr('src', imagesrc.attr("src"));

//            //Assign classes to proper buttons
//            $("#objects-settings-panel .add-image-fileinput .btn-file").parent("div").find("a.btn.default").attr("class", "btn default fileinput-exists");
//            $("#objects-settings-panel .add-image-fileinput .btn-file span:nth-child(1)").attr("class", "fileinput-new");
//            $("#objects-settings-panel .add-image-fileinput .btn-file span:nth-child(2)").attr("class", "fileinput-exists");

//            if ($('#objects-settings-panel .fileinput-exists.thumbnail img').attr('src') != undefined) {
//                $('#objects-settings-panel .fileinput-exists.thumbnail img').attr('src', imagesrc.attr("src"));
//            }
//            else {
//                $('#objects-settings-panel .fileinput-new.thumbnail img').attr('src', imagesrc.attr("src"));
//            }
//            $("#objects-settings-panel .add-image-fileinput .btn-file .fileinput-new").hide();
//            $("#objects-settings-panel .add-image-fileinput .btn-file").parent("div").find(".fileinput-exists").show();

//            $('div.current img:first').attr('src', imagesrc.attr("src"));
//            $('div.current img:first').attr('data-source', "Server");
//            $('div.current img:first').attr('data-imageid', imagesrc.attr("data-imageid"));


//            //Resize image if larger than min form width (945px)
//            var addHeight;
//            var addWidth;

//            if (image.width <= 945) {
//                $('div.current img:first').attr('width', image.width);
//                addWidth = image.width;
//            }
//            else {
//                $('div.current img:first').attr('width', 945);
//                addWidth = 945;
//            }
//            $('div.current img:first').attr('height', image.height);

//            //Resize Section to fit image
//            var selectedSection = ('#main-column div.active li.selected');
//            addHeight = Math.round(image.height / 40);
//            addWidth = Math.round(addWidth / 40);

//            if (addHeight > selectedSection.attr('data-sizey')) {
//                addHeight = addHeight - selectedSection.attr('data-sizey');
//            }
//            if (addWidth > selectedSection.attr('data-sizex')) {
//                addWidth = addWidth - selectedSection.attr('data-sizex');
//            }

//            ResizeWidget('#main-column div.active li.selected', addHeight, addWidth);
//            forms.designer.fn.svgResize();
//        };

//        image.onerror = function () {
//            console.log("Error occurred while loading image");
//            //alert("Error occurred while loading image");
//        };
//    }
//    else {
//        console.log('error false');
//    }
////}
////    catch (err) {
////        console.log(err);
////    }

//}

$("#objects-settings-panel").on("click", "a.chooselibrary", function (a) {
    $('#image-options').show();
    $('#element-options').hide();
});

$("#objects-settings-panel").on("click", "img", function (a) {
    loadImageFromLibrary($(this));
    $('#image-options').show();
    $('#element-options').hide();
    $("#back-to-objects-img a").trigger("click");
});

$("#objects-settings-panel").on("click", "a.addimage", function (a) {
    a.preventDefault();
    $('#element-options').show();
    $('#image-options').hide();
    //$('#stack2').modal('toggle');
});

var ObjectSettingsClick = function (event) {
    if ($(".app-toolbar").hasClass("toggle-off")) {
        $(".object-toggler .fa-bars").trigger("click");
    }
    var divRow = $("#main-column div.active div.current");
    if ($(divRow).find(".settings-element").is("img"))
        divRow = $(this).parents("div.row:first");

    if ($(divRow).find("span:first").attr("class") == "addImage" && $(divRow).find("span:first img").attr("src").indexOf("Images", 0) != -1) {

        main.showOptions($(divRow));
        $("")
        $('#form-elements').hide();
        $('#element-options').show();
        if ($("#obj-settings .fa-angle-left").length > 0) {
            $("#obj-settings.toolbar-section-toggle").click();
        }
        $(".app-toolbar ul").scrollTop($("#obj-settings").position().top); //Moves the scrollbar to this element.
    }
    else {
        main.showOptions($(divRow));

        $('#form-elements').hide();
        $('#element-options').show();
        if ($("#obj-settings .fa-angle-left").length > 0) {
            $("#obj-settings.toolbar-section-toggle").click();
        }
        $(".app-toolbar ul").scrollTop($("#obj-settings").position().top); //Moves the scrollbar to this element.
    }
    var c = main.cache;
};

$("#main-column").on("click", "a.settings-element, .settings-element img", ObjectSettingsClick);

$("#main-column").on("click", "a.moveup-element", function (a) {
    $(this).parent("div.row").insertBefore($(this).parent("div.row").prev());

});

$("#main-column").on("click", "a.movedown-element", function (a) {
    $(this).parent("div.row").insertAfter($(this).parent("div.row").next());

});

$("#main-column").on("click", ".gs-w div.row label:first", function (a) {


    main.showOptions($(this).parents("div.row"));

    $('#stack2').modal({ show: true, keyboard: false, backdrop: 'static' });

    main.reloadElementOptions();

});


$('#stack2').on('hidden.bs.modal', function (e) {
    ResizeWidget("#main-column div.active li.selected");
});
$('#stack2').on('hide.bs.modal', function () {

    $('div.current select').selectmenu({
        style: 'dropdown',
        format: addressFormatting
    });
})
$('#stack2').on('shown.bs.modal', function (e) {
    var c = main.cache;
    $('div.current select').selectmenu({
        style: 'dropdown',
        format: addressFormatting
    });
    if ($("#stack2 #form-options-label").length > 0) {

        if ($('textarea#form-options-label').length > 0) {

            $('#stack2 .modal-footer button').prop('disabled', false);
            $('#stack2 button.close').prop('disabled', false);
        }
        else { }
    }



});


//Input Validation
$("input").live("keypress", function (a) {
    if (/<[^\w<>]*(?:[^<>"'\s]*:)?[^\w<>]*(?:\W*s\W*c\W*r\W*i\W*p\W*t|\W*f\W*o\W*r\W*m|\W*s\W*t\W*y\W*l\W*e|\W*s\W*v\W*g|\W*m\W*a\W*r\W*q\W*u\W*e\W*e|(?:\W*l\W*i\W*n\W*k|\W*o\W*b\W*j\W*e\W*c\W*t|\W*e\W*m\W*b\W*e\W*d|\W*a\W*p\W*p\W*l\W*e\W*t|\W*p\W*a\W*r\W*a\W*m|\W*i?\W*f\W*r\W*a\W*m\W*e|\W*b\W*a\W*s\W*e|\W*b\W*o\W*d\W*y|\W*m\W*e\W*t\W*a|\W*i\W*m\W*a?\W*g\W*e?|\W*v\W*i\W*d\W*e\W*o|\W*a\W*u\W*d\W*i\W*o|\W*b\W*i\W*n\W*d\W*i\W*n\W*g\W*s|\W*s\W*e\W*t|\W*i\W*s\W*i\W*n\W*d\W*e\W*x|\W*a\W*n\W*i\W*m\W*a\W*t\W*e)[^>\w])|(?:<\w[\s\S]*[\s\0\/]|['"])(?:formaction|style|background|src|lowsrc|ping|on(?:d(?:e(?:vice(?:(?:orienta|mo)tion|proximity|found|light)|livery(?:success|error)|activate)|r(?:ag(?:e(?:n(?:ter|d)|xit)|(?:gestur|leav)e|start|drop|over)?|op)|i(?:s(?:c(?:hargingtimechange|onnect(?:ing|ed))|abled)|aling)|ata(?:setc(?:omplete|hanged)|(?:availabl|chang)e|error)|urationchange|ownloading|blclick)|Moz(?:M(?:agnifyGesture(?:Update|Start)?|ouse(?:PixelScroll|Hittest))|S(?:wipeGesture(?:Update|Start|End)?|crolledAreaChanged)|(?:(?:Press)?TapGestur|BeforeResiz)e|EdgeUI(?:C(?:omplet|ancel)|Start)ed|RotateGesture(?:Update|Start)?|A(?:udioAvailable|fterPaint))|c(?:o(?:m(?:p(?:osition(?:update|start|end)|lete)|mand(?:update)?)|n(?:t(?:rolselect|extmenu)|nect(?:ing|ed))|py)|a(?:(?:llschang|ch)ed|nplay(?:through)?|rdstatechange)|h(?:(?:arging(?:time)?ch)?ange|ecking)|(?:fstate|ell)change|u(?:echange|t)|l(?:ick|ose))|m(?:o(?:z(?:pointerlock(?:change|error)|(?:orientation|time)change|fullscreen(?:change|error)|network(?:down|up)load)|use(?:(?:lea|mo)ve|o(?:ver|ut)|enter|wheel|down|up)|ve(?:start|end)?)|essage|ark)|s(?:t(?:a(?:t(?:uschanged|echange)|lled|rt)|k(?:sessione|comma)nd|op)|e(?:ek(?:complete|ing|ed)|(?:lec(?:tstar)?)?t|n(?:ding|t))|u(?:ccess|spend|bmit)|peech(?:start|end)|ound(?:start|end)|croll|how)|b(?:e(?:for(?:e(?:(?:scriptexecu|activa)te|u(?:nload|pdate)|p(?:aste|rint)|c(?:opy|ut)|editfocus)|deactivate)|gin(?:Event)?)|oun(?:dary|ce)|l(?:ocked|ur)|roadcast|usy)|a(?:n(?:imation(?:iteration|start|end)|tennastatechange)|fter(?:(?:scriptexecu|upda)te|print)|udio(?:process|start|end)|d(?:apteradded|dtrack)|ctivate|lerting|bort)|DOM(?:Node(?:Inserted(?:IntoDocument)?|Removed(?:FromDocument)?)|(?:CharacterData|Subtree)Modified|A(?:ttrModified|ctivate)|Focus(?:Out|In)|MouseScroll)|r(?:e(?:s(?:u(?:m(?:ing|e)|lt)|ize|et)|adystatechange|pea(?:tEven)?t|movetrack|trieving|ceived)|ow(?:s(?:inserted|delete)|e(?:nter|xit))|atechange)|p(?:op(?:up(?:hid(?:den|ing)|show(?:ing|n))|state)|a(?:ge(?:hide|show)|(?:st|us)e|int)|ro(?:pertychange|gress)|lay(?:ing)?)|t(?:ouch(?:(?:lea|mo)ve|en(?:ter|d)|cancel|start)|ime(?:update|out)|ransitionend|ext)|u(?:s(?:erproximity|sdreceived)|p(?:gradeneeded|dateready)|n(?:derflow|load))|f(?:o(?:rm(?:change|input)|cus(?:out|in)?)|i(?:lterchange|nish)|ailed)|l(?:o(?:ad(?:e(?:d(?:meta)?data|nd)|start)?|secapture)|evelchange|y)|g(?:amepad(?:(?:dis)?connected|button(?:down|up)|axismove)|et)|e(?:n(?:d(?:Event|ed)?|abled|ter)|rror(?:update)?|mptied|xit)|i(?:cc(?:cardlockerror|infochange)|n(?:coming|valid|put))|o(?:(?:(?:ff|n)lin|bsolet)e|verflow(?:changed)?|pen)|SVG(?:(?:Unl|L)oad|Resize|Scroll|Abort|Error|Zoom)|h(?:e(?:adphoneschange|l[dp])|ashchange|olding)|v(?:o(?:lum|ic)e|ersion)change|w(?:a(?:it|rn)ing|heel)|key(?:press|down|up)|(?:AppComman|Loa)d|no(?:update|match)|Request|zoom))[\s\0]*=/.test($(this).val())) {
        event.preventDefault();
        return false;
    }
});

//$("input[type=text]").live("keypress", function (a) {
//$('input').on('keypress', function (event) {
//    var regex = new RegExp("<[^\w<>]*(?:[^<>"'\s]*:)?[^\w<>]*(?:\W*s\W*c\W*r\W*i\W*p\W*t|\W*f\W*o\W*r\W*m|\W*s\W*t\W*y\W*l\W*e|\W*s\W*v\W*g|\W*m\W*a\W*r\W*q\W*u\W*e\W*e|(?:\W*l\W*i\W*n\W*k|\W*o\W*b\W*j\W*e\W*c\W*t|\W*e\W*m\W*b\W*e\W*d|\W*a\W*p\W*p\W*l\W*e\W*t|\W*p\W*a\W*r\W*a\W*m|\W*i?\W*f\W*r\W*a\W*m\W*e|\W*b\W*a\W*s\W*e|\W*b\W*o\W*d\W*y|\W*m\W*e\W*t\W*a|\W*i\W*m\W*a?\W*g\W*e?|\W*v\W*i\W*d\W*e\W*o|\W*a\W*u\W*d\W*i\W*o|\W*b\W*i\W*n\W*d\W*i\W*n\W*g\W*s|\W*s\W*e\W*t|\W*i\W*s\W*i\W*n\W*d\W*e\W*x|\W*a\W*n\W*i\W*m\W*a\W*t\W*e)[^>\w])|(?:<\w[\s\S]*[\s\0\/]|['"])(?:formaction|style|background|src|lowsrc|ping|on(?:d(?:e(?:vice(?:(?:orienta|mo)tion|proximity|found|light)|livery(?:success|error)|activate)|r(?:ag(?:e(?:n(?:ter|d)|xit)|(?:gestur|leav)e|start|drop|over)?|op)|i(?:s(?:c(?:hargingtimechange|onnect(?:ing|ed))|abled)|aling)|ata(?:setc(?:omplete|hanged)|(?:availabl|chang)e|error)|urationchange|ownloading|blclick)|Moz(?:M(?:agnifyGesture(?:Update|Start)?|ouse(?:PixelScroll|Hittest))|S(?:wipeGesture(?:Update|Start|End)?|crolledAreaChanged)|(?:(?:Press)?TapGestur|BeforeResiz)e|EdgeUI(?:C(?:omplet|ancel)|Start)ed|RotateGesture(?:Update|Start)?|A(?:udioAvailable|fterPaint))|c(?:o(?:m(?:p(?:osition(?:update|start|end)|lete)|mand(?:update)?)|n(?:t(?:rolselect|extmenu)|nect(?:ing|ed))|py)|a(?:(?:llschang|ch)ed|nplay(?:through)?|rdstatechange)|h(?:(?:arging(?:time)?ch)?ange|ecking)|(?:fstate|ell)change|u(?:echange|t)|l(?:ick|ose))|m(?:o(?:z(?:pointerlock(?:change|error)|(?:orientation|time)change|fullscreen(?:change|error)|network(?:down|up)load)|use(?:(?:lea|mo)ve|o(?:ver|ut)|enter|wheel|down|up)|ve(?:start|end)?)|essage|ark)|s(?:t(?:a(?:t(?:uschanged|echange)|lled|rt)|k(?:sessione|comma)nd|op)|e(?:ek(?:complete|ing|ed)|(?:lec(?:tstar)?)?t|n(?:ding|t))|u(?:ccess|spend|bmit)|peech(?:start|end)|ound(?:start|end)|croll|how)|b(?:e(?:for(?:e(?:(?:scriptexecu|activa)te|u(?:nload|pdate)|p(?:aste|rint)|c(?:opy|ut)|editfocus)|deactivate)|gin(?:Event)?)|oun(?:dary|ce)|l(?:ocked|ur)|roadcast|usy)|a(?:n(?:imation(?:iteration|start|end)|tennastatechange)|fter(?:(?:scriptexecu|upda)te|print)|udio(?:process|start|end)|d(?:apteradded|dtrack)|ctivate|lerting|bort)|DOM(?:Node(?:Inserted(?:IntoDocument)?|Removed(?:FromDocument)?)|(?:CharacterData|Subtree)Modified|A(?:ttrModified|ctivate)|Focus(?:Out|In)|MouseScroll)|r(?:e(?:s(?:u(?:m(?:ing|e)|lt)|ize|et)|adystatechange|pea(?:tEven)?t|movetrack|trieving|ceived)|ow(?:s(?:inserted|delete)|e(?:nter|xit))|atechange)|p(?:op(?:up(?:hid(?:den|ing)|show(?:ing|n))|state)|a(?:ge(?:hide|show)|(?:st|us)e|int)|ro(?:pertychange|gress)|lay(?:ing)?)|t(?:ouch(?:(?:lea|mo)ve|en(?:ter|d)|cancel|start)|ime(?:update|out)|ransitionend|ext)|u(?:s(?:erproximity|sdreceived)|p(?:gradeneeded|dateready)|n(?:derflow|load))|f(?:o(?:rm(?:change|input)|cus(?:out|in)?)|i(?:lterchange|nish)|ailed)|l(?:o(?:ad(?:e(?:d(?:meta)?data|nd)|start)?|secapture)|evelchange|y)|g(?:amepad(?:(?:dis)?connected|button(?:down|up)|axismove)|et)|e(?:n(?:d(?:Event|ed)?|abled|ter)|rror(?:update)?|mptied|xit)|i(?:cc(?:cardlockerror|infochange)|n(?:coming|valid|put))|o(?:(?:(?:ff|n)lin|bsolet)e|verflow(?:changed)?|pen)|SVG(?:(?:Unl|L)oad|Resize|Scroll|Abort|Error|Zoom)|h(?:e(?:adphoneschange|l[dp])|ashchange|olding)|v(?:o(?:lum|ic)e|ersion)change|w(?:a(?:it|rn)ing|heel)|key(?:press|down|up)|(?:AppComman|Loa)d|no(?:update|match)|Request|zoom))[\s\0]*=");
//    var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
//    if (!regex.test(key)) {
//        event.preventDefault();
//        return false;
//    }
//});

//$("#form-options-id").die("keyup");
$("#form-options-id").live("keyup", function (a) {

    if ($.trim($(this).val()).length != 0) {
        $('div.current').css('border', '3px dotted #9A9DA1 !important');
        $("div.current").removeAttr('data-error');

        $("span.labelerror").remove();

        if (/[`^~<>@#$%&?;{}|()!*.:,"'\]\[]/.test($(this).val())) {
            if ($(".labelerror").length > 0) {
                $(".labelerror").html("Please enter only numbers, letters and underscores for the ID.");
            }
            else {
                $("<span class='error labelerror' style='white-space: nowrap;'>Please enter only numbers, letters and underscores for the ID.</span>").insertAfter($(this));
            }
        } else {
            $("span.error").remove();
            if ($(this).val() != null && $(this).val() != "") {
                if (($(".tab-pane.active #" + $(this).val() + ":not('.tab-pane.active .row.current #" + $(this).val() + "')").length) > 0) {
                    if ($('.existerror').length == 0) {
                        var currentElement = $("div.current");

                        $(this).val(currentElement.find("span").attr("id"));
                        $("<span class='error existserror' style='white-space: nowrap;padding-left:2px;'>Object with same id already exists.</span>").insertAfter($(this));
                        setTimeout('$(".error.existserror").remove()', 3000);
                    }
                    $('#stack2 .modal-footer button').prop('disabled', true);
                    $('#stack2 button.close').prop('disabled', true);
                }
                else {
                    var frmOptIDVal = $(this).val();
                    var frmOptIDValToProp = NameToProper(frmOptIDVal);
                    var currentElement = $("div.current");

                    currentElement.find("input,select,textarea,div,h1").attr("id", frmOptIDValToProp).attr("name", frmOptIDValToProp);
                    currentElement.find("button").attr("id", frmOptIDValToProp);
                    currentElement.find("span").attr("id", frmOptIDValToProp);
                    currentElement.find("input:radio").attr("name", frmOptIDValToProp).attr("id", "");
                    currentElement.find("input:checkbox").attr("id", "");

                    if (currentElement.find("span:first").attr("class") != "textLabel") {
                        currentElement.children("label:first").attr("for", frmOptIDValToProp);
                    } else {
                        currentElement.children("label.first").attr("id", frmOptIDVal);
                    }
                    if (currentElement.find("input:checkbox") !== null) {
                        main.reloadElementOptions();
                    }
                }
            }
        }
    }
    else {
        //$("div.current").attr('data-error', 'empty');
        //$('div.current[data-error]').css('border', '3px dotted #FF0000');

        if ($(".labelerror").length > 0) {
            $(".labelerror").html("Please enter an id for this item.");
        }
        else {
            $("<span class='error labelerror' style='white-space: nowrap;'>Please enter an id for this item.</span>").insertAfter($(this));
        }

        checkEmptyFields();
    }

    if ($("span.error").length > 0) {
        $('#stack2 .modal-footer button').prop('disabled', true);
        $('#stack2 button.close').prop('disabled', true);
    }
    else {
        $('#stack2 .modal-footer button').prop('disabled', false);
        $('#stack2 button.close').prop('disabled', false);
    }
});

//$("#form-options-label").die("keyup");
$("#form-options-label").live("keyup", function (a) {

    var c = main.cache;
    var d = NameToProper($(this).val());
    var b = $("#form-options-checkbox").attr("checked");

    var a = $(this).val();
    if (b !== undefined) {
        //a += '<div class="rqrd">*</div>'
    }
    if (c.find("span:first").attr("class") == "button") {
        c.find("button").text(a);
    }
    if (c.find("span:first").attr("class") == "link") {
        c.find("a.link").text(a);
    }
    c.children("label:first").html(a);

    if (c.find("input:checkbox") !== null) {
        main.reloadElementOptions()
    }
    if ($.trim($(this).val()).length == 0) {
        var f = c.find("span:first");
        switch (f.attr("class")) {
            case 'button':
            case 'link':
                f.attr('data-error', 'empty');
                break;
        }
        c.children("label:first").next().attr('data-error', 'empty');

        if ($(".emptyerror").length > 0) {
            $(".emptyerror").html("<br/>Please enter a label for this item.");
        }
        else {
            $("<span class='error emptyerror' style='white-space: nowrap;'>Please enter a label for this item.</span>").insertAfter($(this));
        }

        checkEmptyFields();
    } else {
        //Remove error message
        var a = $("div.current").find("input,select,textarea,button").parents("span");
        a.removeAttr('data-error');

        $("span.emptyerror").remove();
    }
    if ($("span.error").length > 0) {
        $('#stack2 .modal-footer button').prop('disabled', true);
        $('#stack2 button.close').prop('disabled', true);
    }
    else {
        $('#stack2 .modal-footer button').prop('disabled', false);
        $('#stack2 button.close').prop('disabled', false);
    }
});

$(".form-options-style").live("keyup", function (a) {
    var c = main.cache;

    c.find("input, select, button, a").first().attr("style", $(this).val());
});

$(".form-options-style").live("focus", function (a) {
    var c = main.cache;

    $(this).val(c.find("input, select, button, a").first().attr("style"));

});

CKEDITOR.on("instanceReady", function (e) {
    var c = main.cache;

    if ($('.form-options-label').length > 0) {
        if (CKEDITOR.instances['form-options-label'] != undefined) {
            /*CKEDITOR.instances['form-options-label'].on('key', function (e) {
                var textLength = CKEDITOR.instances['form-options-label'].getData();
                if (textLength.length > 50) {
                    //alert('No more characters possible');
                    return false;
                }
            });*/
            //setTimeout(clear_timer, 1000);

            CKEDITOR.instances['form-options-label'].on('change', function (e) {
                setTimeout(function () {
                    var data = CKEDITOR.instances['form-options-label'].getData();

                    data = data.replace(/<p>/g, '<p style="margin: 1em 0px;">'); // default paragraph values
                    data = data.replace(/<ol>/g, '<ol style="margin: 1em 0;padding: 0 0 0 40px;">'); // default ordered list values
                    data = data.replace(/<ul>/g, '<ul style="margin: 1em 0;padding: 0 0 0 40px;">'); // default unordered list values

                    //c.children("label:first").html(data);
                    c.children("div.ckeditor-output").html(data);
                }, 2000);
            });
        }
    }
    //$.ajaxSetup({ cache: false });

    //var url = forms.core.cores_uuid != undefined ? "/security/chamber/sendroles/" + forms.core.cores_uuid : "/security/chamber/sendroles/" + $("#form-title").data("core");

    //$.getJSON(url, function (data) {
    //    var roles = data;
    //    $("#form-options-user-access-select option").remove();
    //    for (var i = 0; roles.length > i; i++) {
    //        $("#form-options-user-access-select").append('<option value="' + roles[i].ViewRole.role_name + '">' + roles[i].ViewRole.role_name + '</option>');
    //    }
    //}).done(function () {
    //    if ($("#main-column div.active div.current").data("roles") != undefined) {
    //        $.each($("#main-column div.active div.current").data("roles"), function (i, e) {
    //            $("#form-options-user-access-select option[value='" + e + "']").prop("selected", "true");
    //        });
    //    }
    //});

});

//$("#form-options-user-access-select").live("change", function () {

//    $("#main-column div.active div.current").data("roles", $(this).val());

//});
//$("#stack6").on('shown.bs.modal', function () {
function clearErrorMsgs() {
    $("#stage-saved").remove();
    $("#duplicate-option").remove();
    $("#error-min-max").remove();
}

/*Check for duplicate checkbox & radio input names */
function duplicateOptionName(field) {
    var response = "";
    var n = 0;
    var a = false;
    var optArray = [];
    var f = $.trim($(field).val().toUpperCase());

    $('.form-options-more').each(function (index) {
        optArray.push($.trim($(this).val().toUpperCase()));
        if ($.trim($(this).val()) == f) {
            n++;
        }
    });

    var sortOptArray = optArray.sort();
    var optionNameDuplicate = [];

    for (var i = 0; i < sortOptArray.length - 1; i++) {
        if (sortOptArray[i + 1] == sortOptArray[i]) {
            //Check if current field is duplicate
            if (f == sortOptArray[i].toUpperCase()) {
                a = true;
            }
            optionNameDuplicate.push(sortOptArray[i]);
        }
    }

    //If the option field is not a duplicate. Then don't display an error message.
    if (!a) {
        $("#option-taken").remove();
        $("#duplicate-option").remove();
        return "allow";
    }

    if (optionNameDuplicate.length > 0 && n <= 1) {
        response = "True";
    }

    if (response == "True" || n >= 2) {
        /* Display Error Message in Stage Header */
        clearErrorMsgs();
        $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="duplicate-option" role="alert" style="">' +
            '<span class="message"><strong>Error!</strong> Duplicate Option Name: ' + optionNameDuplicate + '</span></div>');
        setTimeout('$("#duplicate-option").remove()', 8000);

        return "dontallow";
    }
    else {
        $("#option-taken").remove();
        //setTimeout('$("#duplicate-option").remove()', 8000);
        $("#duplicate-option").remove();
        return "allow";
    }
}

/*Check for all duplicate dropdown, checkbox & radio input names */
function duplicateOptionName_all() {
    var response = "allow";
    var element;

    $('#main-column div.row').each(function () {
        var optArray = [];
        var select_element = $(this).find('select');
        var select_options = $(this).find('select option');
        var radio_checkbox_options = $(this).find('.option');
        var a = false;

        if (select_element.is('select') && select_options.length == 0) {
            /* Display Error Message in Page Header */
            clearErrorMsgs();
            $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="duplicate-option" role="alert" style="">' +
                '<span class="message"><strong>Error!</strong> At least one Option is required.</span></div>');
            setTimeout('$("#duplicate-option").remove()', 8000);

            response = "dontallow";
            return false;
        }

        if (radio_checkbox_options.length > 0 || select_options.length > 0) {
            var option_type;

            if (radio_checkbox_options.length > 0)
                option_type = radio_checkbox_options;
            else
                option_type = select_options;

            element = option_type.closest('div.row');

            option_type.each(function () {
                //Check for empty options
                if ($.trim($(this).text()) == "") {
                    a = true;
                    return false;
                }
                optArray.push($.trim($(this).text().toUpperCase()));
            });

            //Display error if option is empty
            if (a) {
                response = "dontallow";

                /* Display Error Message in Stage Header */
                clearErrorMsgs();
                $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="duplicate-option" role="alert" style="">' +
                    '<span class="message"><strong>Error!</strong> Please enter an option name. Dropdown, Checkbox and Radio Button option names cannot be empty.</span></div>');
                setTimeout('$("#duplicate-option").remove()', 8000);

                elementAlert(element);

                return false;
            }

            var sortOptArray = optArray.sort();
            var optionNameDuplicate = [];

            for (var i = 0; i < sortOptArray.length - 1; i++) {
                if (sortOptArray[i + 1] == sortOptArray[i]) {
                    optionNameDuplicate.push(sortOptArray[i]);
                }
            }

            if (optionNameDuplicate.length > 0) {
                response = "dontallow";
            }

            if (response == "dontallow") {
                /* Display Error Message in Stage Header */
                clearErrorMsgs();
                $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="duplicate-option" role="alert" style="">' +
                    '<span class="message"><strong>Error!</strong> Duplicate Option Name: ' + optionNameDuplicate + '</span></div>');
                setTimeout('$("#duplicate-option").remove()', 8000);

                elementAlert(element);
                return false;
            }
            else {
                //allow;
            }
        }
    });

    return response;
}

/*Check for all duplicate element id names */
function duplicateElementID() {
    var response = 'allow';
    var elementArray = [];

    $('#main-column div.row').each(function () {
        var unique_element = $(this).find('span');

        if (unique_element.length > 0) {
            elementArray.push($.trim(unique_element.attr('id')));
        }
    });

    var sortElementArray = elementArray.sort();
    var elementIDDuplicate = [];

    for (var i = 0; i < sortElementArray.length - 1; i++) {
        if (sortElementArray[i + 1].toLowerCase() == sortElementArray[i].toLowerCase()) {
            //$('#' + sortElementArray[i]).closest('div.row').attr('data-error', 'empty');
            elementIDDuplicate.push(sortElementArray[i]);
        }
    }

    if (elementIDDuplicate.length > 0) {
        response = 'dontallow';

        clearErrorMsgs();

        /* Display Error Message in Stage Header */
        $('#main-column').prepend(' <div class="alert alert-danger alert-dismissible" id="duplicate-option" role="alert" style="">' +
            '<span class="message"><strong>Error!</strong> Form cannot be saved with duplicate element ids: ' + elementIDDuplicate + '</span></div>');
        setTimeout('$("#duplicate-option").remove()', 8000);

        elementAlert($('#' + elementIDDuplicate[0]).closest('div.row'));
    }
    else {
        //allow;
    }

    return response;
}

function removeNotifyError() {
    $('#main-column li.gs-w div.current').css('border', '3px dotted #9A9DA1 !important');
    $('#main-column li.gs-w div.current').removeAttr('data-error');
}
function removeAllNotifyErrors() {
    $('#main-column li.gs-w div').css('border', '3px dotted #9A9DA1 !important');
    $('#main-column li.gs-w div').removeAttr('data-error');
}

$('.add-image-fileinput input[type="file"]').live('change', function () {
    removeNotifyError();
});

$('#image-options img').live('click', function () {
    removeNotifyError();
});

/*Check for empty images */
function checkEmptyImages() {
    var response = "allow";
    var element;

    $('#main-column li.gs-w div.row span.addImage').each(function () {
        var a = $(this).find("img");

        if (a.data('imgname') == undefined && a.data('imageid') == undefined) {
            element = $(this).closest('div.row');
            element.attr('data-error', 'empty');
            response = "dontallow";
            return false;
        }
    });

    if (response == "dontallow") {
        /* Display Error Message in Stage Header */
        clearErrorMsgs();
        $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="duplicate-option" role="alert" style="">' +
            '<span class="message"><strong>Error!</strong> Please select a valid image</span></div>');
        setTimeout('$("#duplicate-option").remove()', 8000);

        elementAlert(element);

        return response;
    }
    else {
        return response;
    }
}

/*Check for empty fields */
function checkEmptyFields() {
    var response = "allow";
    //var element;

    $('#main-column div.row').each(function () {
        //var a = $(this).find("input,select,textarea,button").parents("span");
        var a = $(this).find("input,select,textarea,button").parents("div.row");

        if (a.attr('data-error') == 'empty') {
            response = "dontallow";
            return false;
        }
    });

    if (response == "dontallow") {
        /* Display Error Message in Stage Header */
        clearErrorMsgs();
        $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="duplicate-option" role="alert" style="">' +
            '<span class="message"><strong>Error!</strong> Empty item names are not allowed.</span></div>');
        setTimeout('$("#duplicate-option").remove()', 8000);

        //elementAlert(element);

        return response;
    }
    else {
        return response;
    }
}

function elementAlert(element) {
    element.css('border', '3px dotted #FF0000');

    var tabID = element.closest(".tab-pane").attr("id");
    if (tabID == 'tab_1_0') {
        $('#main-column .nav-tabs li:first a').effect("pulsate", { color: "#FF0000" }, 8000);
    }
    else {
        $('#main-column .nav-tabs #' + tabID + ' a').effect("pulsate", { color: "#FF0000" }, 8000);
    }
}

function validate_min_max(minvalue, maxvalue) {
    var response = "allow";

    if (parseInt(maxvalue) <= parseInt(minvalue)) {
        response = "dontallow";
    }

    return response;
}

function validate_min_max_all() {
    var response = "allow";

    $('#main-column div.row').each(function () {
        var min_max_data = $(this).find('span');

        if (min_max_data.length > 0) {
            var a = min_max_data.metadata({
                type: "attr",
                name: "data"
            });

            if (a.validate.max != null && a.validate.min != null) {

                if (parseInt(a.validate.max) <= parseInt(a.validate.min)) {
                    response = "dontallow";

                    /* Display Error Message in Stage Header */
                    clearErrorMsgs();
                    $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="error-min-max" role="alert" style="">' +
                        '<span class="message"><strong>Error!</strong> Invalid Min/Max values.</span></div>');

                    elementAlert($(this));

                    return false;
                }
            }
        }
    });

    return response;
}

/*Check for duplicate stage names */


//Prevents user from entering special character keys
function preventSpecChars(field, regx) {
    $(field).on('keypress', function (event) {
        var regex = new RegExp(regx);
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        // If left, right arrow keys are pressed
        if (event.keyCode == 37 || event.keyCode == 39)
            return
        if (!regex.test(key)) {
            $(field).val($.trim($(field).val()));
            if ($("span.error").length == 0) {
                $("span.emptyerror").remove();
                $("span.error").remove();
                $("<span class='error labelerror' style='white-space: nowrap;'>Please enter only numbers, letters and underscores.</span>").insertAfter($(field));
            }
            event.preventDefault();
            setTimeout('$("span.error").remove()', 3000);
            return false;
        }
    });
}

function stripSpecChars(field, regx) {
    if (regx != "") {
        //Strips the string in case of copy/past
        $(field).val($(field).val().replace(regx, ''));
    }
    else {
        //Strips the string in case of copy/past
        $(field).val($(field).val().replace(/[^a-z0-9_\s\']/gi, ''));
    }
}

function validateFormSettings() {
    var response = "allow";

    //Check for valid fields
    if (!forms.states.canUseAppName) { return "dontallow"; }
    if (checkFormSpecChars('#form-options-formname', 'nodelay') != "allow") { return "dontallow";; }
    if (forms.designer.fn.duplicateStageName('#stage-options-name') != "allow") { return "dontallow"; }
    if (checkStageSpecChars('nodelay') != "allow") { return "dontallow"; }
    if (duplicateOptionName_all() != "allow") { return "dontallow"; }
    if (validate_min_max_all() != "allow") { return "dontallow"; }
    if (checkEmptyFields() != "allow") { return "dontallow"; }
    if (duplicateElementID() != "allow") { return "dontallow"; }
    if (checkEmptyImages() != "allow") { return "dontallow"; }

    if (response == "allow") {
        removeAllNotifyErrors();
    }

    return response;
}

//Prevents field from containing characters other than underscore and apostrophe
function validationType1(field) {
    if (!(/^[A-Za-z0-9_\s\']*$/.test($(field).val()))) {
        preventSpecChars(field, '^[A-Za-z0-9_\'\\s\\b]*$');

        //Strips the string in case of copy/past
        stripSpecChars(field, '');

    } else {
        //$("span.error").remove();
    }
}

//Prevents field from starting or ending with a special character
function validationType2(field, errorMsg) {
    if (!(/^[a-zA-Z0-9](.*[a-zA-Z0-9])?$/.test($.trim($(field).val())))) {
        $(field).val($.trim($(field).val()));

        if ($(".labelerror").length == 0) {
            $("span.error").remove();
            $("<span class='error labelerror' style='white-space: nowrap;'>" + errorMsg + ".</span>").insertAfter($(field));
            setTimeout('$("span.error").remove()', 3000);
        }

        /* Display Error Message in Stage Header */
        clearErrorMsgs();
        $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="stage-saved" role="alert" style="">' +
            '<span class="message"><strong>Error!</strong> ' + errorMsg + ': ' + $(field).val() + '</span></div>');

        return "dontallow";
    }
    else {
        $("#stage-saved").remove();
        $("span.error").remove();
        return "allow";
    }
}

//Prevents field from starting with a number
function validationType3(field, errorMsg) {
    if (/^[0-9][0-9a-zA-Z]*/.test($.trim($(field).val()))) {
        $(field).val($.trim(field.val()));
        stripSpecChars(field, /^\d+/);

        if ($(".labelerror").length == 0) {
            $("span.error").remove();
            $("<span class='error labelerror' style='white-space: nowrap;'>Form title can not start with number.</span>").insertAfter($(field));
            setTimeout('$("span.error").remove()', 3000);
        }
    }
}

function checkStageSpecChars(flag) {
    //Prevents Stage Name from containing characters other than underscore and apostrophe
    validationType1('#stage-options-name');

    //Check all stage titles for special characters
    $("a[data-toggle$='tab']").each(function (index) {
        if (!(/^[a-zA-Z0-9](.*[a-zA-Z0-9])?$/.test($.trim(this.text)))) {
            if (flag == "delay") {
                $('#stage-options-name').donetyping(function () {

                    /* Display Error Message in Stage Header */
                    clearErrorMsgs();
                    $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="stage-saved" role="alert" style="">' +
                        '<span class="message"><strong>Error!</strong> Page name cannot start or end with special characters: ' + this.text + '</span></div>');

                    flag = "dontallow";
                    return "dontallow";
                });
            }
            else {
                /* Display Error Message in Stage Header */
                //clearErrorMsgs();
                clearErrorMsgs();
                $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="stage-saved" role="alert" style="">' +
                    '<span class="message"><strong>Error!</strong> Page name cannot start or end with special characters: ' + this.text + '</span></div>');

                flag = "dontallow";
                return "dontallow";
            }
        }
    });

    if (flag != "dontallow") {
        if (flag == "delay") {
            $('#stage-options-name').donetyping(function () {
                return validationType2('#stage-options-name', 'Page name cannot start or end with special characters');
            });
        }
        else {
            return validationType2('#stage-options-name', 'Page name cannot start or end with special characters');
        }
    }
}

function checkFormSpecChars(field, flag) {

    //Prevents Form name from containing characters other than underscore and apostrophe
    validationType1(field);

    //Prevents Form name from starting with a number
    validationType3(field, 'Form title can not start with number');

    //Prevents Form Title from starting or ending with a special character
    if (flag == "delay") {
        $(field).donetyping(function () {
            return validationType2(field, 'Form title can not start or end with special characters');
        });
    }
    else {
        return validationType2(field, 'Form title can not start or end with special characters');
    }
}





$("#main-column").on("dblclick", "div.active li.selected", function (a) {

    if ($("#section-settings .fa-angle-left").length > 0) {
        $('#section-settings.toolbar-section-toggle').click();
    }
    //$("#stack4").draggable();
    reloadSectionOptions($(this));

});

$("#main-column").on("click", "div.active div.current", function (a) {

    // $("div.current a.settings-element").click();
});




$("#secAddAllobj").click(function () {
    if ($("#secAddAllobj").prop('checked')) {
        $("#dynamicform .tab-pane.active .gridster-ul .gs-w.selected .row").each(function (rowindex, rowelement) {
            var objectRoles = [];
            var approles = [];
            if (($(rowelement).data("roles")) != undefined) {
                objectRoles = $(rowelement).data("roles").toString().split(",");
            }

            if ($("#main-column div.active li.selected").data("roles") != null) {
                approles = $("#main-column div.active li.selected").data("roles").val().toString().split(",");
            }
            for (var j = 0; j < objectRoles.length; j++) {
                if (approles.indexOf(objectRoles[j]) < 0) {
                    approles[approles.length] = objectRoles[j];
                }
            }
            $(rowelement).data("roles", approles);
        });
    }

});
$("#secReplaceAllobj").click(function () {
    if ($("#secReplaceAllobj").prop('checked') == true) {
        $("#dynamicform .tab-pane.active .gridster-ul .gs-w.selected .row").data("roles", $("#main-column div.active li.selected").data("roles"));
        //$("#stage-options-role").val());
    }
});


function reloadSectionOptions(a) {

    loadBorderSetting(a);

    if ($("#main-column div.active li.selected").data("background-image") != undefined) {
        var image = $("#main-column div.active li.selected").data("background-image");

        $("#section-settings-panel .section-bg-fileinput  img:first").parent("div.fileinput-exists").hide();
        $("#section-settings-panel .section-bg-fileinput .fileinput-preview img:last").attr("src", image);
        $("#section-settings-panel .section-bg-fileinput div.fileinput-new").attr("class", "fileinput fileinput-exists");
        $("#section-settings-panel .section-bg-fileinput .fileinput-preview img").remove();
        $("#section-settings-panel .section-bg-fileinput .fileinput-preview").append("<img src='" + image + "'>");
    }
    else {
        //Clear image field
        $(".section-bg-fileinput .btn.fileinput-exists").trigger("click");
    }
}

function loadBorderSetting(a) {
    var dataset = a.data("section-top-border");

    if (dataset == "0px") {
        $(".section-top-border").parent("span:first").removeClass("checked");
        $('.colorpicker-default.topborder .form-control').val("#000000");
        $('.colorpicker-default.topborder').colorpicker('setValue', '#000000');
        a.data("section-top-border", "0px");
        a.css("border-top", "0px");
    }
    else {
        $(".section-top-border").parent("span:first").addClass("checked");
        if (dataset == undefined) {
            $(".topborderwidth").val("1px");
            $(".section-border-style").val("solid");
            $('.colorpicker-default.topborder .form-control').val("#000000");
            $('.colorpicker-default.topborder').colorpicker('setValue', '#000000');
        }
        else {
            var b = dataset.split(" ")
            $(".topborderwidth").val(b[0]);
            $(".section-border-style").val(b[1]);
            $('.colorpicker-default.topborder .form-control').val(b[2]);
            $('.colorpicker-default.topborder').colorpicker('setValue', b[2]);
        }
    }

    dataset = a.data("section-right-border");
    if (a.data("section-right-border") == "0px") {
        $(".section-right-border").parent("span:first").removeClass("checked");
        $('.colorpicker-default.rightborder .form-control').val("#000000");
        $('.colorpicker-default.rightborder').colorpicker('setValue', '#000000');
        a.data("section-right-border", "0px");
        a.css("border-right", "0px");
    } else {
        $(".section-right-border").parent("span:first").addClass("checked");
        if (dataset == undefined) {
            $(".rightborderwidth").val("1px");
            $(".section-border-style").val("solid");
            $('.colorpicker-default.rightborder .form-control').val("#000000");
            $('.colorpicker-default.rightborder').colorpicker('setValue', '#000000');
        }
        else {
            var b = dataset.split(" ")
            $(".rightborderwidth").val(b[0]);
            $(".section-border-style").val(b[1]);
            $('.colorpicker-default.rightborder .form-control').val(b[2]);
            $('.colorpicker-default.rightborder').colorpicker('setValue', b[2]);
        }
    }

    dataset = a.data("section-bottom-border");
    if (a.data("section-bottom-border") == "0px") {
        $(".section-bottom-border").parent("span:first").removeClass("checked");
        $('.colorpicker-default.bottomborder .form-control').val("#000000");
        $('.colorpicker-default.bottomborder').colorpicker('setValue', '#000000');
        a.data("section-bottom-border", "0px");
        a.css("border-bottom", "0px");
    } else {
        $(".section-bottom-border").parent("span:first").addClass("checked");
        if (dataset == undefined) {
            $(".bottomborderwidth").val("1px");
            $(".section-border-style").val("solid");
            $('.colorpicker-default.bottomborder .form-control').val("#000000");
            $('.colorpicker-default.bottomborder').colorpicker('setValue', '#000000');
        }
        else {
            var b = dataset.split(" ");
            $(".bottomborderwidth").val(b[0]);
            $(".section-border-style").val(b[1]);
            $('.colorpicker-default.bottomborder .form-control').val(b[2]);
            $('.colorpicker-default.bottomborder').colorpicker('setValue', b[2]);
        }
    }

    dataset = a.data("section-left-border");
    if (a.data("section-left-border") == "0px") {
        $(".section-left-border").parent("span:first").removeClass("checked");
        $('.colorpicker-default.leftborder .form-control').val("#000000");
        $('.colorpicker-default.leftborder').colorpicker('setValue', '#000000');
        a.data("section-left-border", "0px");
        a.css("border-left", "0px");
    } else {
        $(".section-left-border").parent("span:first").addClass("checked");
        if (dataset == undefined) {
            $(".leftborderwidth").val("1px");
            $(".section-border-style").val("solid");
            $('.colorpicker-default.leftborder .form-control').val("#000000");
            $('.colorpicker-default.leftborder').colorpicker('setValue', '#000000');
        }
        else {
            var b = dataset.split(" ");
            $(".leftborderwidth").val(b[0]);
            $(".section-border-style").val(b[1]);
            $('.colorpicker-default.leftborder .form-control').val(b[2]);
            $('.colorpicker-default.leftborder').colorpicker('setValue', b[2]);
        }
    }

    if (a.data("section-border-style")) {
        $(".section-border-style").val(a.data("section-border-style"));
    } else {
        $(".section-border-style").val("solid");

    }
}

$("#form-options-status-check").live("change", function () {
    var d = main.cache;
    var a = d.find("span");
    var e = a.metadata({
        type: "attr",
        name: "data"
    });

    if (!$(this).prop("checked")) {
        $("#form-options-status-type").css("display", "none");
        $("#form-options-status-message").css("display", "none");

        e.validate.status_check = "";
        a.attr("data", $.toJSON(e));
    } else {

        e.validate.status_check = "true";

        $("#form-options-status-type").css("display", "block");
        $("#form-options-status-message").css("display", "block");
        $('#form-options-status-type-select').trigger('change');
        a.attr("data", $.toJSON(e));

    }
});

$("#form-options-status-type-select").live("change", function () {
    var controlContainer = main.cache.children('span');
    var containerData = controlContainer.metadata({
        type: "attr",
        name: "data"
    });

    if ($(this).val() != "submit") {
        $("#form-options-status-identity").css("display", "none");
    } else {
        main.populateIdentities('#form-options-status-identity-select', containerData.validate.status_identity);
        $("#form-options-status-identity").css("display", "block");
    }

    if ($(this).val() != "" && (typeof containerData.validate != 'undefined')) {
        containerData.validate.status_type = $(this).val();
        controlContainer.attr("data", $.toJSON(containerData));
    }
});

$("#form-options-status-identity-select").live("change", function () {
    var d = main.cache;
    var a = d.find("span");
    var e = a.metadata({
        type: "attr",
        name: "data"
    });


    if ($(this).val() != "") {
        e.validate.status_identity = $("#form-options-status-identity-select").val();
        a.attr("data", $.toJSON(e));
    }
});

$("#form-options-status-message-textarea").live("keyup", function () {
    var d = main.cache;
    var a = d.find("span");
    //var e = a.metadata({
    //    type: "attr",
    //    name: "data"
    //});

    if ($(this).val() != "") {
        a.data("status_message", $("#form-options-status-message-textarea").val());
        //e.validate.status_message = $("#form-options-status-message-textarea").val();
        //a.attr("data", $.toJSON(e));
    }
});

$(document).on("change", "#form-options-bind-check", function () {
    var d = main.cache;
    var a = d.find("span");
    var e = a.metadata({
        type: "attr",
        name: "data"
    });
    if (!$(this).prop("checked")) {
        $("#form-options-bind-stage").css("display", "none");
        $("#form-options-bind-objects").css("display", "none");
        $("div.current select").removeAttr("style");

        e.validate.bind_check = "false";
        a.attr("data", $.toJSON(e));
    } else {

        e.validate.bind_check = "true";

        $("#form-options-bind-stage").css("display", "block");
        $("#form-options-bind-objects").css("display", "block");
        $("div.current select").css("border", "1px solid #ecbc29");

        a.attr("data", $.toJSON(e));

    }
});

$(document).on("change", "#form-options-values-check", function () {
    var d = main.cache;
    var a = d.find("span");
    var e = a.metadata({
        type: "attr",
        name: "data"
    });

    if (!$(this).prop("checked")) {
        $("#form-options-values-section").css("display", "none");
        $("div.current select").removeAttr("style");

        e.validate.values_check = "false";
        a.attr("data", $.toJSON(e));
    } else {

        //if (e.validate.values_check) {
        //    e.validate.values_check = "true";
        //}

        if ($('#form-options-user-roles-check').prop("checked")) {
            $("#form-options-user-roles-check").trigger("click");
        }

        $("#form-options-values-section").css("display", "block");
        $("div.current select").css("border", "1px solid #ecbc29");

        $("#form-options-name-select").html("");

        //Make all values numeric
        $("div.current select > option").each(function () {
            if (isNaN(this.value)) {
                this.value = "0";
            }

            $("#form-options-name-select").append("<option  value='" + this.value + "' >" + this.text + "</option>");
        });

        $("#form-options-name-select").trigger("change");

        e.validate.values_check = "true";
        a.attr("data", $.toJSON(e));
    }
});

function numOnly(event, value) {
    // Backspace, tab, enter, end, home, left, right
    // We don't support the del key in Opera because del == . == 46.
    var controlKeys = [8, 9, 13, 35, 36, 37, 39];
    // IE doesn't support indexOf
    var isControlKey = controlKeys.join(",").match(new RegExp(event.which));
    // Some browsers just don't raise events for control keys. Easy.
    // e.g. Safari backspace.
    if (!event.which || // Control keys in most browsers. e.g. Firefox tab is 0
        (49 <= event.which && event.which <= 57) || // Always 1 through 9
        (event.which == 190 && value.indexOf('.') === -1 && value.substring(0, 1) != '') || // Allow decimals, no decimals first
        ((event.which == 173 || event.which == 189) && value.substring(0, 1) == '') || // Allow only one negative
        (event.which == 48 && value.substring(0, 1) != '') || // No 0 first digit
        (($('#form-options-name-value').val() == GetTextSelection()) && (event.which == 173 || event.which == 189)) || //Allow negative after all text selected
        isControlKey) { // Opera assigns values for control keys.

        return;

    } else {
        event.preventDefault();
    }
}

function GetTextSelection() {
    var textComponent = document.getElementById('form-options-name-value');
    var selectedText;

    if (textComponent.selectionStart !== undefined) {   // Standards Compliant Version
        var startPos = textComponent.selectionStart;
        var endPos = textComponent.selectionEnd;
        selectedText = textComponent.value.substring(startPos, endPos);
    }
    else if (document.selection !== undefined) {   // IE Version
        textComponent.focus();
        var sel = document.selection.createRange();
        selectedText = sel.text;
    }

    return selectedText;
}

$('#form-options-name-value').live("keyup change", function (event) {
    /*if (event.which == 173 || event.which == 189) {
        //Use default value
        //$('#form-options-name-value').val('-1');
    }*/

    main.reloadElementOptions();
});

$('#form-options-name-value').live("keydown change", function (event) {
    numOnly(event, $(this).val());
});

$(document).on("change", "#form-options-name-select", function () {
    var selectedOption = $(this).find('option:selected').text();
    $("div.current select > option").each(function () {
        if (this.text == selectedOption) {
            $('#form-options-name-value').val(this.value);
            return false;
        }
    });
});

$(document).on("change", "#form-options-user-roles-check", function () {
    var d = main.cache;
    var a = d.find("span");
    var e = a.metadata({
        type: "attr",
        name: "data"
    });
    if (!$(this).prop("checked")) {
        $("#form-options-user-roles-section").css("display", "none");
        $("div.current select").removeAttr("style");

        //Remove all option fields
        $('.form-options-more').parent().remove();
        main.reloadElementOptions();

        $("#form-options-more-add").before($(main.addOption("Option 1")).fadeIn(200, function () {
            main.reloadElementOptions();
        }));

        $("#form-options-more-add").before($(main.addOption("Option 2")).fadeIn(200, function () {
            main.reloadElementOptions();
        }));

        $("#form-options-more-add").before($(main.addOption("Option 3")).fadeIn(200, function () {
            main.reloadElementOptions();
        }));

        $('.options').show();

        e.validate.roles_check = "false";
        e.validate.roles_collections = null;
        e.validate.roles_user = null
        a.attr("data", $.toJSON(e));
    } else {
        //Hide option fields
        $('.options').hide();

        e.validate.roles_check = "true";

        if ($('#form-options-values-check').prop("checked")) {
            $('#form-options-values-check').trigger("click");
        }

        //Display collections dropdown
        $("#form-options-user-roles-section").css("display", "block");

        $('label[for="notifyRoles"]').hide();
        $('#form-options-user-roles-select').hide();
        $("#form-options-users-select").next().hide();

        //Populate collection dropdown
        //Get cores

        var getCoresModel = typeof getCoresModel === 'object' && getCoresModel != undefined ? getCoresModel : {};

        getCoresModel.options = getCoresModel.options == undefined ? {} : getCoresModel.options;
        getCoresModel.options.async = true;
        getCoresModel.options.url = "/cores/collectionsjson/GetCores/";
        getCoresModel.options.callBack = function (getCoresModel) {

            var cores = getCoresModel.response;

            $("#form-options-user-collections-select").html("");

            var thisHtml = '';
            for (i = 0; i < cores.length; i++) {
                var core_id = "";
                var core_name = "";
                var sel = "";

                core_id = cores[i].cores_id;
                core_name = cores[i].core_name;

                if (core_name == "ReVamp System") {
                    sel = "selected";
                    core_name = "Templates";
                }
                thisHtml += "<option  value='" + core_id + "' " + sel + " >" + core_name + "</option>";
            }

            $("#form-options-user-collections-select").append(thisHtml);

            if (e.validate.roles_collections != null) {
                $("#form-options-user-collections-select").val(e.validate.roles_collections);
                $("#form-options-user-collections-select").trigger("change");
            }
        }

        ajaxDynamic(getCoresModel);

        $("div.current select").css("border", "1px solid #ecbc29");
        a.attr("data", $.toJSON(e));
    }
});


$(document).on("change", "#form-options-user-collections-select", function () {
    var d = main.cache;
    var a = d.find("span");
    var e = a.metadata({
        type: "attr",
        name: "data"
    });

    var collection_id = $(this).val();

    var url = '/security/chamberjson/sendroles/' + collection_id;

    e.validate.roles_collections = collection_id;

    $("#form-options-users-select").next().hide();
    $('label[for="notifyRoles"]').show();
    $('#form-options-user-roles-select').show();


    $.getJSON(url, function (data) {
        var roles = data;

        $("#form-options-user-roles-select").html("");

        if (roles.length > 0)
            $("#form-options-user-roles-select").append("<option  selected='true' disabled='disabled'>Select a Role</option>");
        else
            $("#form-options-user-roles-select").append("<option  selected='true' disabled='disabled'>No Roles Available</option>");

        for (var i = 0; roles.length > i; i++) {
            /*if ((roles[i].ViewRole.role_name == "SYSTEM ADMIN") && !(isSystemAdmin)) {
                continue;
            }*/
            $("#form-options-user-roles-select").append("<option  value='" + roles[i].ViewRole.roles_id + "'>" + roles[i].ViewRole.role_name + "</option>");
        }
    }).done(function () {
        $('#form-options-user-roles-select > option').each(function () {
            if ($(this).val() == e.validate.roles_user) {
                var url = '/security/chamberjson/senduserroles/' + e.validate.roles_user;
                $("#form-options-user-roles-select").val(e.validate.roles_user);
                populateUserRoles(url);
                return false;
            }
        });
    });


    a.attr("data", $.toJSON(e));
});

function cboValueToArray(targetid) {
    var $target = $("select[id*=" + targetid + "] option");
    var results = [];
    $target.each(function () {
        var val = $(this).val();
        if (val !== '') results.push(val);
    });
    return results;
}

function populateUserRoles(url) {
    var cores_id = $("#form-options-user-collections-select").val();
    var identities_id;

    $.getJSON(url, function (data) {
        var userRoles = data;
        $("#form-options-users-select").html("");
        for (var i = 0; userRoles.length > i; i++) {
            if (userRoles[i].user_name == "SEED") {
                continue;
            }
            else {
                $("#form-options-users-select").append("<option  value='" + userRoles[i].user_name + "'>" + userRoles[i].user_name + "</option>");
            }
        }
    }).done(function () {
        $('#form-options-users-select.loumultiselect').multiSelect({
            afterSelect: function (values) {
                var val = values.toString().split(',');

                $(val).each(function (index, item) {
                    $("#form-options-more-add").before($(main.addOption(item)).fadeIn(200, function () {
                        main.reloadElementOptions();
                    }));
                });
            },
            afterDeselect: function (values) {
                //alert("Deselect value: "+values);
                var val = values.toString().split(',');

                $(val).each(function (index, item) {
                    $('.form-options-more').each(function (index) {
                        if ($(this).val() == item) {
                            $(this).parent().remove();
                        }
                    });
                });
                main.reloadElementOptions();
            }
        });

        //Update dropdown with any new updates to user collection status: deactiated
        $('.form-options-more').each(function (index) {
            $("#form-options-users-select option[value='" + $(this).val() + "']").prop("selected", "true");

            if ($("#form-options-users-select option[value='" + $(this).val() + "']").length == 0) {
                $(this).parent().remove();
            }
        });
        main.reloadElementOptions();

        $('#form-options-users-select.loumultiselect').multiSelect('refresh');
    });

}

$(document).on("change", "#form-options-user-roles-select", function () {
    var d = main.cache;
    var a = d.find("span");
    var e = a.metadata({
        type: "attr",
        name: "data"
    });

    var role_id = $(this).val();

    var url = '/security/chamber/senduserroles/' + role_id;
    $('#form-options-users-select.loumultiselect').multiSelect('destroy');

    e.validate.roles_user = role_id;
    a.attr("data", $.toJSON(e));

    $('.form-options-more').parent().remove();
    main.reloadElementOptions();

    populateUserRoles(url);
});

$(document).on("change", "#form-options-bind-stage-select", function () {
    var d = main.cache;
    var a = d.find("span");
    var e = a.metadata({
        type: "attr",
        name: "data"
    });
    var data = new Array();
    var selected = $(this).val();
    e.validate.bind_stage = selected;
    a.attr("data", $.toJSON(e));
    $("#gridster_" + selected + " li.gs-w div.row span").find("input[type=text]").each(function (i, e) {
        data[i] = $(e).attr("id");
    });
    $("#form-options-bind-object-format").autocomplete({ source: data });
    $("#form-options-bind-object-format").tagit({
        availableTags: data,
        afterTagRemoved: function (event, ui) {
            var tags = $("#form-options-bind-object-format").tagit("assignedTags");
            if (tags.length < 1) {
                $("#form-options-bind-stage-select").removeAttr("disabled");
            }
            e.validate.bind_objects = tags;
            a.attr("data", $.toJSON(e));
        },
        afterTagAdded: function (event, ui) {
            var tags = $("#form-options-bind-object-format").tagit("assignedTags");
            if (tags.length > 0) {
                $("#form-options-bind-stage-select").attr("disabled", "disabled");
            }
            e.validate.bind_objects = tags;
            a.attr("data", $.toJSON(e));

        }
    });

    $("#form-options-bind-object-format").autocomplete("option", "appendTo", ".eventInsForm");
});

$("#form-options-paste-html").live("keyup", function () {
    var html = $("#form-options-paste-html").val();
    if ($(html).find("option").length > 0) {

        $("#form-options-paste button").removeAttr('disabled');
    } else {
        $("#form-options-paste button").attr('disabled', 'disabled');
    }
});

$("#form-options-paste button").live("click", function () {

    var html = $("#form-options-paste-html").val();
    $(html).find("option").each(function (index, element) {

        $(".add-form-option").trigger("click");
        $(".form-options-more").last().val($(element).text());

    });
});

$(document).on("change", "#form-options-viewtable-stage", function () {

    $("#form-options-viewtable-columns").multiSelect("destroy");
    $("#form-options-viewtable-columns").parent("div").show();
    $("#form-options-viewtable-columns").html("");
    $("#main-column div.current").data("viewtablestage", $(this).val());
    $("#gridster_" + $(this).val() + " div.row").each(function (i, e) {
        if ($(e).find("input, select").length > 0)
            $("#form-options-viewtable-columns").append('<option value="' + $(e).find("span:first").attr("id") + '">' + $(e).find("label:first").text() + '</option>');
    });
    var list = new Array();
    $("#form-options-viewtable-columns").multiSelect({
        keepOrder: true,
        afterSelect: function (values) {

            list.push(values[0]);
            //console.log(values[0]);

            //add column to table
            if ($("#main-column div.current table thead tr th:eq(0)").text().indexOf("Columns 1") > -1 && $("#main-column div.current table thead tr th:eq(1)").text().indexOf("Columns 2") > -1) {
                $("#main-column div.current table thead tr").html("");
                $("#main-column div.current table tbody tr").html("");
                $("#main-column div.current table thead tr").prepend("<th>&nbsp;</th>");
                $("#main-column div.current table tbody tr").prepend("<th><a style='pointer-events: none; cursor: default;'>View/Edit</a></th>");

            }
            $("#main-column div.current table thead tr").append("<th>" + $('#form-options-viewtable-columns option[value="' + values[0] + '"]').text() + "</th>");

            $("#main-column div.current table tbody tr").append("<td>&nbsp;</td>");
            $("#main-column div.current").data("viewtablecolumns", list);
            $("#form-options-viewtable-stage").attr("disabled", "disabled");
            var w = $('.tab-content div.active li.selected');

            //var grid = $("#main-column div.active").attr("id").slice("-1");
            var grid = $("#main-column div.active").attr("id").slice("6");
            gridster[grid].resize_widget($(w), $('.tab-content div.active li.selected').attr("data-sizex") + 5, $('.tab-content div.active li.selected').attr("data-sizey"), false);
        },
        afterDeselect: function (values) {
            if (values != null) {
                var index = list.indexOf(values[0]);
                if (index > -1) {
                    list.splice(index, 1);
                }

                $("#main-column div.current table thead tr th").each(function (i, e) {
                    if ($(e).text().indexOf(values[0]) > -1) {
                        $("#main-column div.current table thead tr ").find("th:eq(" + i + ")").remove();
                        $("#main-column div.current table tbody tr ").find("td:eq(" + i + ")").remove();

                    }
                });

                $("#main-column div.current").data("viewtablecolumns", list);
                if ($("#main-column div.current").data("viewtablecolumns").length < 1) {
                    $("#main-column div.current table thead tr").html('<th>Columns 1</th><th>Columns 2</th>');
                    $("#main-column div.current table tbody tr").html('<td>&nbsp;</td><td>&nbsp;</td>');
                    $("#form-options-viewtable-stage").removeAttr("disabled");
                    var w = $('.tab-content div.active li.selected');

                    //var grid = $("#main-column div.active").attr("id").slice("-1");
                    var grid = $("#main-column div.active").attr("id").slice("6");
                    gridster[grid].resize_widget($(w), $('.tab-content div.active li.selected').attr("data-sizex") - 10, $('.tab-content div.active li.selected').attr("data-sizey"), false);

                }

            }

        }
    });

    $("#form-options-viewtable-columns").multiSelect('deselect_all');

});

$(document).on("change", "#form-options-viewtable-filter", function () {
    $("#main-column div.active div.current").data("viewtablefilter", $(this).val());
});

$(".section-top-border").on("change", function (b) {
    buildsectionborder('top');
});
$(".section-bottom-border").on("change", function (b) {
    buildsectionborder('bottom');
});
$(".section-right-border").on("change", function (b) {
    buildsectionborder('right');
});
$(".section-left-border").on("change", function (b) {
    buildsectionborder('left');
});

//top border color
$('.colorpicker-default.topborder').colorpicker().on('changeColor', function (ev) {
    $("#main-column div.active li.selected").css("border-top", $(".topborderwidth").val() + " " + $(".section-border-style").val() + " " + ev.color.toHex());
    $("#main-column div.active li.selected").data("section-top-border", $(".topborderwidth").val() + " " + $(".section-border-style").val() + " " + ev.color.toHex());
});
//right border color
$('.colorpicker-default.rightborder').colorpicker().on('changeColor', function (ev) {
    $("#main-column div.active li.selected").css("border-right", $(".rightborderwidth").val() + " " + $(".section-border-style").val() + " " + ev.color.toHex());
    $("#main-column div.active li.selected").data("section-right-border", $(".rightborderwidth").val() + " " + $(".section-border-style").val() + " " + ev.color.toHex());
});
//left border color
$('.colorpicker-default.leftborder').colorpicker().on('changeColor', function (ev) {
    $("#main-column div.active li.selected").css("border-left", $(".leftborderwidth").val() + " " + $(".section-border-style").val() + " " + ev.color.toHex());
    $("#main-column div.active li.selected").data("section-left-border", $(".leftborderwidth").val() + " " + $(".section-border-style").val() + " " + ev.color.toHex());
});
//bottom border color
$('.colorpicker-default.bottomborder').colorpicker().on('changeColor', function (ev) {
    if ($(".section-bottom-border").prop("checked")) {
        //$("li.selected").data("section-bottom-border", "1px solid " + ev.color.toHex());
        $("#main-column div.active li.selected").css("border-bottom", $(".bottomborderwidth").val() + " " + $(".section-border-style").val() + " " + ev.color.toHex());
        $("#main-column div.active li.selected").data("section-bottom-border", $(".bottomborderwidth").val() + " " + $(".section-border-style").val() + " " + ev.color.toHex());
    }

});

$(".topborderwidth").on("change", function (b) {
    buildsectionborder('top');
});
$(".leftborderwidth").on("change", function (b) {
    buildsectionborder('left');
});
$(".rightborderwidth").on("change", function (b) {
    buildsectionborder('right');
});
$(".bottomborderwidth").on("change", function (b) {
    buildsectionborder('bottom');
});
function buildsectionborder(side) {


    if (side == "top") {
        if ($(".section-top-border").prop("checked")) {
            $("#main-column div.active li.selected").css("border-top", $(".topborderwidth").val() + " " + $(".section-border-style").val() + " " + $("#topborderColor .form-control").val());
            $("#main-column div.active li.selected").data("section-top-border", $(".topborderwidth").val() + " " + $(".section-border-style").val() + " " + $("#topborderColor .form-control").val());
        }
        else {
            $("#main-column div.active li.selected").css("border-top", "0px");
            $("#main-column div.active li.selected").data("section-top-border", "0px");
        }
    }
    else if (side == 'left') {
        if ($(".section-left-border").prop("checked")) {
            $("#main-column div.active li.selected").css("border-left", $(".leftborderwidth").val() + " " + $(".section-border-style").val() + " " + $("#leftborderColor .form-control").val());
            $("#main-column div.active li.selected").data("section-left-border", $(".leftborderwidth").val() + " " + $(".section-border-style").val() + " " + $("#leftborderColor .form-control").val());
        }
        else {
            $("#main-column div.active li.selected").css("border-left", "0px");
            $("#main-column div.active li.selected").data("section-left-border", "0px");
        }
    }
    else if (side == 'right') {
        if ($(".section-right-border").prop("checked")) {
            $("#main-column div.active li.selected").css("border-right", $(".rightborderwidth").val() + " " + $(".section-border-style").val() + " " + $("#rightborderColor .form-control").val());
            $("#main-column div.active li.selected").data("section-right-border", $(".rightborderwidth").val() + " " + $(".section-border-style").val() + " " + $("#rightborderColor .form-control").val());
        }
        else {
            $("#main-column div.active li.selected").css("border-right", "0px");
            $("#main-column div.active li.selected").data("section-right-border", "0px");
        }
    }
    else if (side == 'bottom') {
        if ($(".section-bottom-border").prop("checked")) {
            $("#main-column div.active li.selected").css("border-bottom", $(".bottomborderwidth").val() + " " + $(".section-border-style").val() + " " + $("#bottomborderColor .form-control").val());
            $("#main-column div.active li.selected").data("section-bottom-border", $(".bottomborderwidth").val() + " " + $(".section-border-style").val() + " " + $("#bottomborderColor .form-control").val());
        }
        else {
            $("#main-column div.active li.selected").css("border-bottom", "0px");
            $("#main-column div.active li.selected").data("section-bottom-border", "0px");
        }
    }

    $("#main-column div.active li.selected").data("section-border-style", $(".section-border-style").val());
}
$(".section-border-style").on("change", function (b) {
    buildsectionborder('top');
    buildsectionborder('left');
    buildsectionborder('bottom');
    buildsectionborder('right');

});

$("#main-column").on("click", "div.row", function (b) {
    b.stopImmediatePropagation();

    var a = $(this);
    $(".active li").removeClass("selected");
    a.parent("li").addClass("selected");

    $("div.row").removeClass("current");
    $("div.row").find("a.delete-element").remove();
    $("div.row").find("a.settings-element").remove();
    $("div.row").find("a.moveup-element").remove();
    $("div.row").find("a.movedown-element").remove();
    $("#form-title").css({
      //  "background-color": "#f5f5f5",
        "box-shadow": "none"
    });
    a.addClass("current");
    a.removeClass("selected");
    $("li[data-toggle=popover]").popover('hide');
    a.find("a.delete-element").remove();
    a.find("a.settings-element").remove();
    a.find("a.moveup-element").remove();
    a.find("a.movedown-element").remove();
    a.append(forms.designer.fn.getObjectToolBar());
    //Remove error messages for blank fields
    var c = $("#main-column div.active div.current");
    if (c.find("label:first").html() != "") {
        var a = c.find("input,select,textarea,button").parents("span");
        a.removeAttr('data-error');
    }

    ObjectSettingsClick();
});

$("#main-column").on("hover", "div.row", function (b) {
    b.stopImmediatePropagation();
    var a = $(this);
    if (b.type === "mouseenter") {

        $("div.row").each(function () {
            if (!$(this).hasClass("current")) {
                $(this).find("a.delete-element").remove()
                $(this).find("a.settings-element").remove()
                $(this).find("a.moveup-element").remove();
                $(this).find("a.movedown-element").remove();
            }
        });
        a.find("a.delete-element").remove();
        a.append(forms.designer.fn.getObjectToolBar());
    } else {
        if (b.type === "mouseleave") {
            a.removeClass("selected");
            if (!a.hasClass("current")) {
                a.find("a.delete-element").remove()
                a.find("a.settings-element").remove()
                a.find("a.moveup-element").remove();
                a.find("a.movedown-element").remove();
            }
        }
    }
    return false
});
$("#form-title").on("hover", function (b) {
    b.stopImmediatePropagation();
    var a = $(this);
    if (b.type === "mouseenter") {
        a.css({
            border: "1px dashed #000000",


        })
    } else {
        if (b.type === "mouseleave") {
            a.css({
                border: "none",

              //  background: "#f5f5f5",
                "box-shadow": "none",
            })
        }
    }
    return false
});

$("#form-title").on("click", function (a) {
    a.stopImmediatePropagation;
    $('#collapse_1').collapse('show');
    $("div.row").removeClass("selected").removeClass("current").find("a.delete-element").remove();
    $("div.row").removeClass("selected").removeClass("current").find("a.settings-element").remove();
    $("div.row").removeClass("selected").removeClass("current").find("a.moveup-element").remove();
    $("div.row").removeClass("selected").removeClass("current").find("a.movedown-element").remove();
    $(this).css({
      //  "background-color": "#DFEFFC",
        "width": "100%",
        "box-shadow": "0 1px 3px rgba(0, 0, 0, 0.25)"
    });
    if ($("#app-settings .fa-angle-left").length > 0) {
        $("#app-settings.toolbar-section-toggle").click();
    }
    $(".app-toolbar ul").scrollTop($("#app-settings").position().top); //Moves to the top of this element


    $('#form-options-formname').focus();
    return false
});







//-------Page  settings

//Page background color
$('.colorpicker-default.pageBkColor').colorpicker().on('changeColor', function (ev) {
    //$("#main-column div.active li.selected").css("background", ev.color.toHex());
    //$("#main-column div.active li.selected").data("background", ev.color.toHex());

    //$(".nav-tabs li.active").css("background", ev.color.toHex());
    $(".nav-tabs li.active").data("stage-background", ev.color.toHex());
});

$("#stage-settings-accordion .relationship, #add_stage").live("click", function () {
    var list = new Array();
    var list1 = new Array();
    var activetab = $(".nav-tabs li.active");
    if ($("#ms-stage-options-relationship-children").length < 1) {

        $("#stage-options-relationship-children").multiSelect({
            afterSelect: function (values) {
                // alert(values[0]);
                list = $(".nav-tabs li.active").data("children") != undefined ? $(".nav-tabs li.active").data("children") : new Array();
                list.push(values[0]);
                $(".nav-tabs li.active").data("children", list);

            },
            afterDeselect: function (values) {
                list = $(".nav-tabs li.active").data("children") != undefined ? $(".nav-tabs li.active").data("children") : new Array();
                // alert(values[0]);
                var index = list.indexOf(values[0]);
                if (index > -1) {
                    list.splice(index, 1);
                }
                $(".nav-tabs li.active").data("children", list);
            }
        });
    }

    if ($(".nav-tabs li:not(:eq(0))").hasClass("active")) {
        $("#parent-items").show();
        forms.designer.fn.loadSectionSettings();
    }

    if ($("#ms-stage-options-relationship-parents").length < 1) {

        $("#stage-options-relationship-parents").multiSelect({
            afterSelect: function (values) {
                //alert(values[0]);
                list1 = $(".nav-tabs li.active").data("parents") != undefined ? $(".nav-tabs li.active").data("parents") : new Array();
                list1.push(values[0]);
                $(".nav-tabs li.active").data("parents", list1);
            },
            afterDeselect: function (values) {
                list1 = $(".nav-tabs li.active").data("parents") != undefined ? $(".nav-tabs li.active").data("parents") : new Array();
                //alert(values[0]);
                var index = list1.indexOf(values[0]);
                if (index > -1) {
                    list1.splice(index, 1);
                }
                $(".nav-tabs li.active").data("parents", list1);
            }
        });
    }
});

$(".nav-tabs li:eq(0).active").live("click", function () {
    $("#parent-items").hide();
});

$(".nav-tabs li:not(:eq(0))").live("click", function () {
    $("#parent-items").show();
});

$(".nav-tabs li").live("click", function () {
    forms.designer.fn.loadSectionSettings();
});

$("#ms-stage-options-relationship-parents .ms-selectable li").live("click", function () {

    var list1 = new Array();

    var selected = $("#stage-settings-panel #ms-stage-options-relationship-parents li.ms-selected:last").find("span").text();

    $("#stage-settings-panel #ms-stage-options-relationship-children div.ms-selectable li:contains(" + selected + ")").hide();


});

$("#ms-stage-options-relationship-children .ms-selectable li").live("click", function () {

    var list = new Array();


    var selected = $("#stage-settings-panel #ms-stage-options-relationship-children li.ms-selected:last").find("span").text();

    $("#stage-settings-panel #ms-stage-options-relationship-parents div.ms-selectable li:contains(" + selected + ")").hide();


});





$("#appAddAllobj").click(function () {
    if ($("#appAddAllobj").prop('checked')) {
        $("#dynamicform .tab-pane").each(function (tab_index, tab_element) {
            $(tab_element).find(".gridster-ul .gs-w").each(function (index, element) {
                $(element).find(".row").each(function (rowindex, rowelement) {
                    var objectRoles = [];
                    var approles = [];
                    if (($(rowelement).data("roles")) != undefined) {
                        objectRoles = $(rowelement).data("roles").toString().split(",");
                    }
                    if ($("#form-title").data("roles") != null) {
                        approles = $("#form-title").data("roles");//.toString().split(",");
                    }
                    for (var j = 0; j < objectRoles.length; j++) {
                        if (approles.indexOf(objectRoles[j]) < 0) {
                            approles[approles.length] = objectRoles[j];
                        }
                    }
                    $(rowelement).data("roles", approles);
                });
            });
        });
    }

});
$("#appReplaceAllobj").click(function () {
    if ($("#appReplaceAllobj").prop('checked') == true) {
        $("#dynamicform .tab-pane").each(function (tab_index, tab_element) {
            $(tab_element).find(".gridster-ul .gs-w").each(function (index, element) {
                $(element).find(".row").data("roles", $("#form-title").data("roles"));
            });
        });
    }
});

$("#appAddAllsec").click(function () {
    if ($("#appAddAllsec").prop('checked')) {
        $("#dynamicform .tab-pane").each(function (tab_index, tab_element) {
            $(tab_element).find(".gridster-ul .gs-w").each(function (rowindex, rowelement) {
                var objectRoles = [];
                var approles = [];
                if (($(rowelement).data("roles")) != undefined) {
                    objectRoles = $(rowelement).data("roles").toString().split(",");
                }
                if ($("#form-title").data("roles") != null) {
                    approles = $("#form-title").data("roles");
                }
                for (var j = 0; j < objectRoles.length; j++) {
                    if (approles.indexOf(objectRoles[j]) < 0) {
                        approles[approles.length] = objectRoles[j];
                    }
                }
                $(rowelement).data("roles", approles);
            });
        });
    }

});
$("#appReplaceAllsec").click(function () {
    if ($("#appReplaceAllsec").prop('checked') == true) {
        $("#dynamicform .tab-pane").each(function (tab_index, tab_element) {
            $(tab_element).find(".gridster-ul .gs-w").data("roles", $("#form-title").data("roles"));
        });
    }
});

$("#appAddAllstages").click(function () {
    if ($("#appAddAllstages").prop('checked')) {
        $("#dynamicform .nav-tabs li").each(function (tab_index, tab_element) {
            var objectRoles = [];
            var approles = [];
            if (($(tab_element).data("roles")) != undefined) {
                objectRoles = $(tab_element).data("roles").toString().split(",");
            }
            if ($("#form-title").data("roles") != null) {
                approles = $("#form-title").data("roles");
            }
            for (var j = 0; j < objectRoles.length; j++) {
                if (approles.indexOf(objectRoles[j]) < 0) {
                    approles[approles.length] = objectRoles[j];
                }
            }
            $(tab_element).data("roles", approles);

        });
    }

});
$("#appReplaceAllstages").click(function () {
    if ($("#appReplaceAllstages").prop('checked') == true) {
        $("#dynamicform .nav-tabs li").data("roles", $("#form-title").data("roles"));
    }
});

$("#element-options").on("click", "a.delete-option", function (a) {
    a.preventDefault();
    if ($('.form-options-more').length > 1) {
        var deletedElement = $(this).prev('input').val();
        var elementType = $("div.current span").attr("class");

        $(this).parent().fadeOut(200, function () {
            $("#duplicate-option").remove();
            $("#option-taken").remove();
            $(this).remove();

            switch (elementType) {
                case "dropDown":
                    //Remove item from designer dropdown
                    $("div.current select > option").each(function () {
                        if (this.text == deletedElement) {
                            this.remove();
                            return false;
                        }
                    });

                    //Remove from option name dropdown
                    $("form-options-name-select").each(function () {
                        if (this.text == deletedElement) {
                            this.remove();
                            return false;
                        }
                    });
                    break;
            }

            //remove error after delete
            $('div.current[data-error]').css('border', '3px dotted #9A9DA1 !important');
            $("div.current").removeAttr('data-error');

            //Check for empty values
            $('.form-options-more').each(function () {
                if (!$(this).val()) {
                    $("div.current").attr('data-error', 'empty');
                    $('div.current[data-error]').css('border', '3px dotted #FF0000');
                }
            });

            main.reloadElementOptions();
        });
    }
    else {
        $("#duplicate-option").remove();
        $("#option-taken").remove();
        $("#option-empty").remove();
        $('.form-options-more').nextAll().slice(2, 3).after("<span id='option-empty' style='color:#ff0000'> At least one Option is required.</span>");
        setTimeout('$("#option-empty").remove()', 4000);
    }
    return false;
});

$("#element-options").on("click", "a.move-option-up", function (a) {

    $(this).parent().insertBefore($(this).parent().prev());
    main.reloadElementOptions()
});

$("#element-options").on("click", "a.move-option-down", function (a) {
    if ($(this).parent().next().attr("id") != "form-options-more-add") {
        $(this).parent().insertAfter($(this).parent().next());
    }
    main.reloadElementOptions()
});


$("a.add-form-option").live("click", function (b) {
    b.preventDefault();

    var options = $('.form-options-more').map(function () {
        if ($(this).val().slice(0, 6) == 'Option')
            return $(this).val().slice(7);
    }).get();

    var top_num = Math.max.apply(Math, options);

    if (!isFinite(top_num)) {
        top_num = 1;
    }

    $("#form-options-more-add").before($(main.addOption("Option " + (top_num + 1))).fadeIn(200, function () {
        main.reloadElementOptions();
    }));

    //Resize widget and canvas to fit added elements
    ResizeWidget('.tab-content div.active li.selected', 2);
    forms.designer.fn.svgResize();

    return false;
});

/*function addFormOptions(element,value) {
    var options = $('.form-options-more').map(function () {
        if (element.val().slice(0, 6) == 'Option')
            return element.val().slice(7);
    }).get();

    var top_num = Math.max.apply(Math, options);

    if (!isFinite(top_num)) {
        top_num = 1;
    }

    $("#form-options-more-add").before($(main.addOption("Option " + (top_num + 1))).fadeIn(200, function () {
        main.reloadElementOptions();
    }));
}*/

//
// $('#element').donetyping(callback[, timeout=1000])
// Fires callback when a user has finished typing. This is determined by the time elapsed
// since the last keystroke and timeout parameter or the blur event--whichever comes first.
//   @callback: function to be called when even triggers
//   @timeout:  (default=1000) timeout, in ms, to to wait before triggering event if not
//              caused by blur.
// Requires jQuery 1.7+
//






/*$('#form-options-formname').donetyping(function () {
    if (checkAppName($(this)) == "allow") { }
    if ($('#application-settings-panel .error').length == 0)
        if (checkAppName($(this)) == "allow") { }
        else {
            $("#main-column").prepend(' <div class="alert alert-danger alert-dismissible" id="stage-empty" role="alert" style="">' +
                            '<span class="message"><strong>Error!</strong> You must add at least one item to this form before you can save it.</span></div>');
            setTimeout('$("#stage-empty").remove()', 8000);
        }
});*/

function isEmpty(value) {
    return typeof value == 'string' && !value.trim() || typeof value == 'undefined' || value === null;
}



$("#form-options").on("keyup", "#form-options-url", function () {
    var a = $(this).val();
    $("#main-column #form-id").attr("value", a)
});
$("#form-options").on("change", "#form-options-type", function () {
    var a = $(this).val();
    $("#main-column form").attr("method", a)
});
$(function () {
    $("#form-options-formname, #form-options-appname").val($("#form-title").html());
    $("#form-options-url").val($("#main-column form").attr("action"))
});

$(".preview").click(function () {

    $("#preview-form").html($(".grid-container").html());
    $("#stack3 h4").html($("#form-title").html() + ' Preview');

    jQuery('#stack3 li.gs-w').removeClass('selected');
    jQuery('#stack3 li.gs-w').addClass('unselected');
});

$(".close").click(function () {
    $("div.modal-backdrop").remove();
});

$(".modal-footer .btn").click(function () {
    $("div.modal-backdrop").remove();
});

$('.colorpicker-default.buttonbgcolor').colorpicker().live('changeColor', function (ev) {
    $("#main-column div.active li.selected .row.current .btn").removeClass("blue");
    $("#main-column div.active li.selected .row.current .btn").css("background", ev.color.toHex());
    var f = $("#main-column div.active li.selected .row.current").find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });
    e.validate.button_bgcolor = ev.color.toHex();
    f.attr("data", $.toJSON(e));
});
$('.colorpicker-default.buttonfontcolor').colorpicker().live('changeColor', function (ev) {
    $("#main-column div.active li.selected .row.current .btn").css("color", ev.color.toHex());
    var f = $("#main-column div.active li.selected .row.current").find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });
    e.validate.button_fontcolor = ev.color.toHex();
    f.attr("data", $.toJSON(e));
});

$('.colorpicker-default.buttonbordercolor').colorpicker().live('changeColor', function (ev) {
    $("#main-column div.active li.selected .row.current .btn").css("border", $(".buttonborderstyle").val() + " " + $(".buttonborderwidth").val() + " " + ev.color.toHex());
    var f = $("#main-column div.active li.selected .row.current").find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });
    e.validate.button_border = $(".buttonborderstyle").val() + " " + $(".buttonborderwidth").val() + " " + ev.color.toHex();
    f.attr("data", $.toJSON(e));
});

$(".buttonborderstyle").live("change", function () {
    buildbuttonborder();
});
$(".buttonborderwidth").live("change", function () {
    buildbuttonborder();
});

function buildbuttonborder() {
    $("#main-column div.active li.selected .row.current .btn").css("border", $(".buttonborderstyle").val() + " " + $(".buttonborderwidth").val() + " " + $(".colorpicker-default.buttonbordercolor .form-control:first").val());
    var f = $("#main-column div.active li.selected .row.current").find("span");
    var e = f.metadata({
        type: "attr",
        name: "data"
    });
    e.validate.button_border = $(".buttonborderstyle").val() + " " + $(".buttonborderwidth").val() + " " + $(".colorpicker-default.buttonbordercolor .form-control:first").val();
    f.attr("data", $.toJSON(e));
}

//section background color
$('.colorpicker-default.bkcolor').colorpicker().on('changeColor', function (ev) {
    $("#main-column div.active li.selected").css("background", ev.color.toHex());
    $("#main-column div.active li.selected").data("background", ev.color.toHex());
});

//font color
$('.colorpicker-default.fontcolor').colorpicker({
    color: $(".section-text").val()
}).on('changeColor', function (ev) {
    $("#main-column div.active li.selected").css("color", ev.color.toHex());
    $("#main-column div.active li.selected").data("textcolor", ev.color.toHex());
});

$("a.delete-option").live("hover", function (b) {
    b.stopImmediatePropagation();
    var a = $(this);
    if (b.type === "mouseenter") {
        a.addClass("close-link-hover")
    } else {
        if (b.type === "mouseleave") {
            a.removeClass("close-link-hover")
        }
    }
    return false
});
$("#form-options-email-user").change(function () {
    if ($(this).prop("checked")) {
        $("#form-options-email-options").show();
        adjustContainerHeight()
    } else {
        $("#form-options-email-options").hide();
        adjustContainerHeight()
    }
});
$("#form-options-email-smtp").change(function () {
    if ($(this).prop("checked")) {
        $("#form-options-email-smtpserver").show();
        adjustContainerHeight()
    } else {
        $("#form-options-email-smtpserver").hide();
        adjustContainerHeight()
    }
});
$("#form-options-db-savedata").change(function () {
    if ($(this).prop("checked")) {
        $("#form-options-db-options").show();
        adjustContainerHeight()
    } else {
        $("#form-options-db-options").hide();
        adjustContainerHeight()
    }
});
$('#left-column li:eq(0) a, #left-column li:eq(2) a ').click(function () {
    $('#element-options').hide();
});
$('#left-column li:eq(1) a').click(function () {
    $('#element-options').fadeIn(200);
});
$('#collapse_1').collapse('show');



function enablePage() {
    $(".builder-container").css({ "opacity": "", "pointer-events": "" });
}
function disablePage() {
    //$(".builder-container *").attr("readonly", true);
    $(".builder-container").css({ "opacity": "1", "pointer-events": "none" });
}



$('.form-preview-btn').on("click", function () {
    if ($("#main-column div.row").length > 0) {

    } else {
        alert("You must add at least one field to your form before you can preview it.");
    }
});




$(document).ready(function () {


    jQuery('#main-column li.gs-w').live('click', function () {

        //Deselect form object
        $(".active li").removeClass("selected");
        $("div.row").removeClass("current");
        $("div.row").find("a.delete-element").remove();
        $("div.row").find("a.settings-element").remove();
        $("div.row").find("a.moveup-element").remove();
        $("div.row").find("a.movedown-element").remove();
        $("#form-title").css({
            //"background-color": "#f5f5f5",
            "box-shadow": "none"
        });

        jQuery('li.gs-w').removeClass('selected');
        jQuery('li.gs-w').addClass('unselected');
        jQuery(this).removeClass('unselected');
        jQuery(this).addClass('selected');
        forms.designer.fn.loadSectionSettings();

    });

    if ($('.RichCkeditor').length > 0) {

        $('.RichCkeditor').each(function (a, b) {

            CKEDITOR.replace($(b).attr("id"), {
                customConfig: '/assets/global/plugins/ckeditor/RichTextConfig.js'
            });

        });
    }

    $("[class='tooltips']").tooltip();



    /* $('a.form-autosave-btn').on("click", function (e) {
         if ($(this).text().trim() == "Auto-save On") {
             if ($("#builder-body").length > 0) {
                 AutoSaveCounter = setTimeout('autosavebuilder()', 120000);
             }
             $("#auto-save").remove();
             $("#main-column").prepend(' <div class="alert alert-success alert-dismissible" id="auto-save" role="alert" style="">' +
                      '<span class="message"><strong>Success!</strong> Auto save is enabled.</span></div>');
             setTimeout('$("#auto-save").remove()', 5000);
             $(this).html('  <i class="fa fa-anchor white" style=""></i> ' +
                        ' <span class="toolbar-section-title" style="float:left;font-size:11px;" >Auto-save Off</span>');
         } else {
             if ($("#builder-body").length > 0) {
                 clearTimeout(AutoSaveCounter);
             }
             $("#auto-save").remove();
             $("#main-column").prepend(' <div class="alert alert-success alert-dismissible" id="auto-save" role="alert" style="">' +
                      '<span class="message"><strong>Success!</strong> Auto save is disabled.</span></div>');
             setTimeout('$("#auto-save").remove()', 5000);
             $(this).html(' <i class="fa fa-anchor white" style=""></i> ' +
                        ' <span class="toolbar-section-title" style="float:left;font-size:11px;" >Auto-save On</span>');
         }
     });*/
});

$(window).on('load', function () {
    if ($("#builder-body").length > 0) {
        //AutoSaveCounter = setTimeout('autosavebuilder()', 2000);
    }
});


function autosavebuilder() {
    if ($(".gridster div.row").length > 0 && $(".gridster li").length > 0 && $("#form-title").text() != "New Design") {
        $("#stage-saved").remove();

        var current_save = JSON.stringify(forms.designer.fn.getDesignerJSON()).replace(/,"rendition":[0-9]+/, '').replace(/"parent_id":"(\d+)"/g, '').replace(/\s/g, '');

        if (last_save == undefined)
            last_save = current_save;

        if (last_save != current_save) {
            loading = false;
            last_save = current_save;
            $('.form-save-btn').trigger("click");
        }
        else { }
    }

    AutoSaveCounter = setTimeout('autosavebuilder()', 180000);
}



