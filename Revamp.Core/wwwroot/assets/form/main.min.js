/// <reference path="main.min.js" /> 

function getObjectInfo(type, seflessMeta) {
    seflessMeta = typeof seflessMeta == "object" && typeof seflessMeta != "undefined" ? seflessMeta : {};
    var thisID = main.GetUniqueID(type, type);
    var thisObjectName = type + "_" + thisID;
    var initialUUID = Math.uuid();

    return {
        thisObjectType: type,
        thisID: thisID,
        id: thisObjectName,
        name: thisObjectName,
        label: thisObjectName,
        uuid: initialUUID,
        baseuuid: seflessMeta.base_object_sets_uuid != null ? seflessMeta.base_object_sets_uuid : 'NEW-BASE-' + initialUUID,
        prevuuid: seflessMeta.object_sets_uuid != null ? seflessMeta.object_sets_uuid : 0,
        disabled: true,
        required: seflessMeta.required,
        showlabel: seflessMeta.show_label != null ? seflessMeta.show_label : "true"
    }
}

function getObjectOptionsInfo(objectData) {
    var controlContainer = objectData.children("span:first");
    var control = controlContainer.find("input,select,textarea,div,label,img,table");
    var controlLabel = objectData.children("label").text().replace('*', '');
    var ckeditorContent = objectData.children("div.ckeditor-output");
    var objectMetaData = JSON.parse(objectData.find("span[data]").attr('data'));

    return {
        controlId: controlContainer.attr("id"),
        controlLabel: controlLabel,
        idReadOnly: main.isIdReadOnly(controlContainer, control) ? 'readonly' : '',
        ckeditorContent: ckeditorContent.html(), 
        listOptions: main.getControlListOptions(controlContainer, objectMetaData.validate.object_type),
        listNameOptions: main.getControlListNameOptions(controlContainer, objectMetaData.validate.object_type),
        bindItems: main.getBindItems(objectMetaData), 
        listValueOption: controlContainer.find('select > option').val() ? controlContainer.find('select > option').val() : '',
        statusMessage: objectData.find("span[data]").data("status_message"),
        imageSrc: main.getImageOptionSrc(controlContainer),
        imageWidth: controlContainer.find("img").attr("width"),
        imageHeight: controlContainer.find("img").attr("height"),
        newButtonGroup: main.getNewFileButtons(controlContainer),
        existingButtonGroup: main.getExistingFileButtons(controlContainer),
        options: objectMetaData.validate,
    }
}

var main = {
    options: {
        mainDiv: "main-column",
        optionsDiv: "element-options",
        showFlowOptions: "left-column",
        mainFlowDiv: "dynamic-flow",
        optionsFlowDiv: "element-options",
        leftFlowDiv: "left-column-flow"
    },
    cache: null,
    objectInfo: null,
    isIdReadOnly: function (controlContainer, control) {

        //Check to see if id should be readonly
        if (controlContainer.attr("id") != undefined) {
            if ((controlContainer.data("disabled") == true) ||
                (control.data("prevuuid") && control.data("prevuuid") != 0) ||
                (controlContainer.data("prevuuid") && controlContainer.data("prevuuid") != 0)) {
                return true;
            }
        }

    },
    setButtonOptions: function (objectMetaData) {
        var btn_width = "90";
        var btn_height = "90";

        if ($('.row.current .btn').css('width') != undefined)
            btn_width = $('.row.current .btn').css('width').replace('px', '');

        if ($('.row.current .btn').css('height') != undefined)
            btn_height = $('.row.current .btn').css('height').replace('px', '');

        //Set Width
        $("#width-slider").slider({
            value: btn_width,
            min: 20,
            max: 400,
            step: 20,
            slide: function (event, ui) {
                $("#width-amount").html("Button Width: " + ui.value);
                $("div.current").find("button").css("width", $("#width-slider").slider("value") + "px");
            }
        });
        $("#width-amount").html("Button Width:  " + btn_width);

        //Set Height
        $("#height-slider").slider({
            value: btn_height,
            min: 20,
            max: 100,
            step: 10,
            slide: function (event, ui) {
                $("#height-amount").html("Button Height: " + ui.value);
                $("div.current").find("button").css("height", $("#height-slider").slider("value") + "px");
            }
        });
        $("#height-amount").html("Button Height:  " + btn_height);

        if (objectMetaData.validate.button_border) {
            //Set button border style
            $("#buttonBorderStyle").val(objectMetaData.validate.button_border.split(" ")[0]);

            //Set button border width
            $("#buttonborder").val(objectMetaData.validate.button_border.split(" ")[1]);

            //Set button border color
            $("#buttonbordercolor input.buttonbordercolor").val(objectMetaData.validate.button_border.split(" ")[2]);
            $('#buttonbordercolor').colorpicker('setValue', objectMetaData.validate.button_border.split(" ")[2]);
        }

        if (objectMetaData.validate.button_bgcolor) {
            $('#buttonbgcolor').colorpicker('setValue', objectMetaData.validate.button_bgcolor);
        }

        if (objectMetaData.validate.button_fontcolor) {
            $('#buttonfontcolor').colorpicker('setValue', objectMetaData.validate.button_fontcolor);
        }
    },
    setPermissions: function () {

        var afterObjectRolesReceivedAlways = function (uObjectSettings) {
            $('#form-options-user-access .loumultiselect').multiSelect({
                afterSelect: function (values) {
                    var ro = [];
                    if ($("#main-column div.active div.current").data("roles") != undefined && $("#main-column div.active div.current").data("roles") != "") {
                        ro = $("#main-column div.active div.current").data("roles").toString().split(',');
                    }
                    var val = values.toString().split(',');

                    $(val).each(function (index, item) { ro.push(item); });
                    var ro1 = $.unique(ro.sort())
                    $("#main-column div.active div.current").data("roles", ro1);
                },
                afterDeselect: function (values) {
                    if (values != null) {
                        var ro = [];
                        if ($("#main-column div.active div.current").data("roles") != undefined && $("#main-column div.active div.current").data("roles") != "") {
                            ro = $("#main-column div.active div.current").data("roles");
                        }
                        var index = ro.indexOf(values.toString());
                        if (index > -1) {
                            ro.splice(index, 1);
                        }
                    }
                }
            });

            if ($("#main-column div.active div.current").data("roles") != undefined) {
                $('#form-options-user-access .loumultiselect').multiSelect('deselect_all');
                var ro = [];
                ro = $("#main-column div.active div.current").data("roles");
                $('#form-options-user-access .loumultiselect').multiSelect('select', ro);

            }
            else {
                $('#form-options-user-access .loumultiselect').multiSelect('deselect_all');

            }
        }

        var afterObjectRolesReceived = function (uObjectSettings) {
            var roles = uObjectSettings.response;
            var existingRoles = [];
            if ($("#main-column div.active div.current").data("roles") != undefined && $("#main-column div.active div.current").data("roles") != "") {
                existingRoles = $("#main-column div.active div.current").data("roles").toString().split(',');
            }

            $("#form-options-user-access-select").html("");

            var thisFetchHtml = '';
            for (var i = 0; roles.length > i; i++) {
                var selected = _.includes(existingRoles, roles[i].roles_uuid) ? "selected" : "";
                thisFetchHtml += '<option value="' + roles[i].roles_uuid + '" ' + selected + '>' + roles[i].role_name + '</option>';
            }

            $("#form-options-user-access-select").append(thisFetchHtml);
        }

        var uObjectSettings = typeof uObjectSettings === 'object' && uObjectSettings != undefined ? uObjectSettings : {};

        uObjectSettings.data = { id: forms.core.cores_uuid };
        uObjectSettings.options = uObjectSettings.options == undefined ? {} : uObjectSettings.options;
        uObjectSettings.options.async = true;
        uObjectSettings.options.url = "/forms/designerjson/sendroles";
        uObjectSettings.options.callBack = function (uObjectSettings) {
            afterObjectRolesReceived(uObjectSettings)
        }
        uObjectSettings.options.always = function (uObjectSettings) {
            afterObjectRolesReceivedAlways(uObjectSettings);
        };

        if (forms.designer.fn.getLoadedRoles().response.length > 0) {
            afterObjectRolesReceived(forms.designer.fn.getLoadedRoles());
            afterObjectRolesReceivedAlways(forms.designer.fn.getLoadedRoles());
        }
        else {
            ajaxDynamic(uObjectSettings);
        }

        if ($("#element-options #form-options-num-objects").length > 0) {

            var a = $("div.current").find("span:first").metadata({
                type: "attr",
                name: "data"
            });

            if (a.validate.num_objects != undefined) {
                $.each(a.validate.num_objects, function (i, e) {
                    $("#form-options-user-access-select option[value='" + e + "']")
                    $("#form-options-num-objects option[value='" + e + "']").prop("selected", "true");

                });
            }
        }
    },
    setConditionalLogic: function (objectMetaData) {
        var w = "";
        var num = objectMetaData.validate.conditions;
        for (var i = 1; i < num; i++) {
            var id = i;
            w = '<div class="condition"><select id="field_rule_field_' + id + '" style="width:100px;" class="field_rule_field" onchange="GetRuleValues(' + id + ',jQuery(this).val());">' + $("#field_rule_field").html() + '</select> ';
            w += '<select id="field_rule_operator_' + id + '"  style="width:110px;" onchange="SetRuleProperty(' + id + ',\'operator\',jQuery(this).val());"><option value="is" selected="selected">is</option><option value="isnot">is not</option><option value="&gt;">greater than</option><option value="&lt;">less than</option><option value="contains">contains</option><option value="starts_with">starts with</option><option value="ends_with">ends with</option></select> ';
            w += '<select style="width:120px;" id="field_rule_option_' + id + '" display="none" onchange="SetRuleProperty(' + id + ',\'option\',jQuery(this).val());"></select><input id="field_rule_option_' + id + '"  value="" placeholder="Enter a value" style="display:none;height:25px;width:105px;" onkeyup="SetRuleProperty(' + id + ',\'option\',jQuery(this).val());"/>';
            w += '<a class="btn mini plus" id="plus" href=# style="vertical-align:top;"><i class="icon-plus" style="font-size:18px"></i></a> <a class="btn mini minus" id="minus" href=# style="vertical-align:top;"><i class="icon-close" style="font-size:18px"></i></a></div>'
            $(".form-options-conditions").append(w);
        }
    },
    populateIdentities: function (selectControl, selectedItem) {
        var model = typeof model === 'object' && model != undefined ? model : {};
        var dropDownHtml = '';

        //Preloader
        $(selectControl).append('<option >Loading...</option>');

        model.options = model.options == undefined ? {} : model.options;
        model.options.async = true;
        model.options.url = "/cores/collectionsjson/getidentities";
        model.options.callBack = function (model) {
            
            var identities = model.response;
            
            $.each(identities, function (i, item) {
                if (selectedItem == item) {
                    dropDownHtml += '<option value=' + item + ' selected>' + item + '</option>';
                }
                else {
                    dropDownHtml += '<option value=' + item + '>' + item + '</option>';
                }
            });

            if (selectControl) {
                $(selectControl).empty();
                $(selectControl).append(dropDownHtml);
            }
        }

        ajaxDynamic(model);
    },
    getBindItems: function (object) {
        var bindItems = '';

        //Get bind items
        $("#main-column .nav-tabs li").find("a:first").each(function (index, element) {
            if (object.validate.bind_stage == index) {
                bindItems += "<option value='" + index + "' selected>" + $(element).text() + "</option>";
            }
            else {
                bindItems += "<option value='" + index + "'>" + $(element).text() + "</option>";
            }
        });

        return bindItems;
    },
    getNewFileButtons: function (controlContainer) {
        var classType;

        if (controlContainer.find('img').attr('src') != '/Images/No_image67x50.gif') {
            classType = 'fileinput-exists';
        }
        else {
            classType = 'fileinput-new';
        }

        return classType;
    },
    getExistingFileButtons: function (controlContainer) {
        var classType;

        if (controlContainer.find('img').attr('src') != '/Images/No_image67x50.gif') {
            classType = 'fileinput-new';
        }
        else {
            classType = 'fileinput-exists';
        }
        return classType;
    },
    getImageOptionSrc: function (controlContainer) {
        var image_src;

        if (controlContainer.find("img").attr("src") != "/Images/No_image67x50.gif") {
            image_src = controlContainer.find("img").attr("src");
        }
        else {
            image_src = "/Images/No_image.gif";
        }

        return image_src;
    },
    getControlListOptions: function (controlContainer, objectType) {
        var listOptions = '';

        //Get list options
        switch (objectType.toLowerCase()) {
            case "dropdown":
                controlContainer.find("option").each(function () {
                    listOptions += main.addOption($(this).html());
                });
                break;
            case "checkboxgroup":
            case "radiobutton":
                controlContainer.find("input").each(function () {
                    listOptions += main.addOption($(this).val());
                });
                break;
        }
        
        return listOptions;
    },
    getControlListNameOptions: function (controlContainer, objectType) {
        var listOptions = '';

        //Get list Name options
        switch (objectType.toLowerCase()) {
            case "dropdown":
                listOptions = controlContainer.find("select").html();
                break;
            case "checkboxgroup":
            case "radiobutton":
                //controlContainer.find("input").each(function () {
                //    listOptions += "<option value='" + $(this).val() + "' >" + $(this).val() + "</option>";
                //});
                break;
        }

        return listOptions;
    },
    addElement: function (objectType, id, order, seflessMeta) {
        seflessMeta = typeof seflessMeta == "object" && typeof seflessMeta != "undefined" ? seflessMeta : {};

        //e = e.replace("formObject ", "");
        var controlRootContainer = this.hasOwnProperty(objectType) ? $(this[objectType](seflessMeta)) : null;
        var controlContainer = controlRootContainer.find("span:first");
        var containerData = controlContainer.metadata({
            type: "attr",
            name: "data"
        });

        containerData.validate.order = order; //??

        controlContainer.attr("data", $.toJSON(containerData));

        $("#" + this.options.mainDiv + " form").find("#no-fields").remove(); //??

        if ($('#main-column div.active li.selected').length > 0) {
            $("#main-column div.active li.selected").append(controlRootContainer.fadeIn(400));
        }
        else {
            if ($('#main-column div.active li.unselected').length > 0)
                alert("Please select a section.");
        }

        $("div.row").removeClass("current").find("a.delete-element").remove();
        $("div.row").removeClass("current").find("a.settings-element").remove();
        $("div.row").removeClass("current").find("a.moveup-element").remove();
        $("div.row").removeClass("current").find("a.movedown-element").remove();
        $("#form-name").css({
            "background-color": "#FFF",
            "box-shadow": "none"
        });

        controlRootContainer.addClass("current").append('<a class="delete-element" ><img class="er_icon_small erwhite" src="/assets/img/flat-icons/font-awesome/svg/trash29.svg"  /></a><a class="settings-element" data-target="#stack2" data-toggle="modal" ><img class="er_icon_small erwhite" src="/assets/img/flat-icons/font-awesome/svg/cog2.svg" /></a><a class="moveup-element" ><img class="er_icon_small erwhite" src="/assets/img/flat-icons/font-awesome/svg/arrow459.svg" /></a><a class="movedown-element" ><img class="er_icon_small erwhite" src="/assets/img/flat-icons/font-awesome/svg/angle1.svg"  /></a>');

        $("#element-options a.tooltips").tipsy({
            gravity: "w",
            fade: true
        });
    },
    addFlowStep: function (e) {
        var d = this.hasOwnProperty(e) ? this[e]() : null;
        var c = $(d);
        var a = c.find("span");
        var f = a.metadata({
            type: "attr",
            name: "data"
        });
        a.attr("data", $.toJSON(f));
        $("#" + this.options.mainFlowDiv).find("#no-fields").remove();
        $("#" + this.options.mainFlowDiv).append(c.fadeIn(400));

        c.find("div.string").addClass("currentStep");


        if (d != null) {
            this.showFlowOptions(c)
        }
        // var b = parseInt($("#left-column").css("top").replace("px", "")) + parseInt($("#left-column").height() + 250);
        $("form").sortable({
            items: "div.row",
            revert: true,
            containment: '#dynamic-flow',
            scroll: true
        });
        $("div.row").removeClass("current").find("a.delete-element").remove();
        $("#form-name").css({
            "background-color": "#FFF",
            "box-shadow": "none"
        });

        c.addClass("current").append('<a class="delete-element" ><span class="close" style="min-height:0px;">delete</span></a>');
        c.find(".flow-step-if").addClass("currentStep");

        //$("#element-options a.tooltips").tipsy({
        //    gravity: "w",
        //    fade: true
        //});

    },
    addFlowElement: function (e) {
        var d = this.hasOwnProperty(e) ? this[e]() : null;
        var c = $(d);
        var a = c.find("span");

        $("#" + this.options.mainFlowDiv + " form").find("#no-fields").remove();
        $(".currentStep > ul.btn-bar").append(c.fadeIn(400));


        if (d != null) {
            if (c.attr("class") == "stepButton") {
                this.showFlowOptions(c.find("div:first"));
            } else {

                this.showFlowOptions(c)
            }
        }

        // var b = parseInt($(".currentStep").css("top").replace("px", ""));
        $(c).find(".btn:last").popover({
            html: true,
            trigger: 'manual',
            content: function () {
                return $('#element-options').html();
            }

        });


        $(".btn-bar").sortable({
            items: ".stepButton",
            revert: true,
            containment: "div.currentStep",
            scroll: false
        });

    },
    removeElement: function (a) {
        $("#" + a).parent().remove()
    },
    editElement: function (a) { },
    showOptions: function (objectData) {
        this.cache = objectData;
        var optionsHtml;
        var controlContainer = objectData.children("span:first");
        var objectMetaData = JSON.parse(objectData.find("span[data]").attr('data'));
        var objectType = objectMetaData.validate.object_type;

        main.objectInfo = getObjectOptionsInfo(objectData);

        //Get form item name
        var item = main.reverseLookUp(objectType);

        //Get form item options HTML
        if (designerObjectOptions.hasOwnProperty(item)) {
            optionsHtml = designerObjectOptions[item](main.objectInfo);
        }

        //Show object options
        $("#object-settings-accordion").fadeIn(100, function () {
            $(this).html(optionsHtml);

            switch (objectType.toLowerCase()) {
                case 'dropdown':
                    //Get status item selections
                    if ($('#form-options-status-check').is(':checked')) {
                        $('#form-options-status-type-select').trigger('change');
                        //main.populateIdentities('#form-options-status-identity-select', objectMetaData.validate.status_identity);
                    }
                    break;
                case 'addImage':

                    break;

                case 'button':
                    //Configure button control options
                    if (objectType == 'button') {
                        main.setButtonOptions(objectMetaData);
                    }
                    break;
                case 'textlabel':
                case 'richtext':
                    //Initialize ckeditor
                    if (controlContainer.siblings('div.ckeditor-output').length > 0 && $("#form-options-label").length > 0) {
                        $('textarea.form-options-label').ckeditor();
                    }
                    break;
            }

            $("#back-to-objects").on("click", "a", function (a) {
                $('#form-elements').show();
                $('#element-options').hide();
            });

            $("#back-to-objects-img").on("click", "a", function (a) {
                $('#image-options').hide();
                $('#element-options').show();
            });

            $(".objects-button").on("click", function (a) {
                $('#form-elements').show();
                $('#element-options').hide();
            });

            //Set Conditional logic
            if (objectMetaData.validate.condition != undefined) {
                main.setConditionalLogic(objectMetaData);
            }

            PopulateFormFieldNames();

            //Setup Permissions
            main.setPermissions();

            
        });
    },
    showFlowOptions: function (c) {
        this.cache = c;
        var j, d;
        if (c.attr("class") != "row") {

            j = c.attr("class");
            f = c.attr("name");
            d = '<label>Name <a class="tooltips"  data-placement="right" data-original-title="The name of the form item which you use at the server end to access the data submitted to the server.">(?)</a></label>';

        } else {
            //    var a = c.children("span");
            //    j = a.attr("class");
            //    d = '<label>Label <a class="tooltips"  data-placement="right" data-original-title="A field\'s label is the most direct way of telling your user what kind of data  should be entered into a particular field. Field labels are usually just one or two words,  but can also be a question.">(?)</a></label>';
            //    f = c.children("label");
            //    d += '<input type="text" id="form-options-label"  value="' + f.html().replace('<div class="rqrd">*</div>', "") + '"/>';
            //    d += '<label>Name <a class="tooltips"  data-placement="right" data-original-title="The name of the form field which you use at the server end to access the data submitted to the server.">(?)</a></label>';
        }

        switch (j) {
            case "step":
                f = c.find("label");
                d += '<input type="text" id="flow-options-name"  value="' + a.attr("name") + '"/>';
                break;
            case "actor":
                d += '<input type="text" id="form-options-name" value="' + c.attr("id") + '"/>';
                d += '<label>Actor Type <a class="tooltips"  data-placement="right" data-original-title="The type of actor can be a person,role or group. You can also have the system perform actions.">(?)</a></label>';
                if (!c.data("type")) {
                    d += '<select type="text" style="width:170px;display:block;" id="flow-options-type"><option value="Select">Select an Actor</option> <option value="system">System</option><option value="person">Person</option><option value="role">Role</option><option value="group">Group</option></select>';
                    d += '<select type="text" style="width:170px;display:none;" id="flow-options-person" > <option value="Select">Select a Person</option><option value="Jose Risi">Jose Risi</option><option value="Isaac Barnes">Isaac Barnes</option></select>';
                    d += '<select type="text" style="width:170px;display:none;" id="flow-options-role" > <option value="Select">Select a Role</option><option value="Admin">Admin</option><option value="Worker">Worker</option><option value="Employee">Employee</option></select>';
                    d += '<select type="text" style="width:170px;display:none;" id="flow-options-group" > <option value="Select">Select a Group</option><option value="Admins">Admins</option><option value="Managers">Managers</option><option value="Employees">Employees</option></select>';

                }
                else {
                    d += '<select type="text" style="width:170px;display:block;" id="flow-options-type"><option value="Select">Select an Actor</option> <option value="system">System</option><option value="person">Person</option><option value="role">Role</option><option value="group">Group</option></select>';
                    d += '<select type="text" style="width:170px;display:none;" id="flow-options-person" > <option value="Select">Select a Person</option><option value="Jose Risi">Jose Risi</option><option value="Isaac Barnes">Isaac Barnes</option></select>';
                    d += '<select type="text" style="width:170px;display:none;" id="flow-options-role" > <option value="Select">Select a Role</option><option value="Admin">Admin</option><option value="Worker">Worker</option><option value="Employee">Employee</option></select>';
                    d += '<select type="text" style="width:170px;display:none;" id="flow-options-group" > <option value="Select">Select a Group</option><option value="Admins">Admins</option><option value="Managers">Managers</option><option value="Employees">Employees</option></select>';
                }
                break;
            case "action":
                d += '<input type="text" id="form-options-name" value="' + c.attr("id") + '"/>';
                d += '<label>Action Type <a class="tooltips"  data-placement="right" data-original-title="The type of action you want to occur.">(?)</a></label>';
                d += '<select type="text" style="width:170px;display:block;" id="flow-options-action-type"> <option value="select">Select Action</option><option value="submit">On Submit</option><option value="notify">Notification</option><option value="remind">Reminder</option><option value="execute">Execute</option></select>';
                d += '<select type="text" style="width:170px;display:none;" id="flow-options-submit"> <option value="select">Select Page</option><option value="stage1">Page 1</option><option value="stage2">Page 2</option><option value="stage3">Page 3</option></select>';
                d += '<select type="text" style="width:170px;display:none;" id="flow-options-step"> <option value="select">Select Step</option></select>';

                d += '<div id="flow-option-remind-container" style="display:none;" ><input type="text" placeholder="Click to add a date." value="" id="flow-options-remind" /><span class="add-on"><i class="icon-calendar"></i></span></div>';
                break;

            case "and":
                d += '<input type="text" id="form-options-name" value="' + c.attr("id") + '"/>';

                break;
            case "or":
                d += '<input type="text" id="form-options-name" value="' + c.attr("id") + '"/>';
                break;
            default:

                //  d += '<input type="text" id="flow-options-name" value="' + a.attr("class") + '"/>';
                break;
        }
        $("#element-options").fadeOut(300, function () {
            $(".currentButton a.btn").attr("data-content", d);
            //$(this).html(d);

            // $('#left-column li:eq(1) a').tab('show')
            // $(this).fadeIn(300)
        });
    },
    addOption: function (a) {
        return '<div><input type="text" class="form-options-more" value="' + a + '" /> <a tabindex="-1" class="delete-option" ><span class="close-link-span" style="min-height:0px;">delete</span></a><a tabindex="-1" class="move-option-up" ><span class="up-link-span" style="min-height:0px;">up</span></a><a <a tabindex="-1" class="move-option-down" ><span class="down-link-span" style="min-height:0px;">down</span></a></div>'
    },

    textField: function (seflessMeta) {
        var theseProps = getObjectInfo("textField", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Text_Box(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    signature: function (seflessMeta) {
        var theseProps = getObjectInfo("signature", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Signature(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    textArea: function (seflessMeta) {

        var theseProps = getObjectInfo("textArea", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Text_Area(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    password: function (seflessMeta) {
        var theseProps = getObjectInfo("password", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Password(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    dropDown: function (seflessMeta) {
        var theseProps = getObjectInfo("dropDown", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Drop_Down(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    textLabel: function (seflessMeta) {
        var theseProps = getObjectInfo("textLabel", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Text(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    sharedObject: function () {
        var a = '<span id="{id}" class="sharedObject" data="{validate:{required:false,messages:{},conditional:false, show_label:true}}"><h1 name="{name}" style="display:none;"></h1><div id="{id}" style="display:none;" name="{name}"></div></span><label class="{id}" for="{name}" style="">{label}</label>';
        return main.commonHTML(a, "sharedObject")
    },
    radioButton: function (seflessMeta) {
        var theseProps = getObjectInfo("radioButton", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Radio_Button(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    checkBoxGroup: function (seflessMeta) {
        var theseProps = getObjectInfo("checkBoxGroup", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Check_Box(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    number: function (seflessMeta) {
        var theseProps = getObjectInfo("number", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Number(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    total: function (seflessMeta) {
        var theseProps = getObjectInfo("total", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Total(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    email: function (seflessMeta) {
        var theseProps = getObjectInfo("email", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Email(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    decimal: function (seflessMeta) {
        var theseProps = getObjectInfo("decimal", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Decimal(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    currency: function (seflessMeta) {
        var theseProps = getObjectInfo("currency", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Currency(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    url: function (seflessMeta) {
        var theseProps = getObjectInfo("url", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Url(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    date: function (seflessMeta) {
        var theseProps = getObjectInfo("date", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Date(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    time: function (seflessMeta) {
        var theseProps = getObjectInfo("time", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Time(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    phone: function (seflessMeta) {
        var theseProps = getObjectInfo("phone", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Phone(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    creditCard: function () {
        /*var theseProps = getObjectInfo("creditCard");

        var textboxHtml = forms.designer.fn.getObjects().creditCard(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);*/
    },
    fileUpload: function (seflessMeta) {
        var theseProps = getObjectInfo("fileUpload", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().File_Upload(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    addImage: function (seflessMeta) {
        var theseProps = getObjectInfo("addImage", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Image(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    richText: function (seflessMeta) {
        var theseProps = getObjectInfo("richText", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Rich_Text(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    link: function (seflessMeta) {
        var theseProps = getObjectInfo("link", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Link(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    button: function (seflessMeta) {
        var theseProps = getObjectInfo("button", seflessMeta);

        var textboxHtml = forms.designer.fn.getObjects().Button(theseProps);

        return main.commonHTML2(textboxHtml, theseProps.thisObjectType);
    },
    viewTable: function () {
        var a = '<label class="{id}" for="{name}">{label}</label><span id="{id}" class="viewTable" data="{validate:{required:false,messages:{},conditional:false, show_label:true}}">';
        a += '<table id="{id}" name="{name}" class="table table-bordered table-hover">';
        a += '<thead><tr><th>Columns 1</th><th>Columns 2</th></tr></thead> <tbody><tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr></tbody>';
        a += '</table></span>';
        return main.commonHTML(a, "viewTable")
    },
    step: function () {
        var a = '<label class="{id}" for="{name}">{label}</label><span class="step" id="{name}" data="{validate:{required:false,messages:{},conditional:false}}"><div class="flow-step-text"><h3>if:</h3></div> <div class="flow-step-if " > <ul class="btn-bar "> </ul> </div><div class="flow-step-text"> <h3>then:</h3> </div><div class="flow-step-then"> <ul class="btn-bar "></ul> </div></span>';
        return main.stepHTML(a, "step")
    },
    actor: function () {
        var a = '<li class="stepButton currentButton"><div id="{name}" class="actor" ><a data-toggle="popover" data-placement="bottom" data-content="#"  class="btn green" ><i class="fa fa-user"></i> <span class="btn-text">Actor</span> <i class="fa fa-times"></i></a>	</div></li>';
        return main.commonHTML(a, "actor")
    },
    action: function () {
        var a = '<li class="stepButton currentButton"><div id="{name}" class="action" ><a data-toggle="popover" data-placement="bottom" data-content="#"  class="btn blue dropdown-toggle"><i class="fa fa-cog"></i> <span class="btn-text">Action</span> <i class="fa fa-times"></i></a></div></li>';;
        return main.commonHTML(a, "action")
    },
    and: function () {
        var a = '<li class="stepButton currentButton"><div id="{name}" class="and"  ><a data-toggle="popover" data-placement="bottom" data-content="#"  class="btn purple dropdown-toggle"><i class="fa fa-info-circle"></i> <span class="btn-text">And</span> <i class="fa fa-times"></i></a></div></li>';
        return main.commonHTML(a, "and")
    },
    or: function () {
        var a = '<li class="stepButton currentButton"><div id="{name}" class="or" ><a data-toggle="popover" data-placement="bottom" data-content="#"  class="btn purple dropdown-toggle"><i class="fa fa-info-circle"></i> <span class="btn-text">Or</span> <i class="fa fa-times"></i></a></div></li>';
        return main.commonHTML(a, "or")
    },


    stepHTML: function (b, c) {

        b = '<div class="row">' + b + "</div>";
        var a = $("." + c).length + 1;
        var d = c.toLowerCase() + "_" + a;
        return b.replace(/{id}/g, d).replace(/{name}/g, d).replace(/{label}/g, d)

    },
    commonHTML: function (objectHTML, objectType, objectLabel) {
        objectHTML = '<div class="row">' + objectHTML + "</div>";
        objectLabel = objectLabel || objectType;
        var a = $(".gridster").find("." + objectLabel).length + 1;

        //Get a unique id to avoid duplicate element ids
        var uniqueID = main.GetUniqueID(objectLabel, objectType);
        if (uniqueID != 0)
            a = uniqueID;

        var d = objectType.toLowerCase() + "_" + a;
        return objectHTML.replace(/{id}/g, d).replace(/{name}/g, d).replace(/{label}/g, d)
    },
    commonHTML2: function (objectHTML, objectType, objectLabel) {
        objectHTML = '<div class="row">' + objectHTML + "</div>";
        return objectHTML;
    },
    lookUp: function (a) {

        switch (a) {
            case "view_table":
                return "viewTable";
                break;
            case "text_area":
            case "paragraph_text":
                return "textArea";
                break;
            case "text_label":
                return "textLabel";
                break;
            case "shared_object":
                return "sharedObject";
                break;
            case "link":
                return "link";
                break;
            case "button":
                return "button";
                break;
            case "text_box":
            case "single_line_text":
                return "textField";
                break;
            case "password_text":
                return "password";
                break;
            case "drop_down":
                return "dropDown";
                break;
            case "check_box":
                return "checkBoxGroup";
                break;
            case "radio_button":
            case "radio_buttons":
                return "radioButton";
                break;
            case "in_password":
                return "password";
                break;
            case "total":
                return "total";
                break;
            case "in_number":
                return "number";
                break;
            case "in_decimal":
                return "decimal";
                break;
            case "in_email":
                return "email";
                break;
            case "in_url":
                return "url";
                break;
            case "in_date":
                return "date";
                break;
            case "in_currency":
                return "currency";
                break;
            case "in_time":
                return "time";
                break;
            case "in_phone":
                return "phone";
                break;
            case "in_credit_card":
                return "creditCard";
                break;
            case "in_file_upload":
                return "fileUpload";
                break;
            case "in_signature":
                return "signature";
                break;
            case "image":
            case "in_add_image":
                return "addImage";
                break;
            case "rich_text":
                return "richText";
                break;
            case "stepSection":
                return "step";
                break;
            case "stepActor":
                return "actor";
                break;
            case "in_action":
                return "action";
                break;
            case "and":
                return "and";
                break;
            case "or":
                return "or";
                break;
            default:
                return a;
                break
        }
    },
    reverseLookUp: function (objectType) {
        switch (objectType) {
            case "addImage":
                return "Image";
                break;
            case "checkBoxGroup":
                return "Check_Box";
            case "dropDown":
                return "Drop_Down";
                break;
            case "radioButton":
                return "Radio_Button";
                break;
            case "richText":
                return "Rich_Text";
                break;
            case "textArea":
                return "Text_Area";
                break;
            case "textField":
                return "Text_Box";
                break;
            case "textLabel":
                return "Text_Label";
                break;
            default:
                //Make the first letter uppercase
                return objectType.replace(/^./, objectType[0].toUpperCase());;
                break
        }
    },
    reloadElementOptions: function () {
        var objectData = main.cache;
        var objectMetaData = JSON.parse(objectData.children("span[data]").attr('data'));
        var d = "";

        switch (objectMetaData.validate.object_type) {
            case "dropDown":

                if ($("#form-options-status-check").attr("checked")) {
                    $('#form-options-status-type-select').trigger('change');
                }

                if ($("#form-options-values-check").attr("checked")) {

                    var selectedOptionText = $('#form-options-name-select :selected').text();
                    var newValue = $('#form-options-name-value').val();

                    //Update dropdown with new input
                    //$(".form-options-more").each(function (index) {
                    //    //d += '<option value="' + $(this).val() + '">' + $(this).val() + "</option>"
                        
                    //    $('div.current select').children().eq(index).text($(this).val());
                    //    //console.log($('div.current select').children().eq(index).text());
                    //});

                    //Make sure value starts with valid input
                    if (newValue == '' || newValue.substr(0, 1) == '0' || newValue == '-') {
                        newValue = '0';
                    }

                    $("div.current select > option").each(function (index) {
                        var optionValue = this.value;
                        var optionText = this.text;

                        if (optionText == $('#form-options-name-select :selected').text()) {
                            d += '<option value="' + newValue + '">' + optionText + "</option>";
                        }
                        else {
                            d += '<option value="' + optionValue + '">' + optionText + "</option>";
                        }
                    });

                    if ($(".form-options-more").length != $('div.current select').children('option').length) {
                        d += '<option value="0">' + $(".form-options-more").eq($(".form-options-more").length - 1).val() + "</option>"
                    }

                    //Update sidebar dropdown & set to original selection
                    $('#form-options-name-select').html(d);
                    $("#form-options-name-select option:contains(" + selectedOptionText + ")").attr('selected', 'selected');

                    
                }
                else {
                    $(".form-options-more").each(function () {
                        d += '<option value="' + $(this).val() + '">' + $(this).val() + "</option>";
                    });
                }

                //Update designer dropdown
                $("#main-column div.active div.current").find("select").html(d);
                //objectData.find("select").html(d);

                break;
            case "radioButton":
                var a = objectData.find("label").attr("for");
                var c = main.NameToProper(a);
                $(".form-options-more").each(function () {
                    var g = c + "_" + main.NameToProper($(this).val());
                    d += '<label class="option" for="' + g + '"><input style="display: inline;vertical-align: middle;bottom: 3px;" class="radio" type="radio" name="' + c + '" id="' + g + '" value="' + $(this).val() + '" /><span style="display: inline;padding-left: 1px;">' + $(this).val() + "</span></label>"
                });
                objectData.find("span.radioButton").html(d).attr("id", c);
                break;
            case "checkBoxGroup":
                var a = objectData.find("label").attr("for");
                var c = main.NameToProper(a);
                $(".form-options-more").each(function () {
                    var g = c + "_" + main.NameToProper($(this).val());
                    d += '<label class="option" for="' + g + '"><input class="checkbox" type="checkbox" style="position: relative;vertical-align: middle;bottom: 1px;" name="' + c + '" id="' + g + '" value="' + $(this).val() + '" />' + $(this).val() + "</label>"
                });
                objectData.find("span.checkBoxGroup").html(d).attr("id", c);
                break;
            case "fileUpload":
                break;
            case "signature":
                break;
            case "addImage":
                break;
            default:
                break
        }
    },
    NameToProper: function (a) {
        return a.toLowerCase().replace(/^\s\s*/, "").replace(/\s\s*$/, "").replace(/ /g, "_").replace(/-/g, "_")
    },
    GetUniqueID: function (elementClass, elementType) {
        //Get default element ids
        var tabArray = [];
        $(".gridster").find(".row span." + elementClass).each(function (index) {
            var id = $(this).attr("id").toLowerCase();
            if (id.match(elementType.toLowerCase() + "_")) {
                var num = id.substring(id.indexOf("_") + 1);
                if ($.isNumeric(num)) {
                    tabArray.push(num);
                }
            }
        });

        //Get the greatest default element id number
        var maxNum = Math.max.apply(null, tabArray);

        if (!isFinite(maxNum))
            maxNum = 0;
        else
            maxNum++;

        return maxNum;
    },
    FillDropDowns: function (a) {
        $("div.row").each(function (key, v) {
            $('#flow-options-step')
                .append($('<option>', { value: "step" + (key + 1) })
                    .text("Step " + (key + 1)));
        });

    }
};
