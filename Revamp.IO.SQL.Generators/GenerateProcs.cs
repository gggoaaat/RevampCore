using Revamp.IO.DB.Bridge;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

namespace Revamp.IO.SQL.Generators
{
    public class GenerateSQL
    {
        static string[] StringTypes = { "char", "varchar" };
        static string[] NTypes = { "nchar", "nvarchar" };
        static string[] PrecisionAndScaleTypes = { "decimal", "numeric" };
        static string[] PrecisionTypes = { "float", "real" };
        static string[] NumberTypes = { "bigint", "int", "smallint" };
        static string[] ByteDataTypes = { "text", "ntext", "varbinary", "binary", "image" };
        static string[] UUIDTypes = { "uniqueidentifier" };
        static string UniqueDefault = "^";

        private DataTable GET_COLUMNS_VIA_TABLENAME(IConnectToDB _Connect, string TableName)
        {
            StringBuilder SQLin = new StringBuilder();
            SQLin.Append("Select COLUMN_NAME, DATA_TYPE, ");
           
            switch (_Connect.Platform)
            {
                case "Microsoft":
                case "MICROSOFT":
                    SQLin.Append("CHARACTER_OCTET_LENGTH DATA_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, TABLE_SCHEMA, ORDINAL_POSITION, IS_NULLABLE, COLUMN_DEFAULT ");
                    SQLin.Append("from INFORMATION_SCHEMA.COLUMNS ");
                    SQLin.Append("where TABLE_SCHEMA = '" + _Connect.Schema + "' and upper(TABLE_NAME) = upper('" + TableName + "') ");
                    SQLin.Append("order by ORDINAL_POSITION ASC ");
                    return ER_Query._RUN_QUERY(_Connect, SQLin.ToString());
                default:
                    return new DataTable();
            }

        }

        private static string GetSchema(IConnectToDB _Connect)
        {
            string _Schema = (_Connect.Schema == "" || _Connect.Schema == null ? (_Connect.SourceDBOwner == "" || _Connect.SourceDBOwner == null ? "CSA" : _Connect.SourceDBOwner) : _Connect.Schema);
            return _Schema;
        }

        public string GENERATE_INSERT_PROCEDURE(IConnectToDB _SystemConnect, IConnectToDB _SourceConnect, InsertProcedureStruct _Struct)
        {
            try
            {
                if (_Struct.ProcedureName != null && _Struct.ProcedureName != string.Empty)
                {
                    string _Schema = GetSchema(_SourceConnect);

                    //Will Create Procedure for Table
                    DataTable dt = new DataTable();
                    StringBuilder SQLin = new StringBuilder();
                    //string tempstring = "";
                    string outID = "";
                    string outDataType = "";
                    string _ProcedurePrefix;

                    if (_Struct.ProcedurePrefix != "")
                        _ProcedurePrefix = _Struct.ProcedurePrefix;
                    else
                        _ProcedurePrefix = "SP_I";

                    if (_Struct.SourceName != null && _Struct.SourceName != string.Empty)
                    {

                        dt = GET_COLUMNS_VIA_TABLENAME(_SourceConnect, _Struct.SourceName);

                        outID = dt.Rows[0]["COLUMN_NAME"].ToString();
                        outDataType = dt.Rows[0]["DATA_TYPE"].ToString();
                        SQLin.AppendLine(" -- THIS PROCEDURE WAS GENERATED BY THE GENERATE PROCEDURE MODULE of REVAMP IO an EMINENT IT, LLC Software Product.");
                        SQLin.AppendLine("CREATE PROCEDURE " + _Schema + "." + _ProcedurePrefix + "_" + MaxNameLength(_Struct.ProcedureName.ToUpper(), (128 - (_ProcedurePrefix.Length + 1))));

                        switch (_SourceConnect.Platform)
                        {
                            case "Microsoft":
                            case "MICROSOFT":

                                string excludeUUID = _Struct.insertUUID ? outID.Substring(0, outID.Length - 3) + "_UUID" : "";
                                string excludeIdentity = _Struct.SourceName.ToUpper() == "IDENTITIES" ? "IDENTITES_ID" : "";

                                string[] excludeColumns = new string[] { "DT_CREATED", "DT_UPDATED", excludeUUID, excludeIdentity };

                                _Struct.excludedColumns = _Struct.excludedColumns == null ? new string[0] : _Struct.excludedColumns;
                                string[] newArray = new string[excludeColumns.Length + _Struct.excludedColumns.Length];
                                Array.Copy(excludeColumns, newArray, excludeColumns.Length);
                                Array.Copy(_Struct.excludedColumns, 0, newArray, excludeColumns.Length, _Struct.excludedColumns.Length);

                                newArray = excludeColumns;

                                //Step 4 - Create Procedure Params
                                foreach (DataRow row in dt.Rows)
                                {
                                    if (row["COLUMN_NAME"].ToString() != outID && !excludeColumns.Contains(row["COLUMN_NAME"].ToString()))
                                    {
                                        bool addDefault = row["COLUMN_DEFAULT"] != DBNull.Value && !string.IsNullOrWhiteSpace((string)row["COLUMN_DEFAULT"]);
                                        string optionalDefault = (addDefault ? " = " + row["COLUMN_DEFAULT"].ToString().TrimStart('(').TrimEnd(')') : "");

                                        if (Array.IndexOf(StringTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                                        {
                                            string data_length = row["DATA_LENGTH"].ToString();

                                            if (data_length == "-1")
                                            {
                                                data_length = "MAX";
                                            }

                                            SQLin.AppendLine("   @I_" + row["COLUMN_NAME"] + " [" + row["DATA_TYPE"] + "](" + data_length + ")" + optionalDefault + ", ");
                                        }
                                        else if (Array.IndexOf(PrecisionAndScaleTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                                        {
                                            string precisionScale = row["NUMERIC_PRECISION"] + "," + row["NUMERIC_SCALE"];

                                            SQLin.AppendLine("   @I_" + row["COLUMN_NAME"] + " [" + row["DATA_TYPE"] + "](" + precisionScale + "), ");
                                        }
                                        else if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                                        {
                                            SQLin.AppendLine("   @I_" + row["COLUMN_NAME"] + " [" + row["DATA_TYPE"] + "](MAX), ");
                                        }
                                        else if (Array.IndexOf(NumberTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                                        {
                                            
                                            SQLin.AppendLine("   @I_" + row["COLUMN_NAME"] + " [" + row["DATA_TYPE"] + "]" + optionalDefault + ", ");
                                        }
                                        else
                                        {
                                            SQLin.AppendLine("   @I_" + row["COLUMN_NAME"] + " [" + row["DATA_TYPE"] + "], ");
                                        }
                                    }
                                }

                                if (_Struct.UsePlaceHoldingValue)
                                {
                                    SQLin.AppendLine("   @I_THIS_CALLER [varchar](MAX) = '', ");
                                }
                                SQLin.AppendLine("   @O_ERR_NUMB bigint OUT, ");
                                SQLin.AppendLine("   @O_ERR_MESS varchar(Max) OUT, ");
                                SQLin.AppendLine("   @O_" + outID + " [" + outDataType + "] OUT" + (_Struct.insertUUID ? "," : ""));
                                if (_Struct.insertUUID)
                                {
                                    SQLin.AppendLine("   @O_" + excludeUUID + " [uniqueidentifier] OUT");
                                }

                                SQLin.AppendLine("   AS");
                                if (_Struct.insertUUID)
                                {
                                    SQLin.AppendLine("   DECLARE @ID table (ID bigint, UUID [uniqueidentifier])");
                                }
                                else
                                {
                                    SQLin.AppendLine("   DECLARE @ID table (ID bigint)");
                                }

                                int iNumber1 = 0;
                                int rowCount1 = dt.Rows.Count;
                                string MAIN_ID = dt.Rows[0]["COLUMN_NAME"].ToString();
                                string BASE_ID = dt.Rows[1]["COLUMN_NAME"].ToString();                                
                                string PREV_ID = dt.Rows[2]["COLUMN_NAME"].ToString();

                                SQLin.AppendLine("   DECLARE @TRANSNAME varchar(MAX) = 'TRANSACTION " + _ProcedurePrefix + "_" + MaxNameLength(_Struct.ProcedureName.ToUpper(), (128 - (_ProcedurePrefix.Length + 1))) + "' ");
                                SQLin.AppendLine("    ");
                                SQLin.AppendLine("BEGIN");
                                SQLin.AppendLine("   SET NOCOUNT ON");
                                SQLin.AppendLine("    ");
                                SQLin.AppendLine("   BEGIN Transaction @TRANSNAME ");
                                SQLin.AppendLine("    ");
                                SQLin.AppendLine("   BEGIN TRY ");
                                SQLin.AppendLine("    ");
                                SQLin.AppendLine("       SET @O_ERR_NUMB = 0 ");
                                SQLin.AppendLine("       SET @O_ERR_MESS = 'N/A' ");
                                SQLin.AppendLine("    ");
                                SQLin.AppendLine("    IF (@I_" + BASE_ID + " is null) ");
                                SQLin.AppendLine("    BEGIN ");
                                SQLin.AppendLine("      SET @I_" + BASE_ID + " = 0");
                                SQLin.AppendLine("    END ");
                                SQLin.AppendLine("    IF (@I_" + PREV_ID + " is null) ");
                                SQLin.AppendLine("    BEGIN ");
                                SQLin.AppendLine("      SET @I_" + PREV_ID + " = 0");
                                SQLin.AppendLine("    END ");
                                SQLin.AppendLine("    ");
                                if (_Struct.insertUUID)
                                {
                                    SQLin.AppendLine("    IF (@I_" + BASE_ID + " = 0 or @I_" + BASE_ID + " is null) and @I_BASE_" + excludeUUID + " is not null ");
                                    SQLin.AppendLine("    BEGIN ");
                                    SQLin.AppendLine("      SELECT top 1 @I_" + BASE_ID + " = " + BASE_ID + " FROM " + _Schema + "." + _Struct.SourceName + " WHERE " + excludeUUID + " = @I_BASE_" + excludeUUID + "");
                                    SQLin.AppendLine("    END ");
                                    SQLin.AppendLine("    ");
                                    SQLin.AppendLine("    IF (@I_" + PREV_ID + " = 0 or @I_" + PREV_ID + " is null) and @I_PREV_" + excludeUUID + " is not null ");
                                    SQLin.AppendLine("    BEGIN ");
                                    SQLin.AppendLine("      SELECT top 1 @I_" + PREV_ID + " = " + MAIN_ID + " FROM " + _Schema + "." + _Struct.SourceName + " WHERE " + excludeUUID + " = @I_PREV_" + excludeUUID + "");
                                    SQLin.AppendLine("    END ");
                                    SQLin.AppendLine("    ");
                                }

                                SQLin.AppendLine("    DECLARE @TEMP_DT_CREATED [datetime] = GETDATE()");
                                SQLin.AppendLine("    IF (@I_" + BASE_ID + " is not null and @I_" + BASE_ID + " > 0) ");
                                SQLin.AppendLine("    BEGIN ");
                                SQLin.AppendLine("      SELECT top 1 @TEMP_DT_CREATED = DT_CREATED FROM " + _Schema + "." + _Struct.SourceName + " WHERE " + BASE_ID + " = @I_" + BASE_ID + " order by 1 asc");
                                SQLin.AppendLine("    END ");


                                SQLin.AppendLine("       INSERT into " + _Schema + "." + _Struct.SourceName + " (");
                                SQLin.AppendLine("           [DT_CREATED], ");

                                foreach (DataRow row in dt.Rows)
                                {
                                    iNumber1++;
                                    if (row["COLUMN_NAME"].ToString() != outID && !excludeColumns.Contains(row["COLUMN_NAME"].ToString()))
                                    {
                                        if (iNumber1 < rowCount1)
                                            SQLin.AppendLine("           [" + row["COLUMN_NAME"] + "], ");
                                        else if (iNumber1 == rowCount1)
                                            SQLin.AppendLine("           [" + row["COLUMN_NAME"] + "] ) ");
                                    }
                                }
                                if (_Struct.insertUUID)
                                {
                                    SQLin.AppendLine("       OUTPUT inserted." + outID + ", inserted." + excludeUUID + " into @ID");
                                }
                                else
                                {
                                    SQLin.AppendLine("       OUTPUT inserted." + outID + " into @ID");
                                }

                                SQLin.AppendLine("       VALUES ( ");
                                SQLin.AppendLine("           @TEMP_DT_CREATED, ");
                                iNumber1 = 0;
                                foreach (DataRow row in dt.Rows)
                                {
                                    iNumber1++;

                                    if (row["COLUMN_NAME"].ToString() != outID && !excludeColumns.Contains(row["COLUMN_NAME"].ToString()))
                                    {
                                        if (iNumber1 < rowCount1)

                                            SQLin.AppendLine("           @I_" + row["COLUMN_NAME"] + ", ");
                                        else if (iNumber1 == rowCount1)
                                            SQLin.AppendLine("           @I_" + row["COLUMN_NAME"] + " ) ");
                                    }
                                }


                                SQLin.AppendLine(" ");
                                SQLin.AppendLine("       SELECT @O_" + outID + " = ID FROM @ID");
                                if (_Struct.insertUUID)
                                {
                                    SQLin.AppendLine("       SELECT @O_" + excludeUUID + " = UUID FROM @ID");
                                }
                                SQLin.AppendLine(" ");
                                if (_Struct.updateParent)
                                {
                                    SQLin.AppendLine("       if (@I_" + BASE_ID + " = 0 or @I_" + BASE_ID + " is null) ");
                                    SQLin.AppendLine("       begin ");
                                    SQLin.AppendLine("           UPDATE " + _Schema + "." + _Struct.SourceName + " ");
                                    SQLin.AppendLine("           SET [" + BASE_ID + "] = @O_" + outID + "");
                                    SQLin.AppendLine("           WHERE [" + outID + "] = @O_" + outID + "");
                                    SQLin.AppendLine("       end");

                                    if (_Struct.insertUUID)
                                    {
                                        SQLin.AppendLine("       if (@I_BASE_" + excludeUUID + " is null) ");
                                        SQLin.AppendLine("       begin ");
                                        SQLin.AppendLine("           UPDATE " + _Schema + "." + _Struct.SourceName + " ");
                                        SQLin.AppendLine("           SET [BASE_" + excludeUUID + "] = @O_" + excludeUUID + "");
                                        SQLin.AppendLine("           WHERE [" + outID + "] = @O_" + outID + "");
                                        SQLin.AppendLine("       end");
                                    }
                                }
                                SQLin.AppendLine(" ");
                                SQLin.AppendLine("	COMMIT TRANSACTION @TRANSNAME ");
                                SQLin.AppendLine(" ");
                                SQLin.AppendLine("   END TRY ");
                                SQLin.AppendLine("   BEGIN CATCH ");
                                SQLin.AppendLine("	");
                                SQLin.AppendLine("       SELECT @O_ERR_NUMB = ERROR_NUMBER() ");
                                SQLin.AppendLine("       SELECT @O_ERR_MESS = ERROR_MESSAGE() ");
                                SQLin.AppendLine("	    SET @O_" + outID + " = -1 ");
                                SQLin.AppendLine("	");
                                SQLin.AppendLine("	ROLLBACK TRANSACTION @TRANSNAME ");
                                SQLin.AppendLine("	END CATCH ");
                                SQLin.AppendLine(" -- THIS PROCEDURE WAS GENERATED BY THE GENERATE PROCEDURE MODULE of REVAMP IO an EMINENT IT, LLC Software Product.");
                                SQLin.AppendLine("END");

                                return SQLin.ToString();

                            default:
                                return "Error: Invalid DB Platform";
                        }
                    }
                    else
                    {
                        return "Error: Table or View Name Not Provided";
                    }
                }
                else
                {
                    return "Error: Procedure Name Not Provided";
                }
            }
            catch (Exception e)
            {
                return "Error: " + e.ToString();
            }
        }

        public string GENERATE_DYNAMIC_SEARCH_PROCEDURE(IConnectToDB _SystemConnect, ConnectToDB _SourceConnect, SearchProcedureStruct _Struct)
        {
            string _Schema = GetSchema(_SourceConnect);

            //Will Create Procedure for Table
            DataTable procedureColumns = new DataTable();
            StringBuilder SQLin = new StringBuilder();

            string outID = "";
            int rowCount = 0;

            string TableName = _Struct.SourceName.ToUpper();

            string source = "[" + _Schema + "].[" + TableName + "]";

            string _ProcedurePrefix;

            if (_Struct.ProcedurePrefix != "")
            {
                _ProcedurePrefix = _Struct.ProcedurePrefix;
            }
            else
            {
                _ProcedurePrefix = "SEARCH";
            }

            if (_Struct.useProc != null && _Struct.useProc.useThisOverride)
            {
                procedureColumns = ColumnsDataTable();

                if (_Struct.useProc.columns != null)
                {
                    foreach (customColumn thisColumn in _Struct.useProc.columns)
                    {
                        DataRow row;
                        row = procedureColumns.NewRow();
                        row["COLUMN_NAME"] = thisColumn.columnName;
                        row["DATA_TYPE"] = thisColumn.columnDataType.ToString();
                        row["DATA_LENGTH"] = thisColumn.columnSize.ToString();
                        row["NUMERIC_PRECISION"] = thisColumn.columnPrecision.ToString();
                        row["NUMERIC_SCALE"] = thisColumn.columnScale.ToString();
                        row["TABLE_SCHEMA"] = "";
                        row["IS_NULLABLE"] = thisColumn.isNullable ? "Yes" : "No";
                        procedureColumns.Rows.Add(row);
                    }
                }

                source = "#TEMP_SOURCE";
            }
            else
            {
                procedureColumns = GET_COLUMNS_VIA_TABLENAME(_SourceConnect, TableName);
            }


            rowCount = procedureColumns.Rows.Count;

            //Step 3 - Create Procedure Begin Definition Syntax
            SQLin.AppendLine("CREATE PROCEDURE " + _Schema + "." + _ProcedurePrefix + "_" + MaxNameLength(_Struct.ProcedureName.ToUpper(), (128 - (_ProcedurePrefix.Length + 1))));
            #region Standard PARAMETERS
            //START OF PARAMETERS
            SQLin.AppendLine("     @P_TableorCount" + " [" + "varchar" + "](MAX) = 'Count Query' ");
            SQLin.AppendLine("    ,@P_VERIFY" + "[CHAR](1) = 'F' ");
            SQLin.AppendLine("    ,@P_DYNO_COL" + " [" + "varchar" + "](" + "MAX" + ") = '' ");
            SQLin.AppendLine("    ,@P_DISTINCT" + " [" + "varchar" + "](" + "1" + ") = 'T' ");
            SQLin.AppendLine("    ,@P_WHERE" + " [" + "varchar" + "](" + "MAX" + ") = '' ");
            SQLin.AppendLine("    ,@P_GROUP_BY" + " [" + "varchar" + "](" + "MAX" + ") = '' ");
            SQLin.AppendLine("    ,@P_HAVING" + " [" + "varchar" + "](" + "MAX" + ") = '' ");
            SQLin.AppendLine("    ,@P_ORDER_BY" + " [" + "varchar" + "](" + "MAX" + ") = '1 asc' ");
            SQLin.AppendLine("    ,@P_SEARCH" + " [" + "varchar" + "](" + "MAX" + ") = '' ");
            SQLin.AppendLine("    ,@P_SEARCH_COLUMN_INCLUDE" + " [" + "varchar" + "](" + "MAX" + ") = '' ");
            SQLin.AppendLine("    ,@P_SEARCH_COLUMN_EXCLUDE" + " [" + "varchar" + "](" + "MAX" + ") = '' ");
            SQLin.AppendLine("    ,@P_STARTING_ROW" + " [" + "bigint" + "] = 1 ");
            SQLin.AppendLine("    ,@P_LENGTH_OF_SET" + " [" + "bigint" + "] = -1 ");
            SQLin.AppendLine("    ,@P_DELIMITER" + " [" + "varchar" + "](" + "MAX" + ") = ',' ");

            if (_Struct.GetLatestVersion && procedureColumns.Rows.Count > 0)
            {
                SQLin.AppendLine("    ,@P_GET_LATEST" + " [" + "char" + "](1) = 'F' ");
                SQLin.AppendLine("    ,@P_GET_FIRST" + " [" + "char" + "](1) = 'F' ");
            }
            #endregion
            switch (_SourceConnect.Platform)
            {
                case "Microsoft":
                case "MICROSOFT":

                    #region Dynamic Parameters Depends on Source Columns and Custom Params
                    if (_Struct.moreParams != null)
                    {
                        foreach (moreParams thisParam in _Struct.moreParams)
                        {
                            string defaultValue = thisParam.paramDefault == String.Empty ? "" : " = " + thisParam.paramDefault;

                            SQLin.AppendLine("    ,@P_" + thisParam.paramName + " " + thisParam.paramDataType + defaultValue);
                        }
                    }

                    //Step 4 - Create Procedure Params
                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        SQLin.AppendLine("    ,@P_" + row["COLUMN_NAME"] + " [VARCHAR](MAX) = '' ");
                        SQLin.AppendLine("    ,@P_EXCLUDE_" + row["COLUMN_NAME"] + " [VARCHAR](MAX) = '' ");

                        if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                        {
                            //Do Nothing
                        }
                        else
                        {
                            //SQLin.AppendLine("   ,@P_" + row["COLUMN_NAME"] + "_ [VARCHAR](MAX) = '' ");
                            #region Faster Query No Multiple Values Allowed
                            //Improve and add more datatypes like numbers, decimals, dates
                            if (!_Struct.DisableUnique)
                            {
                                RowsWithDataType(SQLin, row, "P_", true, true, true, false, 4);
                            }
                            #endregion
                        }
                    }
                    #endregion

                    //END OF PARAMETERS
                    SQLin.AppendLine("AS");
                    #region DECLARATIONS
                    SQLin.AppendLine("    DECLARE @MergedSQL NVARCHAR(MAX)	");

                    SQLin.AppendLine("--CONDITIONAL DECLARATIONS ");
                    SQLin.AppendLine("    DECLARE @_AllOrRows varchar(MAX) ");
                    SQLin.AppendLine("    DECLARE @_1stConditionalBase char(1) = 'F'");
                    SQLin.AppendLine("    DECLARE @_2ndConditionalBase char(1) = 'T'");
                    SQLin.AppendLine("    DECLARE @V_SEARCH varchar(MAX) = '%' + @P_SEARCH + '%' ");
                    SQLin.AppendLine("    DECLARE @DYN_COALSECE varchar(MAX) = N''");
                    SQLin.AppendLine("    DECLARE @_ConditionalHasSEARCH CHAR(1) = 'F' ");
                    SQLin.AppendLine("    DECLARE @_ConditionalHasGET_LATEST CHAR(1) = 'F' ");
                    SQLin.AppendLine("    DECLARE @_ConditionalHasGET_FIRST CHAR(1) = 'F' ");
                    SQLin.AppendLine("    DECLARE @_ConditionalHasWHERE CHAR(1) = 'F' ");
                    SQLin.AppendLine("    DECLARE @_DynamicSearchWHERE varchar(MAX) = N''");
                    SQLin.AppendLine("    DECLARE @_ChangeOrderby CHAR(1) = 'F' ");
                    SQLin.AppendLine("    DECLARE @V_DYNO_COL varchar(MAX) = '' ");
                    SQLin.AppendLine("    DECLARE @V_ROW_LIMIT CHAR(1) = 'F' ");
                    SQLin.AppendLine("    DECLARE @V_LINE_BREAK varchar(20) = char(13) + char(10) ");

                    SQLin.AppendLine("    SELECT Array_Values INTO #V_SEARCH_COL_EXCLUDE_LIST FROM CSA.SPLITTER(@P_SEARCH_COLUMN_EXCLUDE, @P_DELIMITER) ");
                    SQLin.AppendLine("    SELECT Array_Values INTO #V_SEARCH_COL_INCLUDE_LIST FROM CSA.SPLITTER(@P_SEARCH_COLUMN_INCLUDE, @P_DELIMITER) ");

                    if (_Struct.useProc != null && _Struct.useProc.useThisOverride)
                    {
                        SQLin.AppendLine("    CREATE TABLE #TEMP_SOURCE ");
                        SQLin.AppendLine("    (");
                        int i = 0;
                        foreach (DataRow row in procedureColumns.Rows)
                        {
                            i++;
                            RowsWithDataType(SQLin, row, "", false, false, false, false, 8, i);
                            //SQLin.AppendLine("   " + row["COLUMN_NAME"] + " " + row["DATA_TYPE"] + (i < procedureColumns.Rows.Count ? ", " : ""));                                                                                    
                        }
                        SQLin.AppendLine("    )");

                        SQLin.AppendLine("");
                        SQLin.AppendLine("    INSERT INTO #TEMP_SOURCE");
                        SQLin.AppendLine("    EXEC " + _Struct.useProc.ProcedureName + " " + _Struct.useProc.ProcedureParams);
                    }

                    if (_Struct.moreParams != null)
                    {
                        foreach (moreParams thisParam in _Struct.moreParams)
                        {
                            SQLin.AppendLine("    DECLARE @_ConditionalHas" + thisParam.paramName + " CHAR(1) = 'F' ");
                            SQLin.AppendLine("    DECLARE @_ConditionalHasExclude" + thisParam.paramName + " CHAR(1) = 'F' ");
                        }
                    }

                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        SQLin.AppendLine("    DECLARE @_ConditionalHas" + row["COLUMN_NAME"] + " CHAR(1) = 'F' ");
                        SQLin.AppendLine("    DECLARE @_ConditionalHasExclude" + row["COLUMN_NAME"] + " CHAR(1) = 'F' ");
                        if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                        {
                            //Do Nothing
                        }
                        else
                        {
                            if (!_Struct.DisableUnique)
                            {
                                SQLin.AppendLine("    DECLARE @_ConditionalHas" + row["COLUMN_NAME"] + "_ CHAR(1) = 'F' ");
                            }
                        }
                    }

                    SQLin.AppendLine("--PARAM SEARCH DECLARATIONS ");
                    if (_Struct.moreParams != null)
                    {
                        foreach (moreParams thisParam in _Struct.moreParams)
                        {
                            SQLin.AppendLine("    DECLARE @__" + thisParam.paramName + " VARCHAR(MAX) = '' ");
                            SQLin.AppendLine("    DECLARE @__Exclude" + thisParam.paramName + " VARCHAR(MAX) = '' ");
                        }
                    }

                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        SQLin.AppendLine("    DECLARE @__" + row["COLUMN_NAME"] + " VARCHAR(MAX) = '' ");
                        SQLin.AppendLine("    DECLARE @__Exclude" + row["COLUMN_NAME"] + " VARCHAR(MAX) = '' ");
                        if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                        {
                            //Do Nothing
                        }
                        else
                        {
                            if (!_Struct.DisableUnique)
                            {
                                RowsWithDataType(SQLin, row, "__", true, true, true, false, 4, rowCount = 1, true);
                            }
                        }
                    }

                    SQLin.AppendLine("--SEARCH CLAUSE DECLARATIONS ");
                    if (_Struct.moreParams != null)
                    {
                        foreach (moreParams thisParam in _Struct.moreParams)
                        {
                            SQLin.AppendLine("    DECLARE @_DynamicSearch" + thisParam.paramName + " VARCHAR(MAX) = N'' ");
                            SQLin.AppendLine("    DECLARE @_DynamicSearchExclude" + thisParam.paramName + " VARCHAR(MAX) = N'' ");

                        }
                    }
                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        SQLin.AppendLine("    DECLARE @_DynamicSearch" + row["COLUMN_NAME"] + " VARCHAR(MAX) = N'' ");
                        SQLin.AppendLine("    DECLARE @_DynamicSearchExclude" + row["COLUMN_NAME"] + " VARCHAR(MAX) = N'' ");

                        if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                        {
                            //Do Nothing
                        }
                        else
                        {
                            if (!_Struct.DisableUnique)
                            {
                                SQLin.AppendLine("    DECLARE @_DynamicSearch" + row["COLUMN_NAME"] + "_ VARCHAR(MAX) = N'' ");
                            }
                        }
                    }
                    SQLin.AppendLine("    DECLARE @_DynamicSearchClose varchar(MAX) = N''");
                    #endregion
                    SQLin.AppendLine("BEGIN");
                    SQLin.AppendLine("    SET NOCOUNT ON");

                    #region Query Building Params
                    SQLin.AppendLine("    DECLARE @RevampQueryOpen nvarchar(MAX) = N'' ");
                    SQLin.AppendLine("    DECLARE @RevampQueryClose nvarchar(MAX) = N'' ");
                    SQLin.AppendLine("    DECLARE @RevampQueryGroup nvarchar(MAX) = N'' ");
                    SQLin.AppendLine("    DECLARE @RevampQueryHaving nvarchar(MAX) = N'' ");
                    SQLin.AppendLine("    DECLARE @RevampQueryOrder nvarchar(MAX) = N'' ");
                    SQLin.AppendLine("    DECLARE @RevampQuerySearchColumns nvarchar(MAX) = N'' ");
                    SQLin.AppendLine("    DECLARE @RevampQuerySearchColumnsClose nvarchar(MAX) = N'' ");
                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        SQLin.AppendLine("    DECLARE @RevampQuerySearchColumn" + row["COLUMN_NAME"] + " VARCHAR(MAX) = N'' ");
                    }
                    SQLin.AppendLine("    DECLARE @RevampQueryExtraParams nvarchar(MAX) = N'' ");
                    SQLin.AppendLine("");
                    #endregion

                    #region Conditional for P_DELIMITER
                    SQLin.AppendLine("    IF @P_DELIMITER is null  ");
                    SQLin.AppendLine("    BEGIN  ");
                    SQLin.AppendLine("        SET @P_DELIMITER = ',' ");
                    SQLin.AppendLine("    END  ");
                    SQLin.AppendLine("");
                    #endregion

                    #region Group By Logic to check if Param is Present
                    SQLin.AppendLine("        IF @P_GROUP_BY is not null and RTRIM(@P_GROUP_BY) != '' and @P_DYNO_COL is not null and RTRIM(@P_DYNO_COL) != ''  ");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("            SET @RevampQueryGroup = 'GROUP BY ' + @P_GROUP_BY + ' ' + @V_LINE_BREAK  ");
                    SQLin.AppendLine("        END  ");
                    SQLin.AppendLine("");
                    #endregion

                    #region Having Logic to check if Param is Present
                    SQLin.AppendLine("        IF @P_HAVING is not null and RTRIM(@P_HAVING) != '' and @P_GROUP_BY is not null and RTRIM(@P_GROUP_BY) != '' and @P_DYNO_COL is not null and RTRIM(@P_DYNO_COL) != ''  ");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("            SET @RevampQueryHaving = 'HAVING ' + @P_HAVING + ' ' + @V_LINE_BREAK  ");
                    SQLin.AppendLine("        END  ");
                    SQLin.AppendLine("");
                    #endregion

                    #region Search Logic to check if Param is Present
                    SQLin.AppendLine("    IF @V_SEARCH != '' and @V_SEARCH is not null and @V_SEARCH != '%%' and RTRIM(@V_SEARCH) != '' and RTRIM(@V_SEARCH) != '%%' ");
                    SQLin.AppendLine("    BEGIN  ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("        SET @_ConditionalHasSEARCH = 'T' ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("    END  ");
                    SQLin.AppendLine("");
                    #endregion

                    #region Where Logic To Check if Where Param is Present
                    SQLin.AppendLine("    IF @P_WHERE != '' and @P_WHERE is not null and RTRIM(@P_WHERE) != '' ");
                    SQLin.AppendLine("    BEGIN  ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("        SET @_ConditionalHasWHERE = 'T' ");
                    SQLin.AppendLine("        SET @_DynamicSearchWHERE =  N'and (' + @P_WHERE + ') ' ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("    END  ");
                    SQLin.AppendLine("");
                    #endregion

                    #region Conditional to Load Get Latest TSQL Code
                    if (_Struct.GetLatestVersion && procedureColumns.Rows.Count > 0)
                    {
                        SQLin.AppendLine("    IF @P_GET_LATEST = 'T' ");
                        SQLin.AppendLine("    BEGIN  ");
                        SQLin.AppendLine("      ");
                        SQLin.AppendLine("        SET @_ConditionalHasGET_LATEST = 'T' ");
                        SQLin.AppendLine("      ");
                        SQLin.AppendLine("    END  ");
                        SQLin.AppendLine("");

                        SQLin.AppendLine("    IF @P_GET_FIRST = 'T' ");
                        SQLin.AppendLine("    BEGIN  ");
                        SQLin.AppendLine("      ");
                        SQLin.AppendLine("        SET @_ConditionalHasGET_FIRST = 'T' ");
                        SQLin.AppendLine("      ");
                        SQLin.AppendLine("    END  ");
                        SQLin.AppendLine("");
                    }
                    #endregion

                    #region Conditional for V_ROW_LIMIT
                    SQLin.AppendLine("    IF @P_LENGTH_OF_SET != -1  ");
                    SQLin.AppendLine("    BEGIN  ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("        SET @V_ROW_LIMIT = 'T' ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("    END  ");
                    SQLin.AppendLine("");
                    #endregion

                    #region Dynamic Columns
                    SQLin.AppendLine("    IF @P_TableorCount = 'Default Query' or  @P_DYNO_COL = '' or @P_DYNO_COL is null or @P_DYNO_COL = '%%' or RTRIM(@P_DYNO_COL) = '' and RTRIM(@P_DYNO_COL) = '%%' ");
                    SQLin.AppendLine("    BEGIN  ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("        SET @P_DYNO_COL = 'a.*' ");
                    SQLin.AppendLine("        SET @V_DYNO_COL = 'a.*' ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("    END  ");
                    SQLin.AppendLine("    ELSE IF @P_DYNO_COL like '%distinct%' ");
                    SQLin.AppendLine("    BEGIN  ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("        SET @P_DYNO_COL = @P_DYNO_COL ");
                    SQLin.AppendLine("        SET @V_DYNO_COL = REPLACE(@P_DYNO_COL, 'distinct', '') ");
                    SQLin.AppendLine("        SET @_ChangeOrderby = 'T'");
                    SQLin.AppendLine("    END  ");
                    SQLin.AppendLine("    ELSE ");
                    SQLin.AppendLine("    BEGIN  ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("        SET @V_DYNO_COL = @P_DYNO_COL ");
                    SQLin.AppendLine("        SET @P_DYNO_COL = 'rownumb, ' + @P_DYNO_COL ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("    END  ");
                    #endregion

                    #region IF PARAM CONDITION LOGIC

                    #region If Log For Each Custom Param
                    if (_Struct.moreParams != null)
                    {
                        foreach (moreParams thisParam in _Struct.moreParams)
                        {
                            SQLin.AppendLine("");
                            SQLin.AppendLine("    IF  @P_" + thisParam.paramName + " != '' and  @P_" + thisParam.paramName + " is not null and RTRIM( @P_" + thisParam.paramName + ") != ''");
                            SQLin.AppendLine("    BEGIN  ");
                            SQLin.AppendLine("      ");
                            SQLin.AppendLine("        SET @_ConditionalHas" + thisParam.paramName + " = 'T' ");
                            SQLin.AppendLine("        SET @_DynamicSearch" + thisParam.paramName + " =  N'and ( @IN__1stConditionalBase = @IN__ConditionalHas" + thisParam.paramName + " or (@IN__2ndConditionalBase = @IN__ConditionalHas" + thisParam.paramName + " AND " + thisParam.paramClause + " )) ' + @V_LINE_BREAK  ");
                            SQLin.AppendLine("        SET @__" + thisParam.paramName + "= @P_" + thisParam.paramName);
                            SQLin.AppendLine("    END  ");
                            SQLin.AppendLine("      ");
                        }
                    }
                    #endregion

                    #region If Logic For Each Column
                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        SQLin.AppendLine("    BEGIN --IF CHECKS FOR COLUMN: " + row["COLUMN_NAME"]);
                        #region Search Multiple Values
                        SQLin.AppendLine("        IF @P_" + row["COLUMN_NAME"] + " != '' and @P_" + row["COLUMN_NAME"] + " is not null and RTRIM( @P_" + row["COLUMN_NAME"] + ") != ''");
                        SQLin.AppendLine("        BEGIN  ");
                        SQLin.AppendLine("          ");
                        SQLin.AppendLine("            SET @_ConditionalHas" + row["COLUMN_NAME"] + " = 'T' ");
                        SQLin.AppendLine("            select array_values into #" + row["COLUMN_NAME"] + " from CSA.SPLITTER(@P_" + row["COLUMN_NAME"] + ", @P_DELIMITER)");
                        SQLin.AppendLine("            IF exists(select * from (select array_values from #" + row["COLUMN_NAME"] + ") av where av.array_values in ('NULL')) ");
                        SQLin.AppendLine("            BEGIN");
                        SQLin.AppendLine("                SET @_DynamicSearch" + row["COLUMN_NAME"] + " =  N'    and ( @IN__1stConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + " or (@IN__2ndConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + " and (a.[" + row["COLUMN_NAME"] + "] is null or a.[" + row["COLUMN_NAME"] + "] in (select Array_Values from #" + row["COLUMN_NAME"] + " av where av.array_values != ''NULL'')) )) ' + @V_LINE_BREAK  ");
                        SQLin.AppendLine("            END");
                        SQLin.AppendLine("            ELSE");
                        SQLin.AppendLine("            BEGIN");
                        SQLin.AppendLine("                SET @_DynamicSearch" + row["COLUMN_NAME"] + " =  N'    and ( @IN__1stConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + " or (@IN__2ndConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + " and a.[" + row["COLUMN_NAME"] + "] in (select Array_Values from #" + row["COLUMN_NAME"] + ") )) ' + @V_LINE_BREAK  ");
                        SQLin.AppendLine("            END");
                        SQLin.AppendLine("          ");
                        SQLin.AppendLine("            SET @__" + row["COLUMN_NAME"] + " = @P_" + row["COLUMN_NAME"]);
                        SQLin.AppendLine("        END  ");
                        SQLin.AppendLine("");
                        #endregion

                        #region Search Exclude Multiple Values
                        SQLin.AppendLine("        IF  @P_EXCLUDE_" + row["COLUMN_NAME"] + " != '' and  @P_EXCLUDE_" + row["COLUMN_NAME"] + " is not null and RTRIM( @P_EXCLUDE_" + row["COLUMN_NAME"] + ") != ''");
                        SQLin.AppendLine("        BEGIN  ");
                        SQLin.AppendLine("            SET @_ConditionalHasExclude" + row["COLUMN_NAME"] + " = 'T' ");
                        SQLin.AppendLine("            select array_values into #EXCLUDE_" + row["COLUMN_NAME"] + " from CSA.SPLITTER(@P_EXCLUDE_" + row["COLUMN_NAME"] + ", @P_DELIMITER)");
                        SQLin.AppendLine("            IF exists(select * from (select array_values from #EXCLUDE_" + row["COLUMN_NAME"] + ") av where av.array_values in ('NULL')) ");
                        SQLin.AppendLine("            BEGIN");
                        SQLin.AppendLine("              SET @_DynamicSearchExclude" + row["COLUMN_NAME"] + " =  N'    and ( @IN__1stConditionalBase = @IN__ConditionalHasExclude" + row["COLUMN_NAME"] + " or (@IN__2ndConditionalBase = @IN__ConditionalHasExclude" + row["COLUMN_NAME"] + " and (a.[" + row["COLUMN_NAME"] + "] is not null or a.[" + row["COLUMN_NAME"] + "] not in (select Array_Values from #EXCLUDE_" + row["COLUMN_NAME"] + " av where av.array_values != ''NULL'')) )) ' + @V_LINE_BREAK  ");
                        SQLin.AppendLine("            END");
                        SQLin.AppendLine("            ELSE");
                        SQLin.AppendLine("            BEGIN");
                        SQLin.AppendLine("              SET @_DynamicSearchExclude" + row["COLUMN_NAME"] + " =  N'    and ( @IN__1stConditionalBase = @IN__ConditionalHasExclude" + row["COLUMN_NAME"] + " or (@IN__2ndConditionalBase = @IN__ConditionalHasExclude" + row["COLUMN_NAME"] + " and a.[" + row["COLUMN_NAME"] + "] not in (select Array_Values from #EXCLUDE_" + row["COLUMN_NAME"] + ") )) ' + @V_LINE_BREAK  ");
                        SQLin.AppendLine("            END");
                        SQLin.AppendLine("            SET @__Exclude" + row["COLUMN_NAME"] + " = @P_EXCLUDE_" + row["COLUMN_NAME"]);
                        SQLin.AppendLine("          ");
                        SQLin.AppendLine("        END  ");
                        SQLin.AppendLine("");
                        #endregion

                        EqualsParameter(_Struct, row, SQLin);
                        SQLin.AppendLine("    END  ");
                        SQLin.AppendLine("");
                    }
                    #endregion
                    #endregion

                    SQLin.AppendLine("");
                    SQLin.AppendLine("    BEGIN TRY");
                    SQLin.AppendLine("   DECLARE @useDistinct varchar(MAX)= '' ");
                    SQLin.AppendLine("   IF @P_DISTINCT = 'T'");
                    SQLin.AppendLine("   BEGIN ");
                    SQLin.AppendLine("    SET @useDistinct = 'distinct' ");
                    SQLin.AppendLine("   END ");

                    #region GetLatestCode
                    if (_Struct.GetLatestVersion && procedureColumns.Rows.Count > 0)
                    {
                        outID = procedureColumns.Rows[0]["COLUMN_NAME"].ToString();

                        GetLatestConditionalTSQLCode(_Schema, SQLin, outID, source);
                    }
                    else
                    {
                        //SQLin.Append("' '");
                    }
                    #endregion


                    #region Query Type SQL Block
                    SQLin.AppendLine("        IF @P_TableorCount = 'Default Query'  ");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("             SET @RevampQueryOpen = 'SELECT * from ( ' + ");
                    SQLin.AppendLine("             'SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 0)) as rownumb, q1.* ' + @V_LINE_BREAK +");
                    SQLin.AppendLine("             'FROM ( ' + @V_LINE_BREAK +");
                    SQLin.AppendLine("             '   SELECT ' + @useDistinct  + ' TOP 99999999 ' + @V_DYNO_COL + ' from ' + '" + source + "' + ' a ' + @V_LINE_BREAK +");
                    if (_Struct.GetLatestVersion && procedureColumns.Rows.Count > 0)
                    {
                        SQLin.AppendLine("             @GET_LATEST_CODE + ");
                        SQLin.AppendLine("             @GET_FIRST_CODE + ");
                    }
                    SQLin.AppendLine("             '   WHERE ''T'' = @DYN_VERIFY_ACTION ' + @V_LINE_BREAK");
                    SQLin.AppendLine("        END  ");
                    SQLin.AppendLine("        ELSE IF @P_TableorCount = 'Custom Query'  ");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("             SET @RevampQueryOpen = 'SELECT * from ( ' + @V_LINE_BREAK +");
                    SQLin.AppendLine("             'SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 0)) as rownumb, q1.* ' + @V_LINE_BREAK +");
                    SQLin.AppendLine("             'FROM ( ' + @V_LINE_BREAK +");
                    SQLin.AppendLine("             '   SELECT ' + @useDistinct  + ' TOP 99999999 ' + @V_DYNO_COL + ' from ' + '" + source + "' + ' a ' + @V_LINE_BREAK +");
                    if (_Struct.GetLatestVersion && procedureColumns.Rows.Count > 0)
                    {
                        SQLin.AppendLine("             @GET_LATEST_CODE + ");
                        SQLin.AppendLine("             @GET_FIRST_CODE + ");
                    }
                    SQLin.AppendLine("             '   WHERE ''T'' = @DYN_VERIFY_ACTION ' + @V_LINE_BREAK");
                    SQLin.AppendLine("        END  ");
                    #region Coalesce Not Fully Developed Yet
                    //SQLin.AppendLine("        ELSE IF @P_TableorCount = 'Coalesce Query'  ");
                    //SQLin.AppendLine("        BEGIN  ");
                    //SQLin.AppendLine("     ");
                    ////SQLin.AppendLine("             SET @RevampQueryOpen = 'DECLARE @resultSet varchar(MAX) ' +");
                    //SQLin.AppendLine("     ");
                    //SQLin.AppendLine("             SET @RevampQueryOpen = 'SELECT ' + @P_DYNO_COL + ' from ( ' + ");
                    //SQLin.AppendLine("             'SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 0)) as rownumb, q1.* ' + ");
                    //SQLin.AppendLine("             'FROM ( ' + ");
                    //SQLin.AppendLine("             '   SELECT distinct a.* from ' + '" + source + "' + ' a ' + ");
                    //SQLin.AppendLine("             '   WHERE ''T'' = @DYN_VERIFY_ACTION ' + ");

                    //#region GetLatestCode
                    //if (_Struct.GetLatestVersion && procedureColumns.Rows.Count > 0)
                    //{
                    //    outID = procedureColumns.Rows[0]["COLUMN_NAME"].ToString();

                    //    GetLatestConditionalTSQLCode(_Schema, SQLin, outID, source);
                    //}
                    //else
                    //{
                    //    SQLin.Append("' '");
                    //}
                    //#endregion

                    //SQLin.AppendLine("        END  "); 
                    #endregion
                    SQLin.AppendLine("        ELSE IF @P_TableorCount = 'Count Query'  ");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("             SET @RevampQueryOpen = 'SELECT count(*) Count from ( ' + @V_LINE_BREAK +");
                    SQLin.AppendLine("             'SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 0)) as rownumb, q1.* ' + @V_LINE_BREAK +");
                    SQLin.AppendLine("             'FROM ( ' + @V_LINE_BREAK +");
                    SQLin.AppendLine("             '   SELECT ' + @useDistinct  + ' TOP 99999999 ' + @V_DYNO_COL + ' from ' + '" + source + "' + ' a ' + @V_LINE_BREAK +");
                    if (_Struct.GetLatestVersion && procedureColumns.Rows.Count > 0)
                    {
                        SQLin.AppendLine("             @GET_LATEST_CODE + ");
                        SQLin.AppendLine("             @GET_FIRST_CODE + ");
                    }
                    SQLin.AppendLine("             '   WHERE ''T'' = @DYN_VERIFY_ACTION ' + @V_LINE_BREAK");
                    SQLin.AppendLine("        END  ");
                    SQLin.AppendLine("     ");
                    #endregion

                    #region DynamicWhereClause

                    SQLin.AppendLine("        IF @_ConditionalHasSEARCH = 'T'");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("        SET @RevampQuerySearchColumns = '' + ");
                    SQLin.AppendLine("        '    AND (' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("        '        @IN__1stConditionalBase =  @IN__ConditionalHasSearch OR ( @IN__2ndConditionalBase = @IN__ConditionalHasSearch  ' + @V_LINE_BREAK +");
                    SQLin.AppendLine("        '        AND (' + @V_LINE_BREAK");

                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        if (row["DATA_TYPE"].ToString().ToLower() == "datetime" || row["DATA_TYPE"].ToString().ToLower() == "datetime2")
                        {
                            SQLin.AppendLine("         SET @RevampQuerySearchColumn" + row["COLUMN_NAME"] + " = '               (CONVERT(VARCHAR, [" + row["COLUMN_NAME"] + "], 120) like @DYN_SEARCH) OR ' + @V_LINE_BREAK ");
                        }
                        else
                        {
                            SQLin.AppendLine("         SET @RevampQuerySearchColumn" + row["COLUMN_NAME"] + " = '               (((LEN(RTRIM(@DYN_SEARCH_COLUMN_EXCLUDE)) = 0 OR ''" + row["COLUMN_NAME"] + "'' not in (select Array_Values from #V_SEARCH_COL_EXCLUDE_LIST)) ' + @V_LINE_BREAK + ");
                            SQLin.AppendLine("         '                     AND (LEN(RTRIM(@DYN_SEARCH_COLUMN_INCLUDE)) = 0 OR ''" + row["COLUMN_NAME"] + "'' in (select Array_Values from #V_SEARCH_COL_INCLUDE_LIST)) ) ' + @V_LINE_BREAK + ");
                            SQLin.AppendLine("         '                     AND [" + row["COLUMN_NAME"] + "] like @DYN_SEARCH) OR ' + @V_LINE_BREAK  ");
                        }
                    }
                    SQLin.AppendLine("        SET @RevampQuerySearchColumnsClose = '' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("        '               (''Close'' = ''Clause'')' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("        '           )' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("        '       )  ' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("        '   ) ' + @V_LINE_BREAK  ");
                    SQLin.AppendLine("        END");
                    #endregion

                    #region DynamicQueryClose
                    SQLin.AppendLine("");
                    SQLin.AppendLine("        IF @P_TableorCount in ('Default Query')  ");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("            SET @RevampQueryClose = 'ORDER BY ' + @P_ORDER_BY + @V_LINE_BREAK +");
                    SQLin.AppendLine("            '   ) q1 ' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("            ') q2 ' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("            'WHERE ( ''T'' != @DYN_ROW_LIMIT) or (''T'' =  @DYN_ROW_LIMIT AND rownumb between ' + CONVERT(varchar, @P_STARTING_ROW) + ' AND ' + CONVERT(varchar,(@P_LENGTH_OF_SET + @P_STARTING_ROW - 1)) + ') ' + @V_LINE_BREAK  ");
                    SQLin.AppendLine("            SET @RevampQueryOrder = 'ORDER BY ' + 'q2.rownumb ' + @V_LINE_BREAK ");
                    //SQLin.AppendLine("            'order by q2.rownumb ' ");
                    SQLin.AppendLine("        END  ");
                    SQLin.AppendLine("        ELSE IF @P_TableorCount in ('Custom Query')  ");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("          ");
                    SQLin.AppendLine("          DECLARE @currentOrderby varchar(max)");
                    SQLin.AppendLine("          ");
                    SQLin.AppendLine("          IF @_ChangeOrderby = 'T'");
                    SQLin.AppendLine("          BEGIN");
                    SQLin.AppendLine("              SET @currentOrderby = @P_ORDER_BY");
                    SQLin.AppendLine("          END");
                    SQLin.AppendLine("          ELSE");
                    SQLin.AppendLine("          BEGIN");
                    SQLin.AppendLine("              SET @currentOrderby = 'q2.rownumb'");
                    SQLin.AppendLine("          END");
                    //@_ChangeOrderby
                    SQLin.AppendLine("            SET @RevampQueryClose = 'ORDER BY ' + @P_ORDER_BY + @V_LINE_BREAK +");
                    SQLin.AppendLine("            '   ) q1 ' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("            ') q2 ' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("            'WHERE ( ''T'' != @DYN_ROW_LIMIT) or (''T'' =  @DYN_ROW_LIMIT AND rownumb between ' + CONVERT(varchar, @P_STARTING_ROW) + ' AND ' + CONVERT(varchar,(@P_LENGTH_OF_SET + @P_STARTING_ROW - 1)) + ') ' + @V_LINE_BREAK ");
                    SQLin.AppendLine("            SET @RevampQueryOrder = 'ORDER BY ' + @currentOrderby + @V_LINE_BREAK  ");
                    // SQLin.AppendLine("            'order by ' + @currentOrderby ");
                    SQLin.AppendLine("        END  ");
                    #region Coalesce Not Fully Developed Yet
                    //SQLin.AppendLine("        ELSE IF @P_TableorCount in ('Coalesce Query')  ");
                    //SQLin.AppendLine("        BEGIN  ");
                    //SQLin.AppendLine("            SET @RevampQueryClose ='   ) q1 ' + ");
                    //SQLin.AppendLine("            ') q2 ' + ");
                    //SQLin.AppendLine("            'WHERE ( ''T'' != @DYN_ROW_LIMIT) or (''T'' =  @DYN_ROW_LIMIT AND rownumb between ' + CONVERT(varchar, @P_STARTING_ROW) + ' AND ' + CONVERT(varchar,(@P_LENGTH_OF_SET + @P_STARTING_ROW - 1)) + ') ' ");
                    //SQLin.AppendLine("            SET @RevampQueryOrder = 'ORDER BY ' + @P_ORDER_BY ");
                    //SQLin.AppendLine("        END  "); 
                    #endregion
                    SQLin.AppendLine("        ELSE IF @P_TableorCount = 'Count Query'  ");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("            SET @RevampQueryClose = '   ) q1 ' + @V_LINE_BREAK + ");
                    SQLin.AppendLine("            ') q2 ' + @V_LINE_BREAK ");
                    SQLin.AppendLine("        END  ");
                    SQLin.AppendLine("        ELSE  ");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("            SET @RevampQueryClose = N''");
                    SQLin.AppendLine("        END  ");
                    #endregion



                    #region Merge SQL String
                    SQLin.AppendLine("");
                    SQLin.AppendLine("        SET @MergedSQL = @RevampQueryOpen + @_DynamicSearchWHERE +");
                    SQLin.AppendLine("            @RevampQueryExtraParams + ");
                    SQLin.AppendLine("            @RevampQuerySearchColumns  +");
                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        SQLin.AppendLine("            @RevampQuerySearchColumn" + row["COLUMN_NAME"] + "  +");
                    }
                    SQLin.AppendLine("            @RevampQuerySearchColumnsClose  +");

                    if (_Struct.moreParams != null)
                    {
                        //Each Extra Declared Variable for Each Column is being appended.
                        foreach (moreParams thisParam in _Struct.moreParams)
                        {
                            SQLin.AppendLine("             @_DynamicSearch" + thisParam.paramName + " + ");
                            SQLin.AppendLine("             @_DynamicSearchExclude" + thisParam.paramName + " + ");
                        }
                    }
                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        //Each Declared Variable for Each Column is being appended.
                        SQLin.AppendLine("            @_DynamicSearch" + row["COLUMN_NAME"] + " + ");
                        SQLin.AppendLine("            @_DynamicSearchExclude" + row["COLUMN_NAME"] + " + ");
                        if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                        {
                            //Do Nothing
                        }
                        else
                        {
                            if (!_Struct.DisableUnique)
                            {
                                SQLin.AppendLine("            @_DynamicSearch" + row["COLUMN_NAME"] + "_ + ");
                            }
                        }
                    }

                    //SQLin.AppendLine("            @GET_LATEST_CODE + ");
                    SQLin.AppendLine("            @_DynamicSearchClose + ");
                    SQLin.AppendLine("            @RevampQueryGroup +");
                    SQLin.AppendLine("            @RevampQueryHaving +");
                    SQLin.AppendLine("            @RevampQueryClose +");
                    SQLin.AppendLine("            @RevampQueryOrder");
                    //                    SQLin.AppendLine("            N' OPTION (RECOMPILE)' ");
                    #endregion

                    SQLin.AppendLine("");
                    SQLin.AppendLine("--THIS PROC WAS GENERATED by EMINENT IT LLC, REVAMP IO");
                    #region SP_EXECUTE_BLOCK
                    SQLin.AppendLine("        EXECUTE sp_executesql @MergedSQL, N' ");
                    SQLin.AppendLine("            @IN__1stConditionalBase CHAR(1) = ''F'' ");
                    SQLin.AppendLine("            ,@IN__2ndConditionalBase CHAR(1) = ''T'' ");
                    SQLin.AppendLine("            ,@IN__ConditionalHasSearch CHAR(1) = ''F'' ");
                    SQLin.AppendLine("            ,@DYN_SEARCH VARCHAR(MAX) ");
                    SQLin.AppendLine("            ,@DYN_SEARCH_COLUMN_INCLUDE VARCHAR(MAX) = '''' ");
                    SQLin.AppendLine("            ,@DYN_SEARCH_COLUMN_EXCLUDE VARCHAR(MAX) = '''' ");
                    SQLin.AppendLine("            ,@DYN_COALSECE VARCHAR(MAX) ");
                    SQLin.AppendLine("            ,@DYN_DELIMITER" + " [" + "varchar" + "](" + "MAX" + ") = '','' ");
                    if (_Struct.GetLatestVersion && procedureColumns.Rows.Count > 0)
                    {
                        SQLin.AppendLine("            ,@IN__ConditionalHasGET_LATEST CHAR(1) = ''F'' ");
                        SQLin.AppendLine("            ,@IN__ConditionalHasGET_FIRST CHAR(1) = ''F'' ");
                    }

                    if (_Struct.moreParams != null)
                    {
                        foreach (moreParams thisParam in _Struct.moreParams)
                        {

                            SQLin.AppendLine("            ,@IN__ConditionalHas" + thisParam.paramName + " CHAR(1) ");
                            SQLin.AppendLine("            ,@P_" + thisParam.paramName + " " + thisParam.paramDataType);
                        }
                    }

                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        SQLin.AppendLine("            ,@IN__ConditionalHas" + row["COLUMN_NAME"] + " CHAR(1) ");
                        SQLin.AppendLine("            ,@IN___" + row["COLUMN_NAME"] + " [VARCHAR](MAX) ");

                        SQLin.AppendLine("            ,@IN__ConditionalHasExclude" + row["COLUMN_NAME"] + " CHAR(1) ");
                        SQLin.AppendLine("            ,@IN___Exclude" + row["COLUMN_NAME"] + " [VARCHAR](MAX) ");


                        if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                        {
                            //Do Nothing
                        }
                        else
                        {
                            if (!_Struct.DisableUnique)
                            {
                                SQLin.AppendLine("            ,@IN__ConditionalHas" + row["COLUMN_NAME"] + "_ CHAR(1) ");
                                RowsWithDataType(SQLin, row, "IN___", true, true, true, true, 12);
                            }
                        }
                    }
                    SQLin.AppendLine("            ,@DYN_VERIFY_ACTION char(1)");
                    SQLin.AppendLine("            ,@DYN_ROW_LIMIT char(1)'");

                    if (_Struct.moreParams != null)
                    {
                        foreach (moreParams thisParam in _Struct.moreParams)
                        {
                            SQLin.AppendLine("            ,@IN__ConditionalHas" + thisParam.paramName + " = @_ConditionalHas" + thisParam.paramName + " ");
                            SQLin.AppendLine("            ,@P_" + thisParam.paramName + " = @P_" + thisParam.paramName);
                        }
                    }

                    foreach (DataRow row in procedureColumns.Rows)
                    {
                        SQLin.AppendLine("            ,@IN__ConditionalHas" + row["COLUMN_NAME"] + " = @_ConditionalHas" + row["COLUMN_NAME"] + " ");
                        SQLin.AppendLine("            ,@IN___" + row["COLUMN_NAME"] + " = @__" + row["COLUMN_NAME"] + " ");

                        SQLin.AppendLine("            ,@IN__ConditionalHasExclude" + row["COLUMN_NAME"] + " = @_ConditionalHasExclude" + row["COLUMN_NAME"] + " ");
                        SQLin.AppendLine("            ,@IN___Exclude" + row["COLUMN_NAME"] + " = @__Exclude" + row["COLUMN_NAME"] + " ");

                        if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                        {
                            //Do Nothing
                        }
                        else
                        {
                            if (!_Struct.DisableUnique)
                            {
                                SQLin.AppendLine("            ,@IN__ConditionalHas" + row["COLUMN_NAME"] + "_ = @_ConditionalHas" + row["COLUMN_NAME"] + "_ ");
                                SQLin.AppendLine("            ,@IN___" + row["COLUMN_NAME"] + "_ = @__" + row["COLUMN_NAME"] + "_ ");
                            }
                        }
                    }

                    SQLin.AppendLine("            ,@IN__ConditionalHasSearch = @_ConditionalHasSEARCH");
                    SQLin.AppendLine("            ,@DYN_SEARCH = @V_SEARCH");
                    SQLin.AppendLine("            ,@DYN_SEARCH_COLUMN_INCLUDE = @P_SEARCH_COLUMN_INCLUDE");
                    SQLin.AppendLine("            ,@DYN_SEARCH_COLUMN_EXCLUDE = @P_SEARCH_COLUMN_EXCLUDE");
                    SQLin.AppendLine("            ,@DYN_COALSECE = @DYN_COALSECE ");
                    SQLin.AppendLine("            ,@DYN_DELIMITER = @P_DELIMITER");
                    SQLin.AppendLine("            ,@DYN_VERIFY_ACTION = @P_VERIFY");
                    SQLin.AppendLine("            ,@DYN_ROW_LIMIT = @V_ROW_LIMIT");

                    if (_Struct.GetLatestVersion && procedureColumns.Rows.Count > 0)
                    {
                        SQLin.AppendLine("            ,@IN__ConditionalHasGET_LATEST = @_ConditionalHasGET_LATEST ");
                        SQLin.AppendLine("            ,@IN__ConditionalHasGET_FIRST = @_ConditionalHasGET_FIRST ");
                    }

                    SQLin.AppendLine("");
                    #endregion
                    SQLin.AppendLine("");
                    SQLin.AppendLine("    END TRY");
                    SQLin.AppendLine("    BEGIN CATCH ");
                    #region Error Catch Block
                    SQLin.AppendLine("        DECLARE @O_ERR_NUMB bigint ");
                    SQLin.AppendLine("        DECLARE @O_ERR_MESS varchar(Max) ");
                    SQLin.AppendLine("        SELECT @O_ERR_NUMB = ERROR_NUMBER() ");
                    SQLin.AppendLine("        SELECT @O_ERR_MESS = ERROR_MESSAGE() ");
                    SQLin.AppendLine("        SELECT @O_ERR_NUMB err_numb, @O_ERR_MESS err_mess, @MergedSQL generatedSQL ");
                    #endregion
                    SQLin.AppendLine("	  END CATCH ");
                    SQLin.AppendLine("END");

                    return SQLin.ToString();
                default:
                    return "Invalid DB Platform";
            }
        }

        private static void TSQLCommonSyntax(StringBuilder SQLin, DataRow row)
        {
            SQLin.AppendLine("        BEGIN");
            SQLin.AppendLine("            SET @_DynamicSearch" + row["COLUMN_NAME"] + "_ =  N'    AND ( @IN__1stConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ or (@IN__2ndConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ and (a.[" + row["COLUMN_NAME"] + "] is null) )) ' + @V_LINE_BREAK ");
            SQLin.AppendLine("        END");
            SQLin.AppendLine("        ELSE");
            SQLin.AppendLine("        BEGIN");
            SQLin.AppendLine("            SET @_DynamicSearch" + row["COLUMN_NAME"] + "_ =  N'    AND ( @IN__1stConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ or (@IN__2ndConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ and a.[" + row["COLUMN_NAME"] + "] = @IN___" + row["COLUMN_NAME"] + "_ )) ' + @V_LINE_BREAK ");
            SQLin.AppendLine("        END");
            SQLin.AppendLine("      ");
            SQLin.AppendLine("        SET @__" + row["COLUMN_NAME"] + "_ = @P_" + row["COLUMN_NAME"] + "_");
            SQLin.AppendLine("    END  ");
        }

        private static void NullTSQLNumberSyntax(StringBuilder SQLin, DataRow row)
        {
            SQLin.AppendLine("    BEGIN  ");
            SQLin.AppendLine("      ");
            SQLin.AppendLine("        SET @_ConditionalHas" + row["COLUMN_NAME"] + "_ = 'T' ");
            SQLin.AppendLine("        IF @P_" + row["COLUMN_NAME"] + "_ is NULL ");
            TSQLCommonSyntax(SQLin, row);
        }

        private static void NotNullTSQLSyntax(StringBuilder SQLin, DataRow row)
        {
            SQLin.AppendLine("    BEGIN  ");
            SQLin.AppendLine("");
            SQLin.AppendLine("        SET @_ConditionalHas" + row["COLUMN_NAME"] + "_ = 'T' ");
            SQLin.AppendLine("        SET @_DynamicSearch" + row["COLUMN_NAME"] + "_ =  N'    AND ( @IN__1stConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ or (@IN__2ndConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ and a.[" + row["COLUMN_NAME"] + "] = @IN___" + row["COLUMN_NAME"] + "_ )) ' + @V_LINE_BREAK ");
            SQLin.AppendLine("");
            SQLin.AppendLine("        SET @__" + row["COLUMN_NAME"] + "_ = @P_" + row["COLUMN_NAME"] + "_");
            SQLin.AppendLine("    END  ");
        }

        private static void GetLatestConditionalTSQLCode(string _Schema, StringBuilder SQLin, string outID, string source)
        {
            SQLin.AppendLine("");
            SQLin.AppendLine("        DECLARE @GET_LATEST_CODE varchar(MAX) = '' ");
            SQLin.AppendLine("        DECLARE @GET_FIRST_CODE varchar(MAX) = '' ");
            SQLin.AppendLine("");
            SQLin.AppendLine("        IF @P_GET_LATEST = 'T' ");
            SQLin.AppendLine("        BEGIN");
            SQLin.AppendLine("        SET @GET_LATEST_CODE = ' INNER JOIN (select e.BASE_" + outID + " as BASE_" + outID + "1, e.[" + outID + "] as [" + outID + "1] from ( ' + @V_LINE_BREAK +");
            SQLin.AppendLine("        '            select BASE_" + outID + ", max([" + outID + "]) [" + outID + "] ' + @V_LINE_BREAK +");
            SQLin.AppendLine("        '            FROM " + source + " ' + @V_LINE_BREAK +");
            SQLin.AppendLine("        '            group by BASE_" + outID + " ' + @V_LINE_BREAK +");
            SQLin.AppendLine("        '            ) e) b on a." + outID + " = b." + outID + "1 ' + @V_LINE_BREAK ");
            SQLin.AppendLine("        END");

            SQLin.AppendLine("");            
            SQLin.AppendLine("        IF @P_GET_FIRST = 'T' and  @P_GET_LATEST != 'T' ");
            SQLin.AppendLine("        BEGIN");
            SQLin.AppendLine("        SET @GET_FIRST_CODE = ' INNER JOIN (select e.BASE_" + outID + " as BASE_" + outID + "1, e.[" + outID + "] as [" + outID + "1] from ( ' + @V_LINE_BREAK +");
            SQLin.AppendLine("        '            select BASE_" + outID + ", min([" + outID + "]) [" + outID + "] ' + @V_LINE_BREAK +");
            SQLin.AppendLine("        '            FROM " + source + " ' + @V_LINE_BREAK +");
            SQLin.AppendLine("        '            group by BASE_" + outID + " ' + @V_LINE_BREAK +");
            SQLin.AppendLine("        '            ) e) b on a." + outID + " = b." + outID + "1 ' + @V_LINE_BREAK ");
            SQLin.AppendLine("        END");
        }

        private static void EqualsParameter(SearchProcedureStruct _Struct, DataRow row, StringBuilder SQLin)
        {
            if (!_Struct.DisableUnique)
            {
                #region Search Single Values Faster Query

                if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                {
                    //Do Nothing
                }
                else if (Array.IndexOf(PrecisionTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                {
                    #region Precision And Scale Logic

                    //Not Null and any Precision Types
                    if (row["IS_NULLABLE"].ToString().ToLower() == "no")
                    {
                        SQLin.AppendLine("    IF @P_" + row["COLUMN_NAME"] + "_ != '" + float.MinValue.ToString() + "' and  @P_" + row["COLUMN_NAME"] + "_ is not null ");
                        NotNullTSQLSyntax(SQLin, row);
                    }
                    //Null and any Precision Types
                    else
                    {
                        SQLin.AppendLine("    IF @P_" + row["COLUMN_NAME"] + "_ != '" + float.MinValue.ToString() + "'");
                        NullTSQLNumberSyntax(SQLin, row);
                    }

                    #endregion
                }
                else if (Array.IndexOf(PrecisionAndScaleTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                {
                    PrecisionScale PSModel = GetPrecisionScale(row);

                    #region Precision And Scale Logic

                    //Not Null and any Precision Types
                    if (row["IS_NULLABLE"].ToString().ToLower() == "no")
                    {
                        SQLin.AppendLine("    IF @P_" + row["COLUMN_NAME"] + "_ != '" + PSModel.PSValue + "' and  @P_" +
                                         row["COLUMN_NAME"] + "_ is not null ");
                        NotNullTSQLSyntax(SQLin, row);
                    }
                    //Null and any Precision Types
                    else
                    {
                        SQLin.AppendLine("    IF @P_" + row["COLUMN_NAME"] + "_ != '" + PSModel.PSValue + "'");
                        NullTSQLNumberSyntax(SQLin, row);
                    }

                    #endregion
                }
                else if (Array.IndexOf(NumberTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                {
                    #region Number Logic

                    if (row["IS_NULLABLE"].ToString().ToLower() == "no")
                    {
                        SQLin.AppendLine("    IF @P_" + row["COLUMN_NAME"] + "_ != " + GetTSQLMinMathValue(row) + " and  @P_" +
                                         row["COLUMN_NAME"] + "_ is not null ");
                        NotNullTSQLSyntax(SQLin, row);
                    }
                    else
                    {
                        SQLin.AppendLine("    IF @P_" + row["COLUMN_NAME"] + "_ != " + GetTSQLMinMathValue(row) + "");
                        NullTSQLNumberSyntax(SQLin, row);
                    }

                    #endregion
                }
                else if (Array.IndexOf(StringTypes, row["DATA_TYPE"].ToString().ToLower()) > -1 ||
                         Array.IndexOf(NTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                {
                    #region String Logic

                    if (row["IS_NULLABLE"].ToString().ToLower() == "no")
                    {
                        SQLin.AppendLine("    IF RTRIM( @P_" + row["COLUMN_NAME"] + "_) != '" + UniqueDefault + "' and  @P_" + row["COLUMN_NAME"] + "_ is not null ");
                        NotNullTSQLSyntax(SQLin, row);
                    }
                    else
                    {
                        SQLin.AppendLine("    IF RTRIM( @P_" + row["COLUMN_NAME"] + "_) != '" + UniqueDefault + "'");
                        SQLin.AppendLine("    BEGIN  ");
                        SQLin.AppendLine("      ");
                        SQLin.AppendLine("        SET @_ConditionalHas" + row["COLUMN_NAME"] + "_ = 'T' ");

                        if (Array.IndexOf(StringTypes, row["DATA_TYPE"].ToString().ToLower()) > -1 ||
                            Array.IndexOf(NTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                        {
                            SQLin.AppendLine("        IF @P_" + row["COLUMN_NAME"] + "_ = 'NULL' or @P_" + row["COLUMN_NAME"] +
                                             "_ is NULL ");
                        }
                        else
                        {
                            SQLin.AppendLine("        IF @P_" + row["COLUMN_NAME"] + "_ is NULL ");
                        }

                        TSQLCommonSyntax(SQLin, row);
                    }

                    #endregion
                }
                else if (Array.IndexOf(UUIDTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
                {
                    #region String Logic

                    //SQLin.AppendLine("IF RTRIM(@P_" + row["COLUMN_NAME"] + "_) != '' and  @P_" + row["COLUMN_NAME"] + "_ is not null ");
                    //NullTSQLNumberSyntax(SQLin, row);

                    SQLin.AppendLine("        IF RTRIM(@P_" + row["COLUMN_NAME"] + "_) != ''");
                    SQLin.AppendLine("        BEGIN  ");
                    SQLin.AppendLine("              ");
                    SQLin.AppendLine("            SET @_ConditionalHas" + row["COLUMN_NAME"] + "_ = 'T' ");
                    SQLin.AppendLine("            IF @P_" + row["COLUMN_NAME"] + "_ = 'NULL' ");
                    SQLin.AppendLine("            BEGIN");
                    SQLin.AppendLine("                SET @_DynamicSearch" + row["COLUMN_NAME"] + "_ =  N'and ( @IN__1stConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ or (@IN__2ndConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ and (a.[" + row["COLUMN_NAME"] + "] is null) )) ' ");
                    SQLin.AppendLine("            END");
                    SQLin.AppendLine("            ELSE");
                    SQLin.AppendLine("            BEGIN");
                    SQLin.AppendLine("                SET @_DynamicSearch" + row["COLUMN_NAME"] + "_ =  N'and ( @IN__1stConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ or (@IN__2ndConditionalBase = @IN__ConditionalHas" + row["COLUMN_NAME"] + "_ and a.[" + row["COLUMN_NAME"] + "] = TRY_CONVERT(UNIQUEIDENTIFIER, @IN___" + row["COLUMN_NAME"] + "_)  )) ' ");
                    SQLin.AppendLine("            END");
                    SQLin.AppendLine("              ");
                    SQLin.AppendLine("              SET @__" + row["COLUMN_NAME"] + "_ = @P_" + row["COLUMN_NAME"] + "_");
                    SQLin.AppendLine("        END  ");

                    #endregion
                }
                else
                {
                    #region Catch All Logic

                    SQLin.AppendLine("    IF  @P_" + row["COLUMN_NAME"] + "_ != '' and  @P_" + row["COLUMN_NAME"] + "_ is not null and RTRIM( @P_" + row["COLUMN_NAME"] + "_) != ''");
                    SQLin.AppendLine("    BEGIN  ");
                    SQLin.AppendLine("      ");
                    SQLin.AppendLine("        SET @_ConditionalHas" + row["COLUMN_NAME"] + "_ = 'T' ");
                    SQLin.AppendLine("        IF @P_" + row["COLUMN_NAME"] + "_ = 'NULL'");
                    TSQLCommonSyntax(SQLin, row);

                    #endregion
                }

                #endregion
            }
        }

        private static void RowsWithDataType(StringBuilder SQLin, DataRow row, string Prefix, bool usePrefix, bool useInit, bool addUnderscore, bool Dynamic, int leftPad, int rowCount = 0, bool declare = false)
        {

            string initVar = Dynamic ? "N''''" : "N''";

            string leftSpacing = "";

            leftSpacing = leftSpacing.PadLeft(leftPad, ' ');

            Prefix = usePrefix ? (declare ? "DECLARE " : "") + "@" + Prefix : "";

            string addComma = rowCount == 1 ? "" : ",";
            string add_ = addUnderscore ? "_" : "";


            if (Array.IndexOf(StringTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
            {
                initVar = Dynamic ? "N''" + UniqueDefault + "''" : "N'" + UniqueDefault + "'";

                SQLin.AppendLine(leftSpacing + addComma + Prefix + row["COLUMN_NAME"] + add_ + " [" + row["DATA_TYPE"] + "](" + (row["DATA_LENGTH"].ToString() == "-1" ? "MAX" : row["DATA_LENGTH"]) + ") " + (useInit ? " = " + initVar : ""));

            }
            else if (Array.IndexOf(UUIDTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
            {
                initVar = Dynamic ? "N''" + UniqueDefault + "''" : "N'" + UniqueDefault + "'";

                SQLin.AppendLine(leftSpacing + addComma + Prefix + row["COLUMN_NAME"] + add_ + " [varchar](MAX) " + (useInit ? " = null" : " = null"));
            }
            else if (Array.IndexOf(NTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
            {
                initVar = Dynamic ? "N''" + UniqueDefault + "''" : "N'" + UniqueDefault + "'";

                SQLin.AppendLine(leftSpacing + addComma + Prefix + row["COLUMN_NAME"] + add_ + " [" + row["DATA_TYPE"] + "](" + (row["DATA_LENGTH"].ToString() == "-1" ? "MAX" : (Convert.ToInt32(row["DATA_LENGTH"]) / 2).ToString()) + ") " + (useInit ? " = " + initVar : ""));

            }
            else if (Array.IndexOf(NumberTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
            {
                initVar = GetTSQLMinMathValue(row);

                SQLin.AppendLine(leftSpacing + addComma + Prefix + row["COLUMN_NAME"] + add_ + " [" + row["DATA_TYPE"] + "] " + (useInit ? " = " + initVar : ""));
            }
            else if (Array.IndexOf(PrecisionAndScaleTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
            {
                PrecisionScale PSModel = GetPrecisionScale(row);

                SQLin.AppendLine(leftSpacing + addComma + Prefix + row["COLUMN_NAME"] + add_ + " [" + row["DATA_TYPE"] + "](" + row["NUMERIC_PRECISION"] + ", " + row["NUMERIC_SCALE"] + ") " + (useInit ? " = " + PSModel.PSValue : ""));
            }
            else if (Array.IndexOf(PrecisionTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
            {
                SQLin.AppendLine(leftSpacing + addComma + Prefix + row["COLUMN_NAME"] + add_ + " [" + row["DATA_TYPE"] + "] " + (useInit ? " = " + float.MinValue.ToString() : ""));
            }
            else if (Array.IndexOf(ByteDataTypes, row["DATA_TYPE"].ToString().ToLower()) > -1)
            {
                //Do Nothing
            }
            else
            {
                SQLin.AppendLine(leftSpacing + addComma + Prefix + row["COLUMN_NAME"] + add_ + " [" + row["DATA_TYPE"] + "] " + (useInit ? " = " + initVar : ""));
            }
        }//public string GENERATE_SEARCH_COUNT_PROCEDURE(IConnectToDB _SystemConnect, IConnectToDB _SourceConnect, SearchProcedureStruct _Struct)

        private static string GetTSQLMinMathValue(DataRow row)
        {
            string initVar = "";

            switch (row["DATA_TYPE"].ToString().ToLower())
            {
                case "bigint":
                    initVar = Int64.MinValue.ToString();
                    break;
                case "int":
                    initVar = Int32.MinValue.ToString();
                    break;
                case "smallint":
                    initVar = Int16.MinValue.ToString();
                    break;
                default:
                    initVar = Int32.MinValue.ToString();
                    break;
            }
            return initVar;
        }

        private static PrecisionScale GetPrecisionScale(DataRow row)
        {
            int LeftSide = Convert.ToInt32((row["NUMERIC_PRECISION"])) - Convert.ToInt32(row["NUMERIC_SCALE"]);
            int RightSide = Convert.ToInt32(row["NUMERIC_SCALE"]);
            string empty = "";
            string DefaultValue = "-" + (LeftSide > 0 ? empty.PadLeft(LeftSide, '9') : "0") + "." + (RightSide > 0 ? empty.PadLeft(RightSide, '9') : "0");

            DefaultValue = DefaultValue.Length > 38 ? DefaultValue.Substring(0, 38) : DefaultValue;

            return new PrecisionScale { LeftSideLength = LeftSide, RightSideLength = RightSide, PSValue = DefaultValue };
        }

        public DataTable ColumnsDataTable()
        {
            // Create a new DataTable.
            DataTable table = new DataTable("ReturnData");
            DataColumn column;

            // Create first column and add to the DataTable.
            column = new DataColumn();
            column.DataType = System.Type.GetType("System.Int32");
            column.ColumnName = "ORDINAL_POSITION";
            column.AutoIncrement = true;
            column.AutoIncrementSeed = 0;
            column.AutoIncrementStep = 1;
            column.Caption = "ID";
            column.ReadOnly = true;
            column.Unique = true;
            table.Columns.Add(column);

            // Create second column and add to the DataTable.
            column = new DataColumn();
            column.DataType = System.Type.GetType("System.String");
            column.ColumnName = "COLUMN_NAME";
            column.AutoIncrement = false;
            column.Caption = "COLUMN_NAME";
            column.ReadOnly = false;
            column.Unique = false;
            table.Columns.Add(column);

            // Create third column and add to the DataTable.
            column = new DataColumn();
            column.DataType = System.Type.GetType("System.String");
            column.ColumnName = "DATA_TYPE";
            column.AutoIncrement = false;
            column.Caption = "DATA_TYPE";
            column.ReadOnly = false;
            column.Unique = false;
            table.Columns.Add(column);

            // Create fourth column and add to the DataTable.
            column = new DataColumn();
            column.DataType = System.Type.GetType("System.String");
            column.ColumnName = "DATA_LENGTH";
            column.AutoIncrement = false;
            column.Caption = "DATA_LENGTH";
            column.ReadOnly = false;
            column.Unique = false;
            table.Columns.Add(column);

            // Create fourth column and add to the DataTable.
            column = new DataColumn();
            column.DataType = System.Type.GetType("System.String");
            column.ColumnName = "NUMERIC_PRECISION";
            column.AutoIncrement = false;
            column.Caption = "NUMERIC_PRECISION";
            column.ReadOnly = false;
            column.Unique = false;
            table.Columns.Add(column);

            // Create fourth column and add to the DataTable.
            column = new DataColumn();
            column.DataType = System.Type.GetType("System.String");
            column.ColumnName = "NUMERIC_SCALE";
            column.AutoIncrement = false;
            column.Caption = "NUMERIC_SCALE";
            column.ReadOnly = false;
            column.Unique = false;
            table.Columns.Add(column);

            // Create fourth column and add to the DataTable.
            column = new DataColumn();
            column.DataType = System.Type.GetType("System.String");
            column.ColumnName = "TABLE_SCHEMA";
            column.AutoIncrement = false;
            column.Caption = "TABLE_SCHEMA";
            column.ReadOnly = false;
            column.Unique = false;
            table.Columns.Add(column);

            //// Create fourth column and add to the DataTable.
            //column = new DataColumn();
            //column.DataType = System.Type.GetType("System.String");
            //column.ColumnName = "ORDINAL_POSITION";
            //column.AutoIncrement = false;
            //column.Caption = "ORDINAL_POSITION";
            //column.ReadOnly = false;
            //column.Unique = false;
            //table.Columns.Add(column);


            // Create fourth column and add to the DataTable.
            column = new DataColumn();
            column.DataType = System.Type.GetType("System.String");
            column.ColumnName = "IS_NULLABLE";
            column.AutoIncrement = false;
            column.Caption = "IS_NULLABLE";
            column.ReadOnly = false;
            column.Unique = false;
            table.Columns.Add(column);
            return table;
        }

        private string MaxNameLength(string name, int maxLength)
        {
            string returnString = name;

            if (name.Length > maxLength)
                returnString = name.Substring(0, maxLength);

            return returnString;

            // END TOOL FORMATTING
            //
        }

        private string ExtractString(string s, string tag, string tag2)
        {
            // You should check for errors in real-world code, omitted for brevity
            try
            {
                var startTag = tag;
                int startIndex = s.IndexOf(startTag) + startTag.Length;
                var startTag2 = tag2;
                int startIndex2 = s.IndexOf(startTag2) - s.IndexOf(startTag);

                string temp = s.Substring(startIndex, startIndex2);
                return s.Substring(startIndex, startIndex2);
            }
            catch (Exception e)
            {
                return e.ToString();
            }
        }
    }

    public class PrecisionScale
    {
        public int LeftSideLength { get; set; }
        public int RightSideLength { get; set; }
        public string PSValue { get; set; }
    }

    public class InsertProcedureStruct
    {
        public string ProcedurePrefix { get; set; }
        public string ProcedureName { get; set; }
        public string SourceName { get; set; }
        public bool updateParent { get; set; }
        public bool insertUUID { get; set; }
        public string[] excludedColumns { get; set; }

        public bool UsePlaceHoldingValue { get; set; }

    }

    public class SearchProcedureStruct
    {
        public string ProcedurePrefix { get; set; }
        public string ProcedureName { get; set; }
        public bool GetLatestVersion { get; set; }
        public string SourceName { get; set; }
        public bool onlyEnabled { get; set; }
        public List<string> paramList { get; set; }

        public List<string> columnOveride { get; set; }

        public List<moreParams> moreParams { get; set; }

        public bool enableDistinct { get; set; }

        public bool DisableUnique { get; set; }

        public string orderBy { get; set; }

        public GetDataFromProc useProc { get; set; }
    }

    public class GetDataFromProc
    {
        public List<customColumn> columns { get; set; }
        public bool useThisOverride { get; set; }
        public string ProcedureName { get; set; }
        public string ProcedureParams { get; set; }
    }

    public class columnParamPair
    {
        public string column { get; set; }
        public string param { get; set; }
    }
    /// <summary>
    /// This is the procedure parameter name. It will attach the @P_. Do not include @P."
    /// </summary>
    public class moreParams
    {
        [Description("This is the procedure parameter name. It will attach the @P_. Do not include @P.")]
        public string paramName { get; set; }

        public string paramDataType { get; set; }

        public string paramClause { get; set; }

        public string paramDefault { get; set; }
    }

    public class customColumn
    {
        public string columnName { get; set; }

        public columnDataTypes columnDataType { get; set; }

        public Int32 columnSize { get; set; }

        public Int32 columnPrecision { get; set; }
        public Int32 columnScale { get; set; }

        public bool isNullable { get; set; }

        public string defaultValue { get; set; }
    }

    public enum columnDataTypes
    {
        VarChar,
        BigInt,
        Int,
        DateTime,
        Char,
        Decimal,
        Numeric,
        Bit
    }
}
